/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import Tabelas.NpcsCombatentes;
import Tabelas.Raca;
import dao.GenericDAO;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import tabelas.Armaduras;
import tabelas.ArmadurasNpcs;
import tabelas.Armas;
import tabelas.ArmasNpcs;
import tabelas.Classes;
import tabelas.Consumiveis;
import tabelas.ConsumiveisNpcs;
import tabelas.Escudos;
import tabelas.EscudosNpcs;
import tabelas.Falas;
import tabelas.Npcs;
import tabelas.NpcsFalas;
import tabelas.Personagens;

/**
 *
 * @author Leonardo
 */
public class JFNpc extends javax.swing.JFrame {

    /**
     * Creates new form JFNpc
     */
    public void centralizarComponente() {

        Dimension ds = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension dw = getSize();
        setLocation((ds.width - dw.width) / 2, (ds.height - dw.height) / 2);
    }

    public JFNpc() {
        initComponents();
        centralizarComponente();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTPNPC = new javax.swing.JTabbedPane();
        jPCadastrar = new javax.swing.JPanel();
        LabelNomeNpc = new javax.swing.JLabel();
        LabelTipoNpc = new javax.swing.JLabel();
        JTFNomeNpc = new javax.swing.JTextField();
        LabelCadastroNpc = new javax.swing.JLabel();
        LabelDescricaoNpc = new javax.swing.JLabel();
        LabelFala = new javax.swing.JLabel();
        LabelRespostaPositiva = new javax.swing.JLabel();
        LabelRespostaNegativa = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTADescricaoNpc = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTAFalaNpc = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTARespostaNegativa = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTARespostaPositiva = new javax.swing.JTextArea();
        jBCadastrar = new javax.swing.JButton();
        jCBTipoNpc = new javax.swing.JComboBox();
        jLAtributosNpc = new javax.swing.JLabel();
        jTFForca = new javax.swing.JTextField();
        jLForca = new javax.swing.JLabel();
        jLDestreza = new javax.swing.JLabel();
        jLConstituicao = new javax.swing.JLabel();
        jLInteligencia = new javax.swing.JLabel();
        jLSabedoria = new javax.swing.JLabel();
        jLFortitude = new javax.swing.JLabel();
        jLClassedeArmadura = new javax.swing.JLabel();
        jLBasedeAtaque = new javax.swing.JLabel();
        jLPontosdeVida = new javax.swing.JLabel();
        jLIniciativa = new javax.swing.JLabel();
        jLVontade = new javax.swing.JLabel();
        jLReflexos = new javax.swing.JLabel();
        jLCarisma = new javax.swing.JLabel();
        jTFDestreza = new javax.swing.JTextField();
        jTFConstituicao = new javax.swing.JTextField();
        jTFInteligencia = new javax.swing.JTextField();
        jTFSabedoria = new javax.swing.JTextField();
        jTFFortitude = new javax.swing.JTextField();
        jTFClassedeArmadura = new javax.swing.JTextField();
        jTFBasedeAtaque = new javax.swing.JTextField();
        jTFPontosdeVida = new javax.swing.JTextField();
        jTFIniciativa = new javax.swing.JTextField();
        jTFVontade = new javax.swing.JTextField();
        jTFReflexos = new javax.swing.JTextField();
        jTFCarisma = new javax.swing.JTextField();
        jLClasse = new javax.swing.JLabel();
        jLRaca = new javax.swing.JLabel();
        jCBRaca = new javax.swing.JComboBox();
        jCBClasse = new javax.swing.JComboBox();
        jLItens = new javax.swing.JLabel();
        jLArmaduraNpc = new javax.swing.JLabel();
        jLArmaNpc = new javax.swing.JLabel();
        jLConsumivelNpc = new javax.swing.JLabel();
        jLEscudoNpc = new javax.swing.JLabel();
        jCBArmaduraNpc = new javax.swing.JComboBox();
        jCBArmaNpc = new javax.swing.JComboBox();
        jCBConsumivelNpc = new javax.swing.JComboBox();
        jCBEscudoNpc = new javax.swing.JComboBox();
        jTFQuantidadeArmaduraNpc = new javax.swing.JTextField();
        jTFQuantidadeArmaNpc = new javax.swing.JTextField();
        jTFQuantidadeConsumivelNpc = new javax.swing.JTextField();
        jTFQuantidadeEscudoNpc = new javax.swing.JTextField();
        jTFCodigoNpc = new javax.swing.JTextField();
        jTFCodArmadura = new javax.swing.JTextField();
        jLQuantidadeItensNpc = new javax.swing.JLabel();
        jTFCodArma = new javax.swing.JTextField();
        jTFCodConsumivel = new javax.swing.JTextField();
        jTFCodEscudo = new javax.swing.JTextField();
        jTFCodRaca = new javax.swing.JTextField();
        jTFCodClasse = new javax.swing.JTextField();
        jTFIndexTipoNpc = new javax.swing.JTextField();
        jBAtualizarAtributos = new javax.swing.JButton();
        jBAtualizarItens = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        LabelNovaFalaNomeNpc = new javax.swing.JLabel();
        LabelAdicionarNovaFala = new javax.swing.JLabel();
        jTFNovaFalaCodigoNpc = new javax.swing.JTextField();
        jCBNovaFalaNomeNpc = new javax.swing.JComboBox();
        LabelNovaFalaTipoNpc = new javax.swing.JLabel();
        LabelNovaFalaNpc = new javax.swing.JLabel();
        LabelNovaFalaRespostaPositiva = new javax.swing.JLabel();
        LabelNovaFalaRespostaNegativa = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTANovaFalaNpc = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTANovaFalaRespostaPositiva = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTANovaFalaRespostaNegativa = new javax.swing.JTextArea();
        jBNovaFalaAdicionar = new javax.swing.JButton();
        jTFNovaFalaTipoNpc = new javax.swing.JTextField();
        jBNovaFalaAtualizar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        LabelAdicionarNovosItens = new javax.swing.JLabel();
        LabelNovosItensNomeNpc = new javax.swing.JLabel();
        jCBNovosItensNomeNpc = new javax.swing.JComboBox();
        jTFNovosItensCodigoNpc = new javax.swing.JTextField();
        LabelNovosItensTipoNpc = new javax.swing.JLabel();
        jTFNovosItensTipoNpc = new javax.swing.JTextField();
        jLNovosItens = new javax.swing.JLabel();
        jLNovosItensArmaduraNpc = new javax.swing.JLabel();
        jLNovosItensArmaNpc = new javax.swing.JLabel();
        jLNovosItensConsumivelNpc = new javax.swing.JLabel();
        jLNovosItensEscudoNpc = new javax.swing.JLabel();
        jCBNovosItensArmaduraNpc = new javax.swing.JComboBox();
        jCBNovosItensArmaNpc = new javax.swing.JComboBox();
        jCBNovosItensConsumivelNpc = new javax.swing.JComboBox();
        jCBNovosItensEscudoNpc = new javax.swing.JComboBox();
        jTFNovosItensQuantidadeArmaduraNpc = new javax.swing.JTextField();
        jTFNovosItensQuantidadeArmaNpc = new javax.swing.JTextField();
        jTFNovosItensQuantidadeConsumivelNpc = new javax.swing.JTextField();
        jTFNovosItensQuantidadeEscudoNpc = new javax.swing.JTextField();
        jTFNovosItensCodArmadura = new javax.swing.JTextField();
        jLNovosItensQuantidadeItensNpc = new javax.swing.JLabel();
        jTFNovosItensCodArma = new javax.swing.JTextField();
        jTFNovosItensCodConsumivel = new javax.swing.JTextField();
        jTFNovosItensCodEscudo = new javax.swing.JTextField();
        jBNovosItensAdicionar = new javax.swing.JButton();
        jBNovosItensAtualizar = new javax.swing.JButton();
        jCBNovosItensAdicionarArmadura = new javax.swing.JCheckBox();
        jCBNovosItensAdicionarArma = new javax.swing.JCheckBox();
        jCBNovosItensAdicionarConsumivel = new javax.swing.JCheckBox();
        jCBNovosItensAdicionarEscudo = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        LabelAlterarNomeNpc = new javax.swing.JLabel();
        LabelAlterarTipoNpc = new javax.swing.JLabel();
        JTFAlterarNomeNpc = new javax.swing.JTextField();
        LabelAlteracaoNpc = new javax.swing.JLabel();
        LabelAlterarDescricaoNpc = new javax.swing.JLabel();
        LabeAlterarlFala = new javax.swing.JLabel();
        LabelAlterarRespostaPositiva = new javax.swing.JLabel();
        LabelAlterarRespostaNegativa = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTAAlterarDescricaoNpc = new javax.swing.JTextArea();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTAAlterarFalaNpc = new javax.swing.JTextArea();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTAAlterarRespostaNegativa = new javax.swing.JTextArea();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTAAlterarRespostaPositiva = new javax.swing.JTextArea();
        jBAlterarCadastrar = new javax.swing.JButton();
        jBAlterarAdicionarFala = new javax.swing.JButton();
        jCBAlterarTipoNpc = new javax.swing.JComboBox();
        jLAlterarAtributosNpc = new javax.swing.JLabel();
        jTFAlterarForca = new javax.swing.JTextField();
        jLAlterarForca = new javax.swing.JLabel();
        jLAlterarDestreza = new javax.swing.JLabel();
        jLAlterarConstituicao = new javax.swing.JLabel();
        jLAlterarInteligencia = new javax.swing.JLabel();
        jLAlterarSabedoria = new javax.swing.JLabel();
        jLAlterarFortitude = new javax.swing.JLabel();
        jLAlterarClassedeArmadura = new javax.swing.JLabel();
        jLAlterarBasedeAtaque = new javax.swing.JLabel();
        jLAlterarPontosdeVida = new javax.swing.JLabel();
        jLAlterarIniciativa = new javax.swing.JLabel();
        jLAlterarVontade = new javax.swing.JLabel();
        jLAlterarReflexos = new javax.swing.JLabel();
        jLAlterarCarisma = new javax.swing.JLabel();
        jTFAlterarDestreza = new javax.swing.JTextField();
        jTFAlterarConstituicao = new javax.swing.JTextField();
        jTFAlterarInteligencia = new javax.swing.JTextField();
        jTFAlterarSabedoria = new javax.swing.JTextField();
        jTFAlterarFortitude = new javax.swing.JTextField();
        jTFAlterarClassedeArmadura = new javax.swing.JTextField();
        jTFAlterarBasedeAtaque = new javax.swing.JTextField();
        jTFAlterarPontosdeVida = new javax.swing.JTextField();
        jTFAlterarIniciativa = new javax.swing.JTextField();
        jTFAlterarVontade = new javax.swing.JTextField();
        jTFAlterarReflexos = new javax.swing.JTextField();
        jTFAlterarCarisma = new javax.swing.JTextField();
        jLAlterarClasse = new javax.swing.JLabel();
        jLAlterarRaca = new javax.swing.JLabel();
        jCBAlterarRaca = new javax.swing.JComboBox();
        jCBAlterarClasse = new javax.swing.JComboBox();
        jLAlterarItens = new javax.swing.JLabel();
        jLAlterarArmaduraNpc = new javax.swing.JLabel();
        jLAlterarArmaNpc = new javax.swing.JLabel();
        jLAlterarConsumivelNpc = new javax.swing.JLabel();
        jLAlterarEscudoNpc = new javax.swing.JLabel();
        jCBAlterarArmaduraNpc = new javax.swing.JComboBox();
        jCBAlterarArmaNpc = new javax.swing.JComboBox();
        jCBAlterarConsumivelNpc = new javax.swing.JComboBox();
        jCBAlterarEscudoNpc = new javax.swing.JComboBox();
        jTFAlterarQuantidadeArmaduraNpc = new javax.swing.JTextField();
        jTFAlterarQuantidadeArmaNpc = new javax.swing.JTextField();
        jTFAlterarQuantidadeConsumivelNpc = new javax.swing.JTextField();
        jTFAlterarQuantidadeEscudoNpc = new javax.swing.JTextField();
        jTFAlterarCodigoNpc = new javax.swing.JTextField();
        jTFAlterarCodArmadura = new javax.swing.JTextField();
        jLAlterarQuantidadeItensNpc = new javax.swing.JLabel();
        jTFAlterarCodArma = new javax.swing.JTextField();
        jTFAlterarCodConsumivel = new javax.swing.JTextField();
        jTFAlterarCodEscudo = new javax.swing.JTextField();
        jTFAlterarCodRaca = new javax.swing.JTextField();
        jTFAlterarCodClasse = new javax.swing.JTextField();
        jBAlterarAdicionarItenNpc = new javax.swing.JButton();
        jPExcluir = new javax.swing.JPanel();
        LabelExcluirNomeNpc = new javax.swing.JLabel();
        LabelExcluirNpc = new javax.swing.JLabel();
        jCBExcluirNomeNpc = new javax.swing.JComboBox();
        jBExcluirNpc = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Npc's");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTPNPC.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTPNPC.setToolTipText("");

        jPCadastrar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPCadastrar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelNomeNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNomeNpc.setText("Nome:");
        jPCadastrar.add(LabelNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 50, 45, -1));

        LabelTipoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelTipoNpc.setText("Tipo:");
        jPCadastrar.add(LabelTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 80, 45, -1));

        JTFNomeNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        JTFNomeNpc.setNextFocusableComponent(jCBTipoNpc);
        jPCadastrar.add(JTFNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 47, 155, -1));

        LabelCadastroNpc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelCadastroNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelCadastroNpc.setText("Cadastro de Npc's");
        LabelCadastroNpc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPCadastrar.add(LabelCadastroNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, 170, 28));

        LabelDescricaoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelDescricaoNpc.setText("Descrição Npc:");
        jPCadastrar.add(LabelDescricaoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 112, 375, -1));

        LabelFala.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelFala.setText("Fala:");
        LabelFala.setPreferredSize(new java.awt.Dimension(84, 14));
        jPCadastrar.add(LabelFala, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 233, 375, -1));

        LabelRespostaPositiva.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelRespostaPositiva.setText("Resposta Positiva:");
        jPCadastrar.add(LabelRespostaPositiva, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 355, 375, -1));

        LabelRespostaNegativa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelRespostaNegativa.setText("Resposta Negativa:");
        jPCadastrar.add(LabelRespostaNegativa, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 477, 375, -1));

        jScrollPane1.setName(""); // NOI18N

        jTADescricaoNpc.setColumns(20);
        jTADescricaoNpc.setLineWrap(true);
        jTADescricaoNpc.setRows(5);
        jTADescricaoNpc.setToolTipText("");
        jTADescricaoNpc.setWrapStyleWord(true);
        jTADescricaoNpc.setNextFocusableComponent(jTAFalaNpc);
        jTADescricaoNpc.setPreferredSize(null);
        jScrollPane1.setViewportView(jTADescricaoNpc);

        jPCadastrar.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 131, 375, -1));

        jTAFalaNpc.setColumns(20);
        jTAFalaNpc.setLineWrap(true);
        jTAFalaNpc.setRows(5);
        jTAFalaNpc.setToolTipText("");
        jTAFalaNpc.setWrapStyleWord(true);
        jTAFalaNpc.setNextFocusableComponent(jTARespostaPositiva);
        jTAFalaNpc.setPreferredSize(null);
        jScrollPane2.setViewportView(jTAFalaNpc);

        jPCadastrar.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 253, 375, -1));

        jTARespostaNegativa.setColumns(20);
        jTARespostaNegativa.setLineWrap(true);
        jTARespostaNegativa.setRows(5);
        jTARespostaNegativa.setWrapStyleWord(true);
        jTARespostaNegativa.setNextFocusableComponent(jBAtualizarAtributos);
        jTARespostaNegativa.setPreferredSize(null);
        jScrollPane3.setViewportView(jTARespostaNegativa);

        jPCadastrar.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 497, 375, -1));

        jTARespostaPositiva.setColumns(20);
        jTARespostaPositiva.setLineWrap(true);
        jTARespostaPositiva.setRows(5);
        jTARespostaPositiva.setWrapStyleWord(true);
        jTARespostaPositiva.setNextFocusableComponent(jTARespostaNegativa);
        jTARespostaPositiva.setPreferredSize(null);
        jScrollPane4.setViewportView(jTARespostaPositiva);

        jPCadastrar.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 375, 375, -1));

        jBCadastrar.setText("Cadastrar");
        jBCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCadastrarActionPerformed(evt);
            }
        });
        jPCadastrar.add(jBCadastrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 590, 120, 30));

        jCBTipoNpc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Combatente", "Comerciante", "Coletável", "Guia", "Missão" }));
        jCBTipoNpc.setSelectedIndex(-1);
        jCBTipoNpc.setNextFocusableComponent(jTADescricaoNpc);
        jCBTipoNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBTipoNpcItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 77, 155, -1));

        jLAtributosNpc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLAtributosNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAtributosNpc.setText("Atributos NPC");
        jPCadastrar.add(jLAtributosNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, 214, -1));

        jTFForca.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFForca.setName(""); // NOI18N
        jTFForca.setNextFocusableComponent(jTFDestreza);
        jPCadastrar.add(jTFForca, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 243, 90, -1));

        jLForca.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLForca.setText("Força:");
        jPCadastrar.add(jLForca, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 246, 120, -1));

        jLDestreza.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLDestreza.setText("Destreza:");
        jPCadastrar.add(jLDestreza, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 272, 120, -1));

        jLConstituicao.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLConstituicao.setText("Constituição:");
        jPCadastrar.add(jLConstituicao, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 298, 120, -1));

        jLInteligencia.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLInteligencia.setText("Inteligência:");
        jPCadastrar.add(jLInteligencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 324, 120, -1));

        jLSabedoria.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLSabedoria.setText("Sabedoria:");
        jPCadastrar.add(jLSabedoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 350, 120, -1));

        jLFortitude.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLFortitude.setText("Fortitude:");
        jPCadastrar.add(jLFortitude, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 376, 120, -1));

        jLClassedeArmadura.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLClassedeArmadura.setText("Classe de Armadura:");
        jPCadastrar.add(jLClassedeArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 402, 120, -1));

        jLBasedeAtaque.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLBasedeAtaque.setText("Base de Ataque:");
        jPCadastrar.add(jLBasedeAtaque, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 428, 120, -1));

        jLPontosdeVida.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLPontosdeVida.setText("Pontos de Vida:");
        jPCadastrar.add(jLPontosdeVida, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 454, 120, -1));

        jLIniciativa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLIniciativa.setText("Iniciativa:");
        jPCadastrar.add(jLIniciativa, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 480, 120, -1));

        jLVontade.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLVontade.setText("Vontade:");
        jPCadastrar.add(jLVontade, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 506, 120, -1));

        jLReflexos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLReflexos.setText("Reflexos:");
        jPCadastrar.add(jLReflexos, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 532, 120, -1));

        jLCarisma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLCarisma.setText("Carisma:");
        jPCadastrar.add(jLCarisma, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 558, 120, -1));

        jTFDestreza.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFDestreza.setName(""); // NOI18N
        jTFDestreza.setNextFocusableComponent(jTFConstituicao);
        jPCadastrar.add(jTFDestreza, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 269, 90, -1));

        jTFConstituicao.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFConstituicao.setNextFocusableComponent(jTFInteligencia);
        jPCadastrar.add(jTFConstituicao, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 295, 90, -1));

        jTFInteligencia.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFInteligencia.setNextFocusableComponent(jTFSabedoria);
        jPCadastrar.add(jTFInteligencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 321, 90, -1));

        jTFSabedoria.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFSabedoria.setNextFocusableComponent(jTFFortitude);
        jPCadastrar.add(jTFSabedoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 347, 90, -1));

        jTFFortitude.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFFortitude.setNextFocusableComponent(jTFClassedeArmadura);
        jPCadastrar.add(jTFFortitude, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 373, 90, -1));

        jTFClassedeArmadura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFClassedeArmadura.setNextFocusableComponent(jTFBasedeAtaque);
        jPCadastrar.add(jTFClassedeArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 399, 90, -1));

        jTFBasedeAtaque.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFBasedeAtaque.setNextFocusableComponent(jTFPontosdeVida);
        jPCadastrar.add(jTFBasedeAtaque, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 425, 90, -1));

        jTFPontosdeVida.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFPontosdeVida.setNextFocusableComponent(jTFIniciativa);
        jPCadastrar.add(jTFPontosdeVida, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 451, 90, -1));

        jTFIniciativa.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFIniciativa.setNextFocusableComponent(jTFVontade);
        jPCadastrar.add(jTFIniciativa, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 477, 90, -1));

        jTFVontade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFVontade.setNextFocusableComponent(jTFReflexos);
        jPCadastrar.add(jTFVontade, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 503, 90, -1));

        jTFReflexos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFReflexos.setNextFocusableComponent(jTFCarisma);
        jPCadastrar.add(jTFReflexos, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 529, 90, -1));

        jTFCarisma.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCarisma.setNextFocusableComponent(jBAtualizarItens);
        jPCadastrar.add(jTFCarisma, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 555, 90, -1));

        jLClasse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLClasse.setText("Classe:");
        jPCadastrar.add(jLClasse, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 190, 214, -1));

        jLRaca.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLRaca.setText("Raça:");
        jPCadastrar.add(jLRaca, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 140, 214, -1));

        jCBRaca.setNextFocusableComponent(jCBClasse);
        jCBRaca.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBRacaItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBRaca, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 160, 214, -1));

        jCBClasse.setNextFocusableComponent(jTFForca);
        jCBClasse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBClasseItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBClasse, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 210, 214, -1));

        jLItens.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLItens.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLItens.setText("Itens NPC");
        jPCadastrar.add(jLItens, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 110, 155, -1));

        jLArmaduraNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLArmaduraNpc.setText("Armadura:");
        jPCadastrar.add(jLArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 140, 155, -1));

        jLArmaNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLArmaNpc.setText("Arma:");
        jPCadastrar.add(jLArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 190, 155, -1));

        jLConsumivelNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLConsumivelNpc.setText("Consumivel:");
        jPCadastrar.add(jLConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 236, 155, -1));

        jLEscudoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLEscudoNpc.setText("Escudo:");
        jPCadastrar.add(jLEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 282, 155, -1));

        jCBArmaduraNpc.setNextFocusableComponent(jTFQuantidadeArmaduraNpc);
        jCBArmaduraNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBArmaduraNpcItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 160, 155, -1));

        jCBArmaNpc.setNextFocusableComponent(jTFQuantidadeArmaNpc);
        jCBArmaNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBArmaNpcItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 210, 155, -1));

        jCBConsumivelNpc.setNextFocusableComponent(jTFQuantidadeConsumivelNpc);
        jCBConsumivelNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBConsumivelNpcItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 256, 155, -1));

        jCBEscudoNpc.setNextFocusableComponent(jTFQuantidadeEscudoNpc);
        jCBEscudoNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBEscudoNpcItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 302, 155, -1));

        jTFQuantidadeArmaduraNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFQuantidadeArmaduraNpc.setNextFocusableComponent(jCBArmaNpc);
        jPCadastrar.add(jTFQuantidadeArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 160, 45, -1));

        jTFQuantidadeArmaNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFQuantidadeArmaNpc.setNextFocusableComponent(jCBConsumivelNpc);
        jPCadastrar.add(jTFQuantidadeArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 210, 45, -1));

        jTFQuantidadeConsumivelNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFQuantidadeConsumivelNpc.setNextFocusableComponent(jCBEscudoNpc);
        jPCadastrar.add(jTFQuantidadeConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 256, 45, -1));

        jTFQuantidadeEscudoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFQuantidadeEscudoNpc.setNextFocusableComponent(jBCadastrar);
        jPCadastrar.add(jTFQuantidadeEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 302, 45, -1));

        jTFCodigoNpc.setEditable(false);
        jTFCodigoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodigoNpc.setFocusable(false);
        jPCadastrar.add(jTFCodigoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 47, 40, -1));

        jTFCodArmadura.setEditable(false);
        jTFCodArmadura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodArmadura.setFocusable(false);
        jPCadastrar.add(jTFCodArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(661, 160, 30, -1));

        jLQuantidadeItensNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLQuantidadeItensNpc.setText("Qtd:");
        jPCadastrar.add(jLQuantidadeItensNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 140, 45, -1));

        jTFCodArma.setEditable(false);
        jTFCodArma.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodArma.setFocusable(false);
        jPCadastrar.add(jTFCodArma, new org.netbeans.lib.awtextra.AbsoluteConstraints(662, 210, 30, -1));

        jTFCodConsumivel.setEditable(false);
        jTFCodConsumivel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodConsumivel.setFocusable(false);
        jPCadastrar.add(jTFCodConsumivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(662, 256, 30, -1));

        jTFCodEscudo.setEditable(false);
        jTFCodEscudo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodEscudo.setFocusable(false);
        jPCadastrar.add(jTFCodEscudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(661, 302, 31, -1));

        jTFCodRaca.setEditable(false);
        jTFCodRaca.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodRaca.setFocusable(false);
        jPCadastrar.add(jTFCodRaca, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 160, 30, -1));

        jTFCodClasse.setEditable(false);
        jTFCodClasse.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodClasse.setFocusable(false);
        jPCadastrar.add(jTFCodClasse, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 210, 30, -1));

        jTFIndexTipoNpc.setEditable(false);
        jTFIndexTipoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFIndexTipoNpc.setFocusable(false);
        jPCadastrar.add(jTFIndexTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 77, 40, -1));

        jBAtualizarAtributos.setText("Atualizar Atributos");
        jBAtualizarAtributos.setNextFocusableComponent(jCBRaca);
        jBAtualizarAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAtualizarAtributosActionPerformed(evt);
            }
        });
        jPCadastrar.add(jBAtualizarAtributos, new org.netbeans.lib.awtextra.AbsoluteConstraints(447, 70, 125, 30));

        jBAtualizarItens.setText("Atualizar Itens");
        jBAtualizarItens.setNextFocusableComponent(jCBArmaduraNpc);
        jBAtualizarItens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAtualizarItensActionPerformed(evt);
            }
        });
        jPCadastrar.add(jBAtualizarItens, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 70, 125, 30));

        jTPNPC.addTab("Cadastrar", jPCadastrar);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelNovaFalaNomeNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovaFalaNomeNpc.setText("Nome:");
        jPanel3.add(LabelNovaFalaNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 50, 45, -1));

        LabelAdicionarNovaFala.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelAdicionarNovaFala.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelAdicionarNovaFala.setText("Adicionar Nova Fala");
        LabelAdicionarNovaFala.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel3.add(LabelAdicionarNovaFala, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, 190, 28));

        jTFNovaFalaCodigoNpc.setEditable(false);
        jTFNovaFalaCodigoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovaFalaCodigoNpc.setFocusable(false);
        jPanel3.add(jTFNovaFalaCodigoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 47, 40, -1));

        jCBNovaFalaNomeNpc.setNextFocusableComponent(jTFNovaFalaTipoNpc);
        jCBNovaFalaNomeNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovaFalaNomeNpcItemStateChanged(evt);
            }
        });
        jPanel3.add(jCBNovaFalaNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 47, 155, -1));

        LabelNovaFalaTipoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovaFalaTipoNpc.setText("Tipo:");
        jPanel3.add(LabelNovaFalaTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 80, 45, -1));

        LabelNovaFalaNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovaFalaNpc.setText("Fala:");
        jPanel3.add(LabelNovaFalaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 112, 375, -1));

        LabelNovaFalaRespostaPositiva.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovaFalaRespostaPositiva.setText("Resposta Positiva:");
        LabelNovaFalaRespostaPositiva.setPreferredSize(new java.awt.Dimension(84, 14));
        jPanel3.add(LabelNovaFalaRespostaPositiva, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 233, 375, -1));

        LabelNovaFalaRespostaNegativa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovaFalaRespostaNegativa.setText("Resposta Negativa");
        jPanel3.add(LabelNovaFalaRespostaNegativa, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 355, 375, -1));

        jTANovaFalaNpc.setColumns(20);
        jTANovaFalaNpc.setLineWrap(true);
        jTANovaFalaNpc.setRows(5);
        jTANovaFalaNpc.setWrapStyleWord(true);
        jTANovaFalaNpc.setNextFocusableComponent(jTANovaFalaRespostaPositiva);
        jTANovaFalaNpc.setPreferredSize(null);
        jScrollPane5.setViewportView(jTANovaFalaNpc);

        jPanel3.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 131, 375, -1));

        jTANovaFalaRespostaPositiva.setColumns(20);
        jTANovaFalaRespostaPositiva.setLineWrap(true);
        jTANovaFalaRespostaPositiva.setRows(5);
        jTANovaFalaRespostaPositiva.setWrapStyleWord(true);
        jTANovaFalaRespostaPositiva.setNextFocusableComponent(jTANovaFalaRespostaNegativa);
        jTANovaFalaRespostaPositiva.setPreferredSize(null);
        jScrollPane6.setViewportView(jTANovaFalaRespostaPositiva);

        jPanel3.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 253, 375, -1));

        jTANovaFalaRespostaNegativa.setColumns(20);
        jTANovaFalaRespostaNegativa.setLineWrap(true);
        jTANovaFalaRespostaNegativa.setRows(5);
        jTANovaFalaRespostaNegativa.setWrapStyleWord(true);
        jTANovaFalaRespostaNegativa.setNextFocusableComponent(jBNovaFalaAdicionar);
        jTANovaFalaRespostaNegativa.setPreferredSize(null);
        jScrollPane8.setViewportView(jTANovaFalaRespostaNegativa);

        jPanel3.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 375, 375, -1));

        jBNovaFalaAdicionar.setText("Adicionar Fala");
        jBNovaFalaAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNovaFalaAdicionarActionPerformed(evt);
            }
        });
        jPanel3.add(jBNovaFalaAdicionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 480, 120, 30));

        jTFNovaFalaTipoNpc.setEditable(false);
        jTFNovaFalaTipoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovaFalaTipoNpc.setFocusable(false);
        jPanel3.add(jTFNovaFalaTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 77, 155, -1));

        jBNovaFalaAtualizar.setText("Atualizar");
        jBNovaFalaAtualizar.setNextFocusableComponent(jCBNovaFalaNomeNpc);
        jBNovaFalaAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNovaFalaAtualizarActionPerformed(evt);
            }
        });
        jPanel3.add(jBNovaFalaAtualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 42, 120, 30));

        jTPNPC.addTab("Adicionar Nova Fala", jPanel3);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelAdicionarNovosItens.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelAdicionarNovosItens.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelAdicionarNovosItens.setText("Adicionar Novos Itens");
        LabelAdicionarNovosItens.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel2.add(LabelAdicionarNovosItens, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, 210, 28));

        LabelNovosItensNomeNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovosItensNomeNpc.setText("Nome:");
        jPanel2.add(LabelNovosItensNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 50, 45, -1));

        jCBNovosItensNomeNpc.setNextFocusableComponent(jCBNovosItensArmaduraNpc);
        jCBNovosItensNomeNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensNomeNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 47, 155, -1));

        jTFNovosItensCodigoNpc.setEditable(false);
        jTFNovosItensCodigoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensCodigoNpc.setFocusable(false);
        jPanel2.add(jTFNovosItensCodigoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 47, 40, -1));

        LabelNovosItensTipoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovosItensTipoNpc.setText("Tipo:");
        jPanel2.add(LabelNovosItensTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 80, 45, -1));

        jTFNovosItensTipoNpc.setEditable(false);
        jTFNovosItensTipoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensTipoNpc.setFocusable(false);
        jPanel2.add(jTFNovosItensTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 77, 155, -1));

        jLNovosItens.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLNovosItens.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItens.setText("Itens NPC");
        jPanel2.add(jLNovosItens, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 120, 155, -1));

        jLNovosItensArmaduraNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensArmaduraNpc.setText("Armadura:");
        jPanel2.add(jLNovosItensArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 150, 155, -1));

        jLNovosItensArmaNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensArmaNpc.setText("Arma:");
        jPanel2.add(jLNovosItensArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 200, 155, -1));

        jLNovosItensConsumivelNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensConsumivelNpc.setText("Consumivel:");
        jPanel2.add(jLNovosItensConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 250, 155, -1));

        jLNovosItensEscudoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensEscudoNpc.setText("Escudo:");
        jPanel2.add(jLNovosItensEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 300, 155, -1));

        jCBNovosItensArmaduraNpc.setNextFocusableComponent(jTFNovosItensQuantidadeArmaduraNpc);
        jCBNovosItensArmaduraNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensArmaduraNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 170, 155, -1));

        jCBNovosItensArmaNpc.setNextFocusableComponent(jTFNovosItensQuantidadeArmaNpc);
        jCBNovosItensArmaNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensArmaNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 220, 155, -1));

        jCBNovosItensConsumivelNpc.setNextFocusableComponent(jTFNovosItensQuantidadeConsumivelNpc);
        jCBNovosItensConsumivelNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensConsumivelNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 270, 155, -1));

        jCBNovosItensEscudoNpc.setNextFocusableComponent(jTFNovosItensQuantidadeEscudoNpc);
        jCBNovosItensEscudoNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensEscudoNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 320, 155, -1));

        jTFNovosItensQuantidadeArmaduraNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensQuantidadeArmaduraNpc.setNextFocusableComponent(jCBNovosItensArmaNpc);
        jPanel2.add(jTFNovosItensQuantidadeArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 170, 45, -1));

        jTFNovosItensQuantidadeArmaNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensQuantidadeArmaNpc.setNextFocusableComponent(jCBNovosItensConsumivelNpc);
        jPanel2.add(jTFNovosItensQuantidadeArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 220, 45, -1));

        jTFNovosItensQuantidadeConsumivelNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensQuantidadeConsumivelNpc.setNextFocusableComponent(jCBNovosItensEscudoNpc);
        jPanel2.add(jTFNovosItensQuantidadeConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 270, 45, -1));

        jTFNovosItensQuantidadeEscudoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensQuantidadeEscudoNpc.setNextFocusableComponent(jBNovosItensAdicionar);
        jPanel2.add(jTFNovosItensQuantidadeEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 320, 45, -1));

        jTFNovosItensCodArmadura.setEditable(false);
        jTFNovosItensCodArmadura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensCodArmadura.setFocusable(false);
        jPanel2.add(jTFNovosItensCodArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 30, -1));

        jLNovosItensQuantidadeItensNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensQuantidadeItensNpc.setText("Qtd:");
        jPanel2.add(jLNovosItensQuantidadeItensNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 150, 45, -1));

        jTFNovosItensCodArma.setEditable(false);
        jTFNovosItensCodArma.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensCodArma.setFocusable(false);
        jPanel2.add(jTFNovosItensCodArma, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 30, -1));

        jTFNovosItensCodConsumivel.setEditable(false);
        jTFNovosItensCodConsumivel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensCodConsumivel.setFocusable(false);
        jPanel2.add(jTFNovosItensCodConsumivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 30, -1));

        jTFNovosItensCodEscudo.setEditable(false);
        jTFNovosItensCodEscudo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensCodEscudo.setFocusable(false);
        jPanel2.add(jTFNovosItensCodEscudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 31, -1));

        jBNovosItensAdicionar.setText("Adicionar Itens");
        jBNovosItensAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNovosItensAdicionarActionPerformed(evt);
            }
        });
        jPanel2.add(jBNovosItensAdicionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 360, 155, 30));

        jBNovosItensAtualizar.setText("Atualizar");
        jBNovosItensAtualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBNovosItensAtualizar.setNextFocusableComponent(jCBNovosItensNomeNpc);
        jBNovosItensAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNovosItensAtualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jBNovosItensAtualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, 120, 30));

        jCBNovosItensAdicionarArmadura.setText("Armaduras");
        jCBNovosItensAdicionarArmadura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBNovosItensAdicionarArmaduraActionPerformed(evt);
            }
        });
        jPanel2.add(jCBNovosItensAdicionarArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 170, -1, -1));

        jCBNovosItensAdicionarArma.setText("Armas");
        jCBNovosItensAdicionarArma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBNovosItensAdicionarArmaActionPerformed(evt);
            }
        });
        jPanel2.add(jCBNovosItensAdicionarArma, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 220, -1, -1));

        jCBNovosItensAdicionarConsumivel.setText("Consumiveis");
        jCBNovosItensAdicionarConsumivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBNovosItensAdicionarConsumivelActionPerformed(evt);
            }
        });
        jPanel2.add(jCBNovosItensAdicionarConsumivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 270, -1, -1));

        jCBNovosItensAdicionarEscudo.setText("Escudos");
        jCBNovosItensAdicionarEscudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBNovosItensAdicionarEscudoActionPerformed(evt);
            }
        });
        jPanel2.add(jCBNovosItensAdicionarEscudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 320, -1, -1));

        jTPNPC.addTab("Adicionar Novos Itens", jPanel2);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelAlterarNomeNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelAlterarNomeNpc.setText("Nome:");
        jPanel1.add(LabelAlterarNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 50, 45, -1));

        LabelAlterarTipoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelAlterarTipoNpc.setText("Tipo:");
        jPanel1.add(LabelAlterarTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 80, 45, -1));

        JTFAlterarNomeNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(JTFAlterarNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 47, 155, -1));

        LabelAlteracaoNpc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelAlteracaoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelAlteracaoNpc.setText("Alteração de Npc's");
        LabelAlteracaoNpc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(LabelAlteracaoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, 170, 28));

        LabelAlterarDescricaoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelAlterarDescricaoNpc.setText("Descrição Npc:");
        jPanel1.add(LabelAlterarDescricaoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 111, 375, -1));

        LabeAlterarlFala.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabeAlterarlFala.setText("Fala:");
        LabeAlterarlFala.setPreferredSize(new java.awt.Dimension(84, 14));
        jPanel1.add(LabeAlterarlFala, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 233, 375, -1));

        LabelAlterarRespostaPositiva.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelAlterarRespostaPositiva.setText("Resposta Positiva:");
        jPanel1.add(LabelAlterarRespostaPositiva, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 355, 375, -1));

        LabelAlterarRespostaNegativa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelAlterarRespostaNegativa.setText("Resposta Negativa:");
        jPanel1.add(LabelAlterarRespostaNegativa, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 477, 375, -1));

        jTAAlterarDescricaoNpc.setColumns(20);
        jTAAlterarDescricaoNpc.setLineWrap(true);
        jTAAlterarDescricaoNpc.setRows(5);
        jTAAlterarDescricaoNpc.setPreferredSize(null);
        jScrollPane9.setViewportView(jTAAlterarDescricaoNpc);

        jPanel1.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 131, 375, -1));

        jTAAlterarFalaNpc.setColumns(20);
        jTAAlterarFalaNpc.setLineWrap(true);
        jTAAlterarFalaNpc.setRows(5);
        jTAAlterarFalaNpc.setPreferredSize(null);
        jScrollPane10.setViewportView(jTAAlterarFalaNpc);

        jPanel1.add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 253, 375, -1));

        jTAAlterarRespostaNegativa.setColumns(20);
        jTAAlterarRespostaNegativa.setLineWrap(true);
        jTAAlterarRespostaNegativa.setRows(5);
        jTAAlterarRespostaNegativa.setPreferredSize(null);
        jScrollPane11.setViewportView(jTAAlterarRespostaNegativa);

        jPanel1.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 497, 375, -1));

        jTAAlterarRespostaPositiva.setColumns(20);
        jTAAlterarRespostaPositiva.setLineWrap(true);
        jTAAlterarRespostaPositiva.setRows(5);
        jTAAlterarRespostaPositiva.setPreferredSize(null);
        jScrollPane12.setViewportView(jTAAlterarRespostaPositiva);

        jPanel1.add(jScrollPane12, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 375, 375, -1));

        jBAlterarCadastrar.setText("Cadastrar");
        jPanel1.add(jBAlterarCadastrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(138, 604, 120, 30));

        jBAlterarAdicionarFala.setText("Adicionar Fala");
        jPanel1.add(jBAlterarAdicionarFala, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 604, 120, 30));

        jCBAlterarTipoNpc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Combatente", "Comerciante", "Guia", "Missão", "Coletável" }));
        jCBAlterarTipoNpc.setSelectedIndex(-1);
        jPanel1.add(jCBAlterarTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 77, 155, -1));

        jLAlterarAtributosNpc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLAlterarAtributosNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarAtributosNpc.setText("Atributos NPC");
        jPanel1.add(jLAlterarAtributosNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 73, 214, -1));

        jTFAlterarForca.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFAlterarForca.setName(""); // NOI18N
        jPanel1.add(jTFAlterarForca, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 193, 90, -1));

        jLAlterarForca.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarForca.setText("Força:");
        jPanel1.add(jLAlterarForca, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 196, 120, -1));

        jLAlterarDestreza.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarDestreza.setText("Destreza:");
        jPanel1.add(jLAlterarDestreza, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 222, 120, -1));

        jLAlterarConstituicao.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarConstituicao.setText("Constituição:");
        jPanel1.add(jLAlterarConstituicao, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 248, 120, -1));

        jLAlterarInteligencia.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarInteligencia.setText("Inteligência:");
        jPanel1.add(jLAlterarInteligencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 274, 120, -1));

        jLAlterarSabedoria.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarSabedoria.setText("Sabedoria:");
        jPanel1.add(jLAlterarSabedoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 300, 120, -1));

        jLAlterarFortitude.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarFortitude.setText("Fortitude:");
        jPanel1.add(jLAlterarFortitude, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 326, 120, -1));

        jLAlterarClassedeArmadura.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarClassedeArmadura.setText("Classe de Armadura:");
        jPanel1.add(jLAlterarClassedeArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 352, 120, -1));

        jLAlterarBasedeAtaque.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarBasedeAtaque.setText("Base de Ataque:");
        jPanel1.add(jLAlterarBasedeAtaque, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 378, 120, -1));

        jLAlterarPontosdeVida.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarPontosdeVida.setText("Pontos de Vida:");
        jPanel1.add(jLAlterarPontosdeVida, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 404, 120, -1));

        jLAlterarIniciativa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarIniciativa.setText("Iniciativa:");
        jPanel1.add(jLAlterarIniciativa, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 430, 120, -1));

        jLAlterarVontade.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarVontade.setText("Vontade:");
        jPanel1.add(jLAlterarVontade, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 456, 120, -1));

        jLAlterarReflexos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarReflexos.setText("Reflexos:");
        jPanel1.add(jLAlterarReflexos, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 482, 120, -1));

        jLAlterarCarisma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarCarisma.setText("Carisma:");
        jPanel1.add(jLAlterarCarisma, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 508, 120, -1));

        jTFAlterarDestreza.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFAlterarDestreza.setName(""); // NOI18N
        jPanel1.add(jTFAlterarDestreza, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 219, 90, -1));

        jTFAlterarConstituicao.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarConstituicao, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 245, 90, -1));

        jTFAlterarInteligencia.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarInteligencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 271, 90, -1));

        jTFAlterarSabedoria.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarSabedoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 297, 90, -1));

        jTFAlterarFortitude.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarFortitude, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 323, 90, -1));

        jTFAlterarClassedeArmadura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarClassedeArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 349, 90, -1));

        jTFAlterarBasedeAtaque.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarBasedeAtaque, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 375, 90, -1));

        jTFAlterarPontosdeVida.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarPontosdeVida, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 401, 90, -1));

        jTFAlterarIniciativa.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarIniciativa, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 427, 90, -1));

        jTFAlterarVontade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarVontade, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 453, 90, -1));

        jTFAlterarReflexos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarReflexos, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 479, 90, -1));

        jTFAlterarCarisma.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarCarisma, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 505, 90, -1));

        jLAlterarClasse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarClasse.setText("Classe:");
        jPanel1.add(jLAlterarClasse, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 147, 214, -1));

        jLAlterarRaca.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarRaca.setText("Raça:");
        jPanel1.add(jLAlterarRaca, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 101, 214, -1));

        jPanel1.add(jCBAlterarRaca, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 121, 214, -1));

        jPanel1.add(jCBAlterarClasse, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 167, 214, -1));

        jLAlterarItens.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLAlterarItens.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarItens.setText("Itens NPC");
        jPanel1.add(jLAlterarItens, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 73, 155, -1));

        jLAlterarArmaduraNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarArmaduraNpc.setText("Armadura:");
        jPanel1.add(jLAlterarArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 101, 155, -1));

        jLAlterarArmaNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarArmaNpc.setText("Arma:");
        jPanel1.add(jLAlterarArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 147, 155, -1));

        jLAlterarConsumivelNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarConsumivelNpc.setText("Consumivel:");
        jPanel1.add(jLAlterarConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 193, 155, -1));

        jLAlterarEscudoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarEscudoNpc.setText("Escudo:");
        jPanel1.add(jLAlterarEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 239, 155, -1));

        jPanel1.add(jCBAlterarArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 121, 155, -1));

        jPanel1.add(jCBAlterarArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 167, 155, -1));

        jPanel1.add(jCBAlterarConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 213, 155, -1));

        jPanel1.add(jCBAlterarEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 259, 155, -1));

        jTFAlterarQuantidadeArmaduraNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarQuantidadeArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 121, 45, -1));

        jTFAlterarQuantidadeArmaNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarQuantidadeArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 167, 45, -1));

        jTFAlterarQuantidadeConsumivelNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarQuantidadeConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 213, 45, -1));

        jTFAlterarQuantidadeEscudoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarQuantidadeEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 259, 45, -1));

        jTFAlterarCodigoNpc.setEditable(false);
        jTFAlterarCodigoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarCodigoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 47, 30, -1));

        jTFAlterarCodArmadura.setEditable(false);
        jTFAlterarCodArmadura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarCodArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(661, 121, 30, -1));

        jLAlterarQuantidadeItensNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAlterarQuantidadeItensNpc.setText("Qtd:");
        jPanel1.add(jLAlterarQuantidadeItensNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 101, 45, -1));

        jTFAlterarCodArma.setEditable(false);
        jTFAlterarCodArma.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarCodArma, new org.netbeans.lib.awtextra.AbsoluteConstraints(662, 167, 30, -1));

        jTFAlterarCodConsumivel.setEditable(false);
        jTFAlterarCodConsumivel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarCodConsumivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(662, 213, 30, -1));

        jTFAlterarCodEscudo.setEditable(false);
        jTFAlterarCodEscudo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarCodEscudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(661, 259, 31, -1));

        jTFAlterarCodRaca.setEditable(false);
        jTFAlterarCodRaca.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarCodRaca, new org.netbeans.lib.awtextra.AbsoluteConstraints(621, 121, 30, -1));

        jTFAlterarCodClasse.setEditable(false);
        jTFAlterarCodClasse.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(jTFAlterarCodClasse, new org.netbeans.lib.awtextra.AbsoluteConstraints(621, 167, 30, -1));

        jBAlterarAdicionarItenNpc.setText("Adicionar Itens");
        jPanel1.add(jBAlterarAdicionarItenNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 297, 155, -1));

        jTPNPC.addTab("Alterar", jPanel1);

        jPExcluir.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPExcluir.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelExcluirNomeNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelExcluirNomeNpc.setText("Nome:");
        jPExcluir.add(LabelExcluirNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 50, 155, -1));

        LabelExcluirNpc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelExcluirNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelExcluirNpc.setText("Excluir Npc's");
        LabelExcluirNpc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPExcluir.add(LabelExcluirNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, 120, 28));

        jPExcluir.add(jCBExcluirNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 70, 155, -1));

        jBExcluirNpc.setText("EXCLUIR");
        jPExcluir.add(jBExcluirNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 108, 155, -1));

        jTPNPC.addTab("Excluir", jPExcluir);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTPNPC, javax.swing.GroupLayout.DEFAULT_SIZE, 935, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTPNPC, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // ----- Aba Cadastrar ----- //
    
    // Oculta Atributos formulário Npcs em aba Cadastrar
    public void OcultarComponentesAtributos(java.awt.event.ActionEvent evt) {
        
        // Atributos
        jBAtualizarAtributos.setVisible(false);
        
        jLAtributosNpc.setVisible(false);
        
        jLRaca.setVisible(false);
        jCBRaca.setVisible(false);
        jTFCodRaca.setVisible(false);
        
        jLClasse.setVisible(false);
        jCBClasse.setVisible(false);
        jTFCodClasse.setVisible(false);

        jLForca.setVisible(false);
        jTFForca.setVisible(false);

        jLDestreza.setVisible(false);
        jTFDestreza.setVisible(false);

        jLConstituicao.setVisible(false);
        jTFConstituicao.setVisible(false);

        jLInteligencia.setVisible(false);
        jTFInteligencia.setVisible(false);

        jLSabedoria.setVisible(false);
        jTFSabedoria.setVisible(false);

        jLFortitude.setVisible(false);
        jTFFortitude.setVisible(false);

        jLClassedeArmadura.setVisible(false);
        jTFClassedeArmadura.setVisible(false);

        jLBasedeAtaque.setVisible(false);
        jTFBasedeAtaque.setVisible(false);

        jLPontosdeVida.setVisible(false);
        jTFPontosdeVida.setVisible(false);

        jLIniciativa.setVisible(false);
        jTFIniciativa.setVisible(false);

        jLVontade.setVisible(false);
        jTFVontade.setVisible(false);

        jLReflexos.setVisible(false);
        jTFReflexos.setVisible(false);

        jLCarisma.setVisible(false);
        jTFCarisma.setVisible(false);
        
    }
    
    // Oculta Itens formulário Npcs em aba Cadastrar
    public void OcultarComponentesItens(java.awt.event.ActionEvent evt){
    
        // Itens
        jBAtualizarItens.setVisible(false);
        jLItens.setVisible(false);
        jLArmaNpc.setVisible(false);
        jLArmaduraNpc.setVisible(false);
        jLConsumivelNpc.setVisible(false);
        jLEscudoNpc.setVisible(false);
        jLQuantidadeItensNpc.setVisible(false);
        
        // Armaduras
        jTFCodArmadura.setVisible(false);
        jCBArmaduraNpc.setVisible(false);
        jTFQuantidadeArmaduraNpc.setVisible(false);
    
        // Armas
        jTFCodArma.setVisible(false);
        jCBArmaNpc.setVisible(false);
        jTFQuantidadeArmaNpc.setVisible(false);
    
        // Consumiveis
        jTFCodConsumivel.setVisible(false);
        jCBConsumivelNpc.setVisible(false);
        jTFQuantidadeConsumivelNpc.setVisible(false);
    
        // Escudos
        jTFCodEscudo.setVisible(false);
        jCBEscudoNpc.setVisible(false);
        jTFQuantidadeEscudoNpc.setVisible(false);
        
    } 
    
    // Mostra Atributos formulário Npcs em aba Cadastrar
    public void MostrarComponentesAtributos(java.awt.event.ActionEvent evt) {

        // Atributos
        jBAtualizarAtributos.setVisible(true);
        jLAtributosNpc.setVisible(true);

        jLRaca.setVisible(true);
        jCBRaca.setVisible(true);
        jTFCodRaca.setVisible(true);

        jLClasse.setVisible(true);
        jCBClasse.setVisible(true);
        jTFCodClasse.setVisible(true);

        jLForca.setVisible(true);
        jTFForca.setVisible(true);

        jLDestreza.setVisible(true);
        jTFDestreza.setVisible(true);

        jLConstituicao.setVisible(true);
        jTFConstituicao.setVisible(true);

        jLInteligencia.setVisible(true);
        jTFInteligencia.setVisible(true);

        jLSabedoria.setVisible(true);
        jTFSabedoria.setVisible(true);

        jLFortitude.setVisible(true);
        jTFFortitude.setVisible(true);

        jLClassedeArmadura.setVisible(true);
        jTFClassedeArmadura.setVisible(true);

        jLBasedeAtaque.setVisible(true);
        jTFBasedeAtaque.setVisible(true);

        jLPontosdeVida.setVisible(true);
        jTFPontosdeVida.setVisible(true);

        jLIniciativa.setVisible(true);
        jTFIniciativa.setVisible(true);

        jLVontade.setVisible(true);
        jTFVontade.setVisible(true);

        jLReflexos.setVisible(true);
        jTFReflexos.setVisible(true);

        jLCarisma.setVisible(true);
        jTFCarisma.setVisible(true);
        
    }
    
    // Mostra Itens formulário Npcs em aba Cadastrar
    public void MostrarComponentesItens(java.awt.event.ActionEvent evt){
    
        // Itens
        jBAtualizarItens.setVisible(true);
        jLItens.setVisible(true);
        jLArmaNpc.setVisible(true);
        jLArmaduraNpc.setVisible(true);
        jLConsumivelNpc.setVisible(true);
        jLEscudoNpc.setVisible(true);
        jLQuantidadeItensNpc.setVisible(true);        
        
        // Armaduras
        jTFCodArmadura.setVisible(true);
        jCBArmaduraNpc.setVisible(true);
        jTFQuantidadeArmaduraNpc.setVisible(true);
    
        // Armas
        jTFCodArma.setVisible(true);
        jCBArmaNpc.setVisible(true);
        jTFQuantidadeArmaNpc.setVisible(true);
    
        // Consumiveis
        jTFCodConsumivel.setVisible(true);
        jCBConsumivelNpc.setVisible(true);
        jTFQuantidadeConsumivelNpc.setVisible(true);
    
        // Escudos
        jTFCodEscudo.setVisible(true);
        jCBEscudoNpc.setVisible(true);
        jTFQuantidadeEscudoNpc.setVisible(true);
        
    } 
    
    // Carrega ComboBox dos Itens em aba Cadastrar
    public void AddItensComboItensNpcsAbaCadastrar(java.awt.event.ActionEvent evt) throws SQLException{
        
        GenericDAO gDao = new GenericDAO();

        // Carrega combobox Armaduras    
        List<Object> listarArmaduras = null;
            try {
                listarArmaduras = gDao.listar(Armaduras.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarArmaduras) {
                Armaduras armaduranpc = (Armaduras) obj2;
                jCBArmaduraNpc.addItem(armaduranpc.getNome_armadura());
            }
        // Fim listar Armaduras 
        
        // Carrega combobox Armas    
        List<Object> listarArmas = null;
            try {
                listarArmas = gDao.listar(Armas.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarArmas) {
                Armas armanpc = (Armas) obj2;
                jCBArmaNpc.addItem(armanpc.getNome_arma());
            }   
        // Fim listar Armas         
        
        // Carrega combobox Consumiveis
        List<Object> listarConsumiveis = null;
            try {
                listarConsumiveis = gDao.listar(Consumiveis.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarConsumiveis) {
                Consumiveis consumivelnpc = (Consumiveis) obj2;
                jCBConsumivelNpc.addItem(consumivelnpc.getNome_consumivel());
            }    
        // Fim listar Consumiveis        

        // Carrega combobox Escudos
        List<Object> listarEscudos = null;
            try {
                listarEscudos = gDao.listar(Escudos.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarEscudos) {
                Escudos escudonpc = (Escudos) obj2;
                jCBEscudoNpc.addItem(escudonpc.getNome_escudo());
            }
        // Fim listar Escudos
    } 
    
    // Carrega ComboBox dos Atributos em aba Cadastrar
    public void AddItensComboAtributosNpcsAbaCadastrar(java.awt.event.ActionEvent evt) throws SQLException{
        
        GenericDAO gDao = new GenericDAO();
        
        // Carrega combobox Raças    
        List<Object> listarRacas = null;
            try {
                listarRacas = gDao.listar(Raca.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarRacas) {
                Raca racanpc = (Raca) obj2;
                jCBRaca.addItem(racanpc.getNome_raca());
            }
        // Fim listar Raças
                
        // Carrega combobox Classes    
        List<Object> listarClasses = null;
            try {
                listarClasses = gDao.listar(Classes.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarClasses) {
                Classes classenpc = (Classes) obj2;
                jCBClasse.addItem(classenpc.getNome_classe());
            }
        // Fim listar Classes  
    }
    
    // Limpa todos os campos em aba Cadastrar
    public void LimparCamposAbaCadastrar(java.awt.event.ActionEvent evt){
    
    // Npcs    
    JTFNomeNpc.setText("");
    jTFCodigoNpc.setText("");
    jCBTipoNpc.setSelectedIndex(-1);
    jTFIndexTipoNpc.setText("");
    jTADescricaoNpc.setText("");
    
    // Falas
    jTAFalaNpc.setText("");
    jTARespostaPositiva.setText("");
    jTARespostaNegativa.setText("");    
    
    // Armaduras 
    jTFCodArmadura.setText("");
    jTFQuantidadeArmaduraNpc.setText("");
    
    // Armas
    jTFCodArma.setText("");
    jTFQuantidadeArmaNpc.setText("");
    
    // Consumiveis
    jTFCodConsumivel.setText(""); 
    jTFQuantidadeConsumivelNpc.setText("");    
    
    // Escudos
    jTFCodEscudo.setText("");
    jTFQuantidadeEscudoNpc.setText("");     

    // Atributos       
    jTFCodRaca.setText("");
    jTFCodClasse.setText("");

    jTFForca.setText("");
    jTFDestreza.setText("");
    jTFConstituicao.setText("");
    jTFInteligencia.setText("");
    jTFSabedoria.setText("");
    jTFFortitude.setText("");
    jTFClassedeArmadura.setText("");      
    jTFBasedeAtaque.setText("");        
    jTFPontosdeVida.setText("");        
    jTFIniciativa.setText("");        
    jTFVontade.setText("");        
    jTFReflexos.setText("");       
    jTFCarisma.setText("");        
    
    }
    
    // Limpa campos de código em aba Cadastrar
    public void LimparCamposCodigoAbaCadastrar(java.awt.event.ActionEvent evt){
    
    // Itens
    // Armaduras 
    jTFCodArmadura.setText("");
    
    // Armas
    jTFCodArma.setText("");
    
    // Consumiveis
    jTFCodConsumivel.setText(""); 
    
    // Escudos
    jTFCodEscudo.setText("");
    
    // Atributos    
    jTFCodRaca.setText("");
    jTFCodClasse.setText("");
        
    }
         
    // Remove itens de ComboBox Atributos e Itens em aba Cadastrar
    public void RemoveItensComboAbaCadastrar(java.awt.event.ActionEvent evt){
        
        // Atributos
        jCBRaca.removeAllItems();
        jCBClasse.removeAllItems();
        
        // Itens
        jCBArmaduraNpc.removeAllItems();
        jCBArmaNpc.removeAllItems();
        jCBConsumivelNpc.removeAllItems();
        jCBEscudoNpc.removeAllItems();
        
    }
    
    // ----- Aba Adicionar Novos Itens ----- //
    
    // Carrega ComboBox em aba Adicionar Novos Itens 
    public void AddItensComboAbaAdicionarNovosItens(java.awt.event.ActionEvent evt) throws SQLException{
    
        GenericDAO gDao = new GenericDAO();

        // Carrega combobox Armaduras    
        List<Object> listarArmaduras = null;
            try {
                listarArmaduras = gDao.listar(Armaduras.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarArmaduras) {
                Armaduras armaduranpc = (Armaduras) obj2;
                jCBNovosItensArmaduraNpc.addItem(armaduranpc.getNome_armadura());
            }
        // Fim listar Armaduras 
        
        // Carrega combobox Armas    
        List<Object> listarArmas = null;
            try {
                listarArmas = gDao.listar(Armas.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarArmas) {
                Armas armanpc = (Armas) obj2;
                jCBNovosItensArmaNpc.addItem(armanpc.getNome_arma());
            }   
        // Fim listar Armas         
        
        // Carrega combobox Consumiveis
        List<Object> listarConsumiveis = null;
            try {
                listarConsumiveis = gDao.listar(Consumiveis.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarConsumiveis) {
                Consumiveis consumivelnpc = (Consumiveis) obj2;
                jCBNovosItensConsumivelNpc.addItem(consumivelnpc.getNome_consumivel());
            }    
        // Fim listar Consumiveis        

        // Carrega combobox Escudos
        List<Object> listarEscudos = null;
            try {
                listarEscudos = gDao.listar(Escudos.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarEscudos) {
                Escudos escudonpc = (Escudos) obj2;
                jCBNovosItensEscudoNpc.addItem(escudonpc.getNome_escudo());
            }
        // Fim listar Escudos   
    }
        
    // Limpa os campos jTF e seleciona index -1 em ComboBox na aba Adicinar Novos Itens
    public void LimparCamposAbaAdicionarNovosItens(java.awt.event.ActionEvent evt){
        
        jCBNovosItensNomeNpc.setSelectedIndex(-1);
        jTFNovosItensCodigoNpc.setText("");
        jTFNovosItensTipoNpc.setText("");
        
        jCBNovosItensArmaduraNpc.setSelectedIndex(-1);
        jTFNovosItensCodArmadura.setText("");
        jTFNovosItensQuantidadeArmaduraNpc.setText("");

        jCBNovosItensArmaNpc.setSelectedIndex(-1);
        jTFNovosItensCodArma.setText("");
        jTFNovosItensQuantidadeArmaNpc.setText("");
        
        jCBNovosItensConsumivelNpc.setSelectedIndex(-1);
        jTFNovosItensCodConsumivel.setText("");
        jTFNovosItensQuantidadeConsumivelNpc.setText("");
         
        jCBNovosItensEscudoNpc.setSelectedIndex(-1);
        jTFNovosItensCodEscudo.setText("");
        jTFNovosItensQuantidadeEscudoNpc.setText("");
                
    }
        
    // Remove itens do ComboBox na aba Adicionar Novos Itens
    public void RemoverItensComboAbaAdicionarNovosItens(java.awt.event.ActionEvent evt){
          
        // Itens    
        jCBNovosItensArmaduraNpc.removeAllItems();
        jCBNovosItensArmaNpc.removeAllItems();
        jCBNovosItensConsumivelNpc.removeAllItems();
        jCBNovosItensEscudoNpc.removeAllItems();

    }
    
    // ----- Aba Adicionar Nova Fala ----- //
    
    // Limpa os campos jTF e seleciona index -1 em ComboBox na aba Adicinar Nova Fala
    public void LimparCamposAbaAdicionarNovaFala(java.awt.event.ActionEvent evt){
        
        jCBNovaFalaNomeNpc.setSelectedIndex(-1);
        jTFNovaFalaCodigoNpc.setText("");
        
        jTFNovaFalaTipoNpc.setText("");
        
        jTANovaFalaNpc.setText("");
        jTANovaFalaRespostaNegativa.setText("");
        jTANovaFalaRespostaPositiva.setText("");

    }

    // Remove nomes dos Npcs do ComboBox na aba Adicionar Nova Fala
    public void RemoverItensComboAbaAdicionarNovaFala(java.awt.event.ActionEvent evt){
        
        // Npcs
        jCBNovaFalaNomeNpc.removeAllItems();
        
    }
    
    // ----- ----- ----- ----- ----- //

    // Cadastra Npcs Combatentes 
    public void CadastrarNpcCombatente (java.awt.event.ActionEvent evt) throws ClassNotFoundException, 
        IllegalArgumentException, IllegalAccessException, NoSuchMethodException, 
            InvocationTargetException, InstantiationException{
        
        try {    
        
            Npcs npc = new Npcs();     
            Falas fala = new Falas();
            NpcsFalas npcfala = new NpcsFalas();
            
            Personagens npcpersonagem = new Personagens();
            NpcsCombatentes npccombate = new NpcsCombatentes();

            ArmadurasNpcs armaduranpc = new ArmadurasNpcs();
            ArmasNpcs armanpc = new ArmasNpcs();
            ConsumiveisNpcs consumivelnpc = new ConsumiveisNpcs();
            EscudosNpcs escudonpc = new EscudosNpcs();
            
            GenericDAO gDao = new GenericDAO();
            
            // Cadastra base NPCS    
            npc.setNome_npc(JTFNomeNpc.getText());
            npc.setTipo_npc(String.valueOf(jCBTipoNpc.getSelectedItem()));
            npc.setDescricao_npc(jTADescricaoNpc.getText());
            gDao.adicionar(npc);

            // Informa o ultimo codigo_npc
            int codMaxNPC = gDao.codigoMax(Npcs.class);
            System.out.println(codMaxNPC);

            // Cadastra fala NPC 
            fala.setDescricao_fala(jTAFalaNpc.getText());
            fala.setResposta_positivo_fala(jTARespostaPositiva.getText());
            fala.setResposta_negativo_fala(jTARespostaNegativa.getText());
            gDao.adicionar(fala);

            // Informa o ultimo codigo_fala
            int codMaxFala = gDao.codigoMax(Falas.class);
            System.out.println(codMaxFala);

            // Cadastra N/N NpcsFalas
            npcfala.setCodigo_fala(codMaxFala);
            npcfala.setCodigo_npc(codMaxNPC);
            gDao.adicionar(npcfala);
            
            // Cadastra Npc em tabela Personagem
            // Todos NpcsCombatentes se tornam Personagens
            npcpersonagem.setNome_personagem(JTFNomeNpc.getText());            
            npcpersonagem.setCodigo_raca(Integer.parseInt(jTFCodRaca.getText()));            
            npcpersonagem.setCodigo_classe(Integer.parseInt(jTFCodClasse.getText()));            
            npcpersonagem.setForca_personagem(Integer.parseInt(jTFForca.getText()));            
            npcpersonagem.setDestreza_personagem(Integer.parseInt(jTFDestreza.getText()));            
            npcpersonagem.setContituicao_personagem(Integer.parseInt(jTFConstituicao.getText()));            
            npcpersonagem.setInteligencia_personagem(Integer.parseInt(jTFInteligencia.getText()));            
            npcpersonagem.setSabedoria_personagem(Integer.parseInt(jTFSabedoria.getText()));           
            npcpersonagem.setFortitude_personagem(Integer.parseInt(jTFFortitude.getText()));            
            npcpersonagem.setClasse_armadura_personagem(Integer.parseInt(jTFClassedeArmadura.getText()));            
            npcpersonagem.setBase_ataque_personagem(Integer.parseInt(jTFBasedeAtaque.getText()));            
            npcpersonagem.setPontos_vida_personagem(Integer.parseInt(jTFPontosdeVida.getText()));            
            npcpersonagem.setIniciativa_personagem(Integer.parseInt(jTFIniciativa.getText()));            
            npcpersonagem.setVontade_personagem(Integer.parseInt(jTFVontade.getText()));            
            npcpersonagem.setReflexos_personagem(Integer.parseInt(jTFReflexos.getText()));            
            npcpersonagem.setCarisma_personagem(Integer.parseInt(jTFCarisma.getText()));            
            gDao.adicionar(npcpersonagem);
            
            // Informa o ultimo codigo_personagem
            int codMaxPersonagem = gDao.codigoMax(Personagens.class);
            System.out.println(codMaxPersonagem);

            // Cadastra NpcsCombatentes
            npccombate.setCodigo_npc(codMaxNPC);
            npccombate.setCodigo_personagem(codMaxPersonagem);
            gDao.adicionar(npccombate);
                
            // Cadastra ArmadurasNpcs   
            armaduranpc.setCodigo_npc(codMaxNPC);
            armaduranpc.setCodigo_armadura(Integer.parseInt(jTFCodArmadura.getText()));
            armaduranpc.setQuantidade_armadura(Integer.parseInt(jTFQuantidadeArmaduraNpc.getText()));
            gDao.adicionar(armaduranpc);

            // Cadastra ArmaNpcs
            armanpc.setCodigo_npc(codMaxNPC);                
            armanpc.setCodigo_arma(Integer.parseInt(jTFCodArma.getText()));
            armanpc.setQuantidade_arma(Integer.parseInt(jTFQuantidadeArmaNpc.getText()));
            gDao.adicionar(armanpc);    

            // Cadastra ConsumiveisNpcs
            consumivelnpc.setCodigo_npc(codMaxNPC);    
            consumivelnpc.setCodigo_consumivel(Integer.parseInt(jTFCodConsumivel.getText()));
            consumivelnpc.setQuantidade_consumivel(Integer.parseInt(jTFQuantidadeConsumivelNpc.getText()));
            gDao.adicionar(consumivelnpc);  

            // Cadastra EscudosNpcs
            escudonpc.setCodigo_npc(codMaxNPC); 
            escudonpc.setCodigo_escudo(Integer.parseInt(jTFCodEscudo.getText()));
            escudonpc.setQuantidade_escudos(Integer.parseInt(jTFQuantidadeEscudoNpc.getText()));
            gDao.adicionar(escudonpc);
            
            JOptionPane.showMessageDialog(null, "Npc Combatente cadastrado!");    

            } catch (SQLException ex) {
                Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Cadastra Npcs Comerciantes e Coletáveis
    public void CadastrarNpcComercianteColetavel(java.awt.event.ActionEvent evt) throws ClassNotFoundException, 
            IllegalArgumentException, IllegalAccessException, NoSuchMethodException, 
                InvocationTargetException, InstantiationException{
    
        try {
            
            Npcs npc = new Npcs();
            Falas fala = new Falas(); 
            NpcsFalas npcfala = new NpcsFalas();           
            
            ArmadurasNpcs armaduranpc = new ArmadurasNpcs();
            ArmasNpcs armanpc = new ArmasNpcs();
            ConsumiveisNpcs consumivelnpc = new ConsumiveisNpcs();
            EscudosNpcs escudonpc = new EscudosNpcs();
            
            GenericDAO gDao = new GenericDAO();
            
            // Cadastra base NPCS    
            npc.setNome_npc(JTFNomeNpc.getText());
            npc.setTipo_npc(String.valueOf(jCBTipoNpc.getSelectedItem()));
            npc.setDescricao_npc(jTADescricaoNpc.getText());
            gDao.adicionar(npc);

            // Informa o ultimo codigo_npc
            int codMaxNPC = gDao.codigoMax(Npcs.class);
            System.out.println(codMaxNPC);

            // Cadastra fala NPC 
            fala.setDescricao_fala(jTAFalaNpc.getText());
            fala.setResposta_positivo_fala(jTARespostaPositiva.getText());
            fala.setResposta_negativo_fala(jTARespostaNegativa.getText());
            gDao.adicionar(fala);

            // Informa o ultimo codigo_fala
            int codMaxFala = gDao.codigoMax(Falas.class);
            System.out.println(codMaxFala);

            // Cadastra N/N NpcsFalas
            npcfala.setCodigo_fala(codMaxFala);
            npcfala.setCodigo_npc(codMaxNPC);
            gDao.adicionar(npcfala);
                
            // Cadastra ArmadurasNpcs   
            armaduranpc.setCodigo_npc(codMaxNPC);
            armaduranpc.setCodigo_armadura(Integer.parseInt(jTFCodArmadura.getText()));
            armaduranpc.setQuantidade_armadura(Integer.parseInt(jTFQuantidadeArmaduraNpc.getText()));
            gDao.adicionar(armaduranpc);

            // Cadastra ArmaNpcs
            armanpc.setCodigo_npc(codMaxNPC);                
            armanpc.setCodigo_arma(Integer.parseInt(jTFCodArma.getText()));
            armanpc.setQuantidade_arma(Integer.parseInt(jTFQuantidadeArmaNpc.getText()));
            gDao.adicionar(armanpc);    
                
            // Cadastra ConsumiveisNpcs
            consumivelnpc.setCodigo_npc(codMaxNPC);    
            consumivelnpc.setCodigo_consumivel(Integer.parseInt(jTFCodConsumivel.getText()));
            consumivelnpc.setQuantidade_consumivel(Integer.parseInt(jTFQuantidadeConsumivelNpc.getText()));
            gDao.adicionar(consumivelnpc);  

            // Cadastra EscudosNpcs
            escudonpc.setCodigo_npc(codMaxNPC); 
            escudonpc.setCodigo_escudo(Integer.parseInt(jTFCodEscudo.getText()));
            escudonpc.setQuantidade_escudos(Integer.parseInt(jTFQuantidadeEscudoNpc.getText()));
            gDao.adicionar(escudonpc);
      
            if (jTFIndexTipoNpc.getText().equals("1")){
                JOptionPane.showMessageDialog(null, "Npc Comerciante cadastrado!");
            }
            else {
                JOptionPane.showMessageDialog(null, "Npc Coletável cadastrado!");
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Cadastra Npcs Guias ou Missão
    public void CadastrarNpcGuiaMissao(java.awt.event.ActionEvent evt) throws ClassNotFoundException, 
            IllegalArgumentException, IllegalAccessException, NoSuchMethodException, 
                InvocationTargetException, InstantiationException {
        
        try {
            
            Npcs npc = new Npcs();
            Falas fala = new Falas();
            NpcsFalas npcfala = new NpcsFalas();
            NpcsCombatentes npccombate = new NpcsCombatentes();        

            GenericDAO gDao = new GenericDAO();
            
            // Cadastra base NPCS    
            npc.setNome_npc(JTFNomeNpc.getText());
            npc.setTipo_npc(String.valueOf(jCBTipoNpc.getSelectedItem()));
            npc.setDescricao_npc(jTADescricaoNpc.getText());
            gDao.adicionar(npc);

            // Informa o ultimo codigo_npc
            int codMaxNPC = gDao.codigoMax(Npcs.class);
            System.out.println(codMaxNPC);

            // Cadastra fala NPC 
            fala.setDescricao_fala(jTAFalaNpc.getText());
            fala.setResposta_positivo_fala(jTARespostaPositiva.getText());
            fala.setResposta_negativo_fala(jTARespostaNegativa.getText());
            gDao.adicionar(fala);

            // Informa o ultimo codigo_fala
            int codMaxFala = gDao.codigoMax(Falas.class);
            System.out.println(codMaxFala);

            // Cadastra N/N NpcsFalas
            npcfala.setCodigo_fala(codMaxFala);
            npcfala.setCodigo_npc(codMaxNPC);
            gDao.adicionar(npcfala);
            
            if (jTFIndexTipoNpc.getText().equals("3")){
                JOptionPane.showMessageDialog(null, "Npc Guia cadastrado!");
            }
            else {
                JOptionPane.showMessageDialog(null, "Npc Missão cadastrado!");
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    // Cadastra uma Nova Fala para um Npc
    public void CadastrarNovaFala(java.awt.event.ActionEvent evt){

        try {

            Falas fala = new Falas();
            NpcsFalas npcfala = new NpcsFalas();

            GenericDAO gDao = new GenericDAO();

            // Cadastra a fala
            fala.setDescricao_fala(jTANovaFalaNpc.getText());
            fala.setResposta_positivo_fala(jTANovaFalaRespostaPositiva.getText());
            fala.setResposta_negativo_fala(jTANovaFalaRespostaNegativa.getText());
            gDao.adicionar(fala);

            // Retorna o código da fala cadastrada acima
            int codMaxFala = gDao.codigoMax(Falas.class);
            System.out.println(codMaxFala);

            // Cadastra NpcsFalas
            npcfala.setCodigo_fala(codMaxFala);
            npcfala.setCodigo_npc(Integer.parseInt(jTFNovaFalaCodigoNpc.getText()));
            gDao.adicionar(npcfala);

            // Limpa os campos
            LimparCamposAbaAdicionarNovaFala(evt); // Chama evt LimparCamposAbaAdicionarNovaFala

            JOptionPane.showMessageDialog(null, "Fala adicionada!");

        } catch (SQLException | ClassNotFoundException | IllegalArgumentException | IllegalAccessException | NoSuchMethodException | InvocationTargetException | InstantiationException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }  
    } 
    
    // Botão Cadastrar em aba Cadastrar
    private void jBCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCadastrarActionPerformed

        try {

            Npcs npc = new Npcs();
            Falas fala = new Falas();
            NpcsFalas npcfala = new NpcsFalas();
            NpcsCombatentes npccombate = new NpcsCombatentes();

            ArmadurasNpcs armaduranpc = new ArmadurasNpcs();
            ArmasNpcs armanpc = new ArmasNpcs();
            ConsumiveisNpcs consumivelnpc = new ConsumiveisNpcs();
            EscudosNpcs escudonpc = new EscudosNpcs();

            GenericDAO gDao = new GenericDAO();
            
            // Verifica se Npc é do tipo Combatente 
            if (jTFIndexTipoNpc.getText().equals("0")) {            
                
                MostrarComponentesAtributos(evt); // Chama evt MostrarComponentesAtributos
                MostrarComponentesItens(evt);   // Chama evt MostrarComponentesItens
                
                // Verifica se campos estão em branco
                if (JTFNomeNpc.getText().equals("") | jTADescricaoNpc.getText().equals("") | jTFIndexTipoNpc.getText().equals("") 
                 | jTAFalaNpc.getText().equals("") | jTARespostaPositiva.getText().equals("") 
                  | jTARespostaNegativa.getText().equals("")
                   |jTFCodRaca.getText().equals("") | jTFCodClasse.getText().equals("") | jTFForca.getText().equals("")
                    | jTFDestreza.getText().equals("") | jTFConstituicao.getText().equals("") |  jTFInteligencia.getText().equals("") 
                     | jTFSabedoria.getText().equals("") | jTFFortitude.getText().equals("") | jTFClassedeArmadura.getText().equals("")
                      | jTFBasedeAtaque.getText().equals("") | jTFPontosdeVida.getText().equals("") | jTFIniciativa.getText().equals("")
                       | jTFVontade.getText().equals("") | jTFReflexos.getText().equals("") | jTFCarisma.getText().equals("") 
                        | jTFCodArmadura.getText().equals("") | jTFCodArma.getText().equals("") | jTFCodConsumivel.getText().equals("")
                         | jTFCodEscudo.getText().equals("") | jTFQuantidadeArmaduraNpc.getText().equals("") | jTFQuantidadeArmaNpc.getText().equals("")
                          | jTFQuantidadeConsumivelNpc.getText().equals("") | jTFQuantidadeEscudoNpc.getText().equals("")) {
                
                JOptionPane.showMessageDialog(null, "Preencha todos os campos!");
            
            } // Fim if - Verifica se campos estão em branco
            
            else { // Se todos os campos estiverem preenchidos, o cadastro é efetuado
                    
                    CadastrarNpcCombatente(evt);    // Chama evt CadastrarNpcCombatente
                    
                    LimparCamposAbaCadastrar(evt);  // Chama evt LimparCamposAbaCadastrar
                    RemoveItensComboAbaCadastrar(evt);  // Chama evt RemoveItensComboAbaCadastrar
                    
                    OcultarComponentesAtributos(evt);   // Chama evt OcultarComponentesAtributos
                    OcultarComponentesItens(evt);   // Chama evt OcultarComponentesItens
            }   // Fim else - Cadastro Npc Combatente     
  
            } // Fim if - Verifica se Npc é do tipo Combatente
            
            else { 
                // Verifica se Npc é do tipo Comerciante ou Coletável
                if (jTFIndexTipoNpc.getText().equals("1") | jTFIndexTipoNpc.getText().equals("2")) {
                    
                    MostrarComponentesItens(evt);   // Chama evt MostrarComponentesItens
                    
                    // Verifica se campos estão em branco
                    if (JTFNomeNpc.getText().equals("") | jTADescricaoNpc.getText().equals("") | jTFIndexTipoNpc.getText().equals("") 
                     | jTAFalaNpc.getText().equals("") | jTARespostaPositiva.getText().equals("") 
                      | jTARespostaNegativa.getText().equals("")
                       | jTFCodArmadura.getText().equals("") | jTFCodArma.getText().equals("") | jTFCodConsumivel.getText().equals("")
                        | jTFCodEscudo.getText().equals("") | jTFQuantidadeArmaduraNpc.getText().equals("") | jTFQuantidadeArmaNpc.getText().equals("")
                         | jTFQuantidadeConsumivelNpc.getText().equals("") | jTFQuantidadeEscudoNpc.getText().equals("")) {
                    
                    JOptionPane.showMessageDialog(null, "Preencha todos os campos!");
                    
                    }   // Fim if - Verifica se campos estão em branco
                    else { // Se todos os campos estiverem preenchidos, o cadastro é efetuado 
                            
                            CadastrarNpcComercianteColetavel(evt);  // Chama evt CadastrarNpcComercianteColetavel
                            
                            LimparCamposAbaCadastrar(evt);  // Chama evt LimparCamposAbaCadastrar
                            RemoveItensComboAbaCadastrar(evt);  // Chama evt RemoveItensComboAbaCadastrar  
                            
                            OcultarComponentesItens(evt);    // Chama evt OcultarComponentesItens
                    } // Fim else - Cadastro Npc Comerciante ou Coletável
                }   // Fim if - Verifica se Npc é do tipo Comerciante ou Coletável
            }   // Fim else - Tipo Npc
            
            // Verifica se tipo Npc é Guia ou Missão
            if (jTFIndexTipoNpc.getText().equals("3") | jTFIndexTipoNpc.getText().equals("4")){
                
                OcultarComponentesAtributos(evt);
                OcultarComponentesItens(evt);
                
                // Verifica se campos estão em branco
                if (JTFNomeNpc.getText().equals("") | jTADescricaoNpc.getText().equals("") | jTFIndexTipoNpc.getText().equals("") 
                | jTAFalaNpc.getText().equals("") | jTARespostaPositiva.getText().equals("") | jTARespostaNegativa.getText().equals("")) {
                 
                JOptionPane.showMessageDialog(null, "Preencha todos os campos!");    
            
                } // Fim if - Verifica se campos estão em branco
                else { // Se todos os campos estiverem preenchidos, o cadastro é efetuado
                        
                    CadastrarNpcGuiaMissao(evt); // Chama evt CadastrarNpcGuiaMissao
                        
                    LimparCamposAbaCadastrar(evt);  // Chama evt LimparCampos
                    RemoveItensComboAbaCadastrar(evt);  // Chama evt RemoveItensComboAbaCadastrar   
                    
                }   // Fim else - Cadastro Npc Guia ou Missão      
            }   // Fim if - Verifica se tipo Npc é Guia ou Missão
            
        } catch (SQLException | ClassNotFoundException | IllegalArgumentException | IllegalAccessException | NoSuchMethodException | InvocationTargetException | InstantiationException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBCadastrarActionPerformed
    
    // Quando o formulário for aberto/chamado
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        try {

            GenericDAO gDao = new GenericDAO();

            int codMaxNPC = gDao.codigoMax(Npcs.class);

            // Calculo para saber o codigo_npc atual
            int codnpc = (1);
            codnpc = (codMaxNPC + codnpc);

            // Mostra o codigo_npc que vai ser cadastrado em componente jTFCodigoNpc
            jTFCodigoNpc.setText(String.valueOf(codnpc));

            // ----- ----- ----- ----- //
            // Oculta campos atributos e itens ao iniciar formulário
            if (jTFIndexTipoNpc.getText().equals("")) {
                OcultarComponentesAtributos(null);
                OcultarComponentesItens(null);
            }

        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_formWindowOpened
      
    // Quando o item do ComboBox jCBTipoNpc é alterado em aba Cadastrar
    private void jCBTipoNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBTipoNpcItemStateChanged

        try {

            GenericDAO gDao = new GenericDAO();

            // Passa o index do combobox tipo Npc para um edit
            jTFIndexTipoNpc.setText(String.valueOf(jCBTipoNpc.getSelectedIndex()));

            // Mostra atributos e itens
            if (jTFIndexTipoNpc.getText().equals("0")) {
                
                MostrarComponentesAtributos(null);
                MostrarComponentesItens(null);

            } else  { // Senão oculta os atributos e itens
                OcultarComponentesAtributos(null);
                OcultarComponentesItens(null);
            }
            
            if (jTFIndexTipoNpc.getText().equals("1") | jTFIndexTipoNpc.getText().equals("2"))  {

                MostrarComponentesItens(null); // Chama evt MostrarComponentesItens
                
                // Seleciona index -1
                // Itens
                jCBArmaduraNpc.setSelectedIndex(-1);
                jCBArmaNpc.setSelectedIndex(-1);
                jCBConsumivelNpc.setSelectedIndex(-1);
                jCBEscudoNpc.setSelectedIndex(-1);

            }
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBTipoNpcItemStateChanged
    
    // Busca atraves do nome_armadura o codigo_armadura e mostra em edit em aba Cadastrar
    private void jCBArmaduraNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBArmaduraNpcItemStateChanged
   
        try {    
        
        GenericDAO gDao = new GenericDAO();
        Armaduras armadura = new Armaduras();
        
        List<Object> ListarCodArmaduras = new ArrayList<>();

        armadura.setNome_armadura((String) jCBArmaduraNpc.getSelectedItem());

        ListarCodArmaduras = gDao.listar2(Armaduras.class, armadura);

        for (Object cod : ListarCodArmaduras) {
            Armaduras codarmadura = (Armaduras) cod;
            jTFCodArmadura.setText(String.valueOf(codarmadura.getCodigo_armadura()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBArmaduraNpcItemStateChanged
    
    // Busca atraves do nome_arma o codigo_arma e mostra em edit em aba Cadastrar
    private void jCBArmaNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBArmaNpcItemStateChanged

        try {    
        
        GenericDAO gDao = new GenericDAO();
        Armas arma = new Armas();
        
        List<Object> ListarCodArmas = new ArrayList<>();

        arma.setNome_arma((String) jCBArmaNpc.getSelectedItem());

        ListarCodArmas = gDao.listar2(Armas.class, arma);

        for (Object cod : ListarCodArmas) {
            Armas codarma = (Armas) cod;
            jTFCodArma.setText(String.valueOf(codarma.getCodigo_arma()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBArmaNpcItemStateChanged
    
    // Busca atraves do nome_consumivel o codigo_consumivel e mostra em edit em aba Cadastrar
    private void jCBConsumivelNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBConsumivelNpcItemStateChanged
    
        try {    
        
        GenericDAO gDao = new GenericDAO();
        Consumiveis consumivel = new Consumiveis();
        
        List<Object> ListarCodConsumiveis = new ArrayList<>();

        consumivel.setNome_consumivel((String) jCBConsumivelNpc.getSelectedItem());

        ListarCodConsumiveis = gDao.listar2(Consumiveis.class, consumivel);

        for (Object cod : ListarCodConsumiveis) {
            Consumiveis codconsumivel = (Consumiveis) cod;
            jTFCodConsumivel.setText(String.valueOf(codconsumivel.getCodigo_consumivel()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBConsumivelNpcItemStateChanged
    
    // Busca atraves do nome_escudo o codigo_escudo e mostra em edit em aba Cadastrar
    private void jCBEscudoNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBEscudoNpcItemStateChanged

        try {    
        
        GenericDAO gDao = new GenericDAO();
        Escudos escudo = new Escudos();
        
        List<Object> ListarCodEscudo = new ArrayList<>();

        escudo.setNome_escudo((String) jCBEscudoNpc.getSelectedItem());

        ListarCodEscudo = gDao.listar2(Escudos.class, escudo);

        for (Object cod : ListarCodEscudo) {
            Escudos codescudo = (Escudos) cod;
            jTFCodEscudo.setText(String.valueOf(codescudo.getCodigo_escudo()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBEscudoNpcItemStateChanged

    // Busca atraves de nome_raca o codigo_raca e mostra em edit em aba Cadastrar
    private void jCBRacaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBRacaItemStateChanged
 
        try {    
        
        GenericDAO gDao = new GenericDAO();
        Raca raca = new Raca();
        
        List<Object> ListarCodRaca = new ArrayList<>();

        raca.setNome_raca((String) jCBRaca.getSelectedItem());

        ListarCodRaca = gDao.listar2(Raca.class, raca);

        for (Object cod : ListarCodRaca) {
            Raca codraca = (Raca) cod;
            jTFCodRaca.setText(String.valueOf(codraca.getCodigo_raca()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBRacaItemStateChanged

    // Busca atraves de nome_classe o codigo_classe e mostra em edit em aba Cadastrar
    private void jCBClasseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBClasseItemStateChanged
        
        try {    
        
        GenericDAO gDao = new GenericDAO();
        Classes classe = new Classes();
        
        List<Object> ListarCodClasse = new ArrayList<>();

        classe.setNome_classe((String) jCBClasse.getSelectedItem());

        ListarCodClasse = gDao.listar2(Classes.class, classe);

        for (Object cod : ListarCodClasse) {
            Classes codclasse = (Classes) cod;
            jTFCodClasse.setText(String.valueOf(codclasse.getCodigo_classe()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBClasseItemStateChanged
 
    // ----- Aba Adicionar Nova Fala ----- //
    
    // Busca atraves de nome_npc o codigo_npc e tipo_npc, mostrando em edits em aba Adicionar Nova Fala
    private void jCBNovaFalaNomeNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovaFalaNomeNpcItemStateChanged
        
        try {    
        
        GenericDAO gDao = new GenericDAO();
        Npcs npc = new Npcs();
        
        List<Object> ListarDadosNpcs = new ArrayList<>();

        npc.setNome_npc((String) jCBNovaFalaNomeNpc.getSelectedItem());

        ListarDadosNpcs = gDao.listar2(Npcs.class, npc);

        for (Object cod : ListarDadosNpcs) {
            Npcs codnpc = (Npcs) cod;
            jTFNovaFalaCodigoNpc.setText(String.valueOf(codnpc.getCodigo_npc()));
            jTFNovaFalaTipoNpc.setText(String.valueOf(codnpc.getTipo_npc()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBNovaFalaNomeNpcItemStateChanged

    // Botão Adicionar Nova Fala para um NPC
    private void jBNovaFalaAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNovaFalaAdicionarActionPerformed

        if (jTFNovaFalaCodigoNpc.getText().equals("") | jTFNovaFalaTipoNpc.getText().equals("")
             | jTANovaFalaNpc.getText().equals("") | jTANovaFalaRespostaNegativa.getText().equals("")
                | jTANovaFalaRespostaPositiva.getText().equals("")) {
            
            JOptionPane.showMessageDialog(null, "Preencha todos os campos!");
        }
        else {
            CadastrarNovaFala(evt); // Chama evt CadastrarNovaFala
            LimparCamposAbaAdicionarNovaFala(evt);  // Chama evt LimparCamposAbaAdicionarNovaFala
        }
    }//GEN-LAST:event_jBNovaFalaAdicionarActionPerformed

    // ----- Aba Adicionar Novos Itens ----- //
    
    // Busca atraves de nome_npc o codigo_npc e tipo_npc, mostrando em edits em aba Adicionar Novos Itens   
    private void jCBNovosItensNomeNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensNomeNpcItemStateChanged
        
        try {    
        
        GenericDAO gDao = new GenericDAO();
        Npcs npc = new Npcs();
        
        List<Object> ListarDadosNpcs = new ArrayList<>();

        npc.setNome_npc((String) jCBNovosItensNomeNpc.getSelectedItem());

        ListarDadosNpcs = gDao.listar2(Npcs.class, npc);

        for (Object cod : ListarDadosNpcs) {
            Npcs codnpc = (Npcs) cod;
            jTFNovosItensCodigoNpc.setText(String.valueOf(codnpc.getCodigo_npc()));
            jTFNovosItensTipoNpc.setText(String.valueOf(codnpc.getTipo_npc()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBNovosItensNomeNpcItemStateChanged
    
    // Busca atraves do nome_armadura o codigo_armadura e mostra em edit em aba Adicionar Novos Itens 
    private void jCBNovosItensArmaduraNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensArmaduraNpcItemStateChanged
        
        try {    
        
        GenericDAO gDao = new GenericDAO();
        Armaduras armadura = new Armaduras();
        
        List<Object> ListarCodArmaduras = new ArrayList<>();

        armadura.setNome_armadura((String) jCBNovosItensArmaduraNpc.getSelectedItem());

        ListarCodArmaduras = gDao.listar2(Armaduras.class, armadura);

        for (Object cod : ListarCodArmaduras) {
            Armaduras codarmadura = (Armaduras) cod;
            jTFNovosItensCodArmadura.setText(String.valueOf(codarmadura.getCodigo_armadura()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBNovosItensArmaduraNpcItemStateChanged

    // Busca atraves do nome_arma o codigo_arma e mostra em edit em aba Adicionar Novos Itens  
    private void jCBNovosItensArmaNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensArmaNpcItemStateChanged
        
        try {    
        
        GenericDAO gDao = new GenericDAO();
        Armas arma = new Armas();
        
        List<Object> ListarCodArmas = new ArrayList<>();

        arma.setNome_arma((String) jCBNovosItensArmaNpc.getSelectedItem());

        ListarCodArmas = gDao.listar2(Armas.class, arma);

        for (Object cod : ListarCodArmas) {
            Armas codarma = (Armas) cod;
            jTFNovosItensCodArma.setText(String.valueOf(codarma.getCodigo_arma()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBNovosItensArmaNpcItemStateChanged
    
    // Busca atraves do nome_consumivel o codigo_consumivel e mostra em edit em aba Adicionar Novos Itens  
    private void jCBNovosItensConsumivelNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensConsumivelNpcItemStateChanged
        
        try {    
        
        GenericDAO gDao = new GenericDAO();
        Consumiveis consumivel = new Consumiveis();
        
        List<Object> ListarCodConsumiveis = new ArrayList<>();

        consumivel.setNome_consumivel((String) jCBNovosItensConsumivelNpc.getSelectedItem());

        ListarCodConsumiveis = gDao.listar2(Consumiveis.class, consumivel);

        for (Object cod : ListarCodConsumiveis) {
            Consumiveis codconsumivel = (Consumiveis) cod;
            jTFNovosItensCodConsumivel.setText(String.valueOf(codconsumivel.getCodigo_consumivel()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBNovosItensConsumivelNpcItemStateChanged

    // Busca atraves do nome_escudo o codigo_escudo e mostra em edit em aba Adicionar Novos Itens
    private void jCBNovosItensEscudoNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensEscudoNpcItemStateChanged
        
        try {    
        
        GenericDAO gDao = new GenericDAO();
        Escudos escudo = new Escudos();
        
        List<Object> ListarCodEscudo = new ArrayList<>();

        escudo.setNome_escudo((String) jCBNovosItensEscudoNpc.getSelectedItem());

        ListarCodEscudo = gDao.listar2(Escudos.class, escudo);

        for (Object cod : ListarCodEscudo) {
            Escudos codescudo = (Escudos) cod;
            jTFNovosItensCodEscudo.setText(String.valueOf(codescudo.getCodigo_escudo()));
        }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }//GEN-LAST:event_jCBNovosItensEscudoNpcItemStateChanged
    
    // Botão Adicionar Novos Itens em um NPC em aba Adicionar Novos Itens
    private void jBNovosItensAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNovosItensAdicionarActionPerformed

        try {
        
            GenericDAO gDao = new GenericDAO();
            
        // Verifica se algum Npc esta selecionado em combobox    
        if (jTFNovosItensCodigoNpc.getText().equals("") && jTFNovosItensTipoNpc.getText().equals("")){
 
            JOptionPane.showMessageDialog(null, "Selecione um Npc para poder adicionar novos itens!"); 
        }
        else {
            
            // Verifica Armadura
            if (jCBNovosItensAdicionarArmadura.isSelected()
                    && jCBNovosItensArmaduraNpc.getSelectedIndex() != (-1) 
                     && jTFNovosItensCodArmadura.getText() != ""
                      && jTFNovosItensQuantidadeArmaduraNpc.getText() != ""){
                
                ArmadurasNpcs NovaArmaduraNpc = new ArmadurasNpcs();
                
                NovaArmaduraNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                NovaArmaduraNpc.setCodigo_armadura(Integer.parseInt(jTFNovosItensCodArmadura.getText()));
                NovaArmaduraNpc.setQuantidade_armadura(Integer.parseInt(jTFNovosItensCodArmadura.getText()));
                
                gDao.adicionar(NovaArmaduraNpc);
            } 
            else {// Informa campos em branco  
                JOptionPane.showMessageDialog(null, "Selecione uma Armadura e insira a quantidade desejada!");
            }
            
            // Verifica Arma
            if (jCBNovosItensAdicionarArma.isSelected()
                    && jCBNovosItensArmaNpc.getSelectedIndex() != (-1)
                     && jTFNovosItensCodArma.equals("") 
                      && jTFNovosItensQuantidadeArmaNpc.equals("")){
                
                ArmasNpcs NovaArmaNpc = new ArmasNpcs();
                
                NovaArmaNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                NovaArmaNpc.setCodigo_arma(Integer.parseInt(jTFNovosItensCodArma.getText()));
                NovaArmaNpc.setQuantidade_arma(Integer.parseInt(jTFNovosItensQuantidadeArmaNpc.getText()));
                
                gDao.adicionar(NovaArmaNpc);
            }
            else {// Informa campos em branco
                JOptionPane.showMessageDialog(null, "Selecione uma Arma e insira a quantidade desejada!");
            }
            
            // Verifica Consumivel
            if (jCBNovosItensAdicionarConsumivel.isSelected()
                    && jCBNovosItensConsumivelNpc.getSelectedIndex() != (-1)
                     && jTFNovosItensCodConsumivel.equals("")
                      && jTFNovosItensQuantidadeConsumivelNpc.equals("")){
                
                ConsumiveisNpcs NovoConsumivelNpc = new ConsumiveisNpcs();
                
                NovoConsumivelNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                NovoConsumivelNpc.setCodigo_consumivel(Integer.parseInt(jTFNovosItensCodConsumivel.getText()));
                NovoConsumivelNpc.setQuantidade_consumivel(Integer.parseInt(jTFNovosItensQuantidadeConsumivelNpc.getText()));
                
                gDao.adicionar(NovoConsumivelNpc);
            }
            else {// Informa campos em branco
                JOptionPane.showMessageDialog(null, "Selecione um Consumivel e insira a quantidade desejada!");
            }
            
            // Verifica Escudo
            if (jCBNovosItensAdicionarEscudo.isSelected()
                    && jCBNovosItensEscudoNpc.getSelectedIndex() != (-1)
                     && jTFNovosItensCodEscudo.equals("")
                      && jTFNovosItensQuantidadeEscudoNpc.equals("")){
                
                EscudosNpcs NovoEscudoNpc = new EscudosNpcs();
                
                NovoEscudoNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                NovoEscudoNpc.setCodigo_escudo(Integer.parseInt(jTFNovosItensCodEscudo.getText()));
                NovoEscudoNpc.setQuantidade_escudos(Integer.parseInt(jTFNovosItensQuantidadeEscudoNpc.getText()));
                
                gDao.adicionar(NovoEscudoNpc);
            }
            else {// Informa campos em branco
                JOptionPane.showMessageDialog(null, "Selecione um Escudo e insira a quantidade desejada!");
            }
        }

        } catch (SQLException | ClassNotFoundException | IllegalArgumentException | IllegalAccessException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBNovosItensAdicionarActionPerformed

    // Lista Npcs cadastrados e mostra em ComboBox em aba Adicionar Nova Fala
    private void jBNovaFalaAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNovaFalaAtualizarActionPerformed
            
        try { 
            
        GenericDAO gDao = new GenericDAO();
        
        jCBNovaFalaNomeNpc.removeAllItems();
        
        // Carrega ComboBox Npcs    
        List<Object> listarNpcs = null;
            try {
                listarNpcs = gDao.listar(Npcs.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarNpcs) {
                Npcs nomenpc = (Npcs) obj2;
                jCBNovaFalaNomeNpc.addItem(nomenpc.getNome_npc());
            }// Fim listar Npcs
        
            // Deixa campos em branco
            jCBNovaFalaNomeNpc.setSelectedIndex(-1);
            jTFNovaFalaCodigoNpc.setText("");
            jTFNovaFalaTipoNpc.setText("");

        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jBNovaFalaAtualizarActionPerformed

    // Lista Npcs cadastrados e Itens cadastrados em ComboBox em aba Adicionar Novos Itens    
    private void jBNovosItensAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNovosItensAtualizarActionPerformed
                
        try { 
            
        GenericDAO gDao = new GenericDAO();
        
        jCBNovosItensNomeNpc.removeAllItems();
        jCBNovosItensArmaduraNpc.removeAllItems();
        jCBNovosItensArmaNpc.removeAllItems();
        jCBNovosItensConsumivelNpc.removeAllItems();
        jCBNovosItensEscudoNpc.removeAllItems();
        
        // Carrega ComboBox Npcs    
        List<Object> listarNpcs = null;
            try {
                listarNpcs = gDao.listar(Npcs.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (Object obj2 : listarNpcs) {
                Npcs nomenpc = (Npcs) obj2;
                jCBNovosItensNomeNpc.addItem(nomenpc.getNome_npc());
            }// Fim listar Npcs
        
            // Limpa os campos
            jCBNovosItensNomeNpc.setSelectedIndex(-1);
            jTFNovosItensCodigoNpc.setText("");
            jTFNovosItensTipoNpc.setText("");
                          
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBNovosItensAtualizarActionPerformed

    // Atualiza ComboBox Raça e ComboBox Classe com dados do banco em aba Cadastrar
    private void jBAtualizarAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAtualizarAtributosActionPerformed
        
        try {
            
            // Remove os itens de Combobox
            jCBRaca.removeAllItems();
            jCBClasse.removeAllItems();
            
            // Chama evt AddItensComboAtributosNpcsAbaCadastrar
            AddItensComboAtributosNpcsAbaCadastrar(evt);
            
            // Seleciona index -1 e limpa campos codigo
            // Atributos
            jCBRaca.setSelectedIndex(-1);
            jCBClasse.setSelectedIndex(-1);
            
            jTFCodRaca.setText("");
            jTFCodClasse.setText("");
                          
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBAtualizarAtributosActionPerformed
    
    // Atualiza ComboBox Armas, ComboBox Armaduras, ComboBox Consumiveis e ComboBox Escudos com dados do banco em aba Cadastrar
    private void jBAtualizarItensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAtualizarItensActionPerformed
             
        try {
            
            // Remove os itens de Combobox
            jCBArmaduraNpc.removeAllItems();
            jCBArmaNpc.removeAllItems();
            jCBConsumivelNpc.removeAllItems();
            jCBEscudoNpc.removeAllItems();
            
            // Chama evt AddItensComboItensNpcsAbaCadastrar
            AddItensComboItensNpcsAbaCadastrar(evt);
            
            // Seleciona index -1 e limpa campos codigo
            // Itens
            jCBArmaduraNpc.setSelectedIndex(-1);
            jCBArmaNpc.setSelectedIndex(-1);
            jCBConsumivelNpc.setSelectedIndex(-1);
            jCBEscudoNpc.setSelectedIndex(-1);
            
            jTFCodArmadura.setText("");
            jTFCodArma.setText("");
            jTFCodConsumivel.setText("");
            jTFCodEscudo.setText("");
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBAtualizarItensActionPerformed

    // CheckBox Armaduras selecionado
    private void jCBNovosItensAdicionarArmaduraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBNovosItensAdicionarArmaduraActionPerformed
        
        try {
            
            GenericDAO gDao = new GenericDAO();
        
        // Se CheckBox estiver selecionado...
        if (jCBNovosItensAdicionarArmadura.isSelected()){    
            
            jCBNovosItensArmaduraNpc.removeAllItems();
            
            // Carrega ComboBox Armaduras    
            List<Object> listarArmaduras = null;
            try {
                listarArmaduras = gDao.listar(Armaduras.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Object obj2 : listarArmaduras) {
                Armaduras armaduranpc = (Armaduras) obj2;
                jCBNovosItensArmaduraNpc.addItem(armaduranpc.getNome_armadura());
            }// Fim listar Armaduras
           
            jCBNovosItensArmaduraNpc.setSelectedIndex(-1);
            jTFNovosItensCodArmadura.setText("");
            jTFNovosItensQuantidadeArmaduraNpc.setText("");  
        }  
        else { //Senão remove armaduras e limpa campos
            
            jCBNovosItensArmaduraNpc.removeAllItems();
            jTFNovosItensCodArmadura.setText("");
            jTFNovosItensQuantidadeArmaduraNpc.setText("");
        }
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jCBNovosItensAdicionarArmaduraActionPerformed

    // CheckBox Armas selecionado
    private void jCBNovosItensAdicionarArmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBNovosItensAdicionarArmaActionPerformed
        
        try {
            
            GenericDAO gDao = new GenericDAO();
        
        // Se CheckBox estiver selecionado...
        if (jCBNovosItensAdicionarArma.isSelected()){              
            
            jCBNovosItensArmaNpc.removeAllItems();
            
            // Carrega ComboBox Armas    
            List<Object> listarArmas = null;
            try {
                listarArmas = gDao.listar(Armas.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Object obj2 : listarArmas) {
                Armas armanpc = (Armas) obj2;
                jCBNovosItensArmaNpc.addItem(armanpc.getNome_arma());
            }// Fim listar Armas   
           
            jCBNovosItensArmaNpc.setSelectedIndex(-1);
            jTFNovosItensCodArma.setText("");
            jTFNovosItensQuantidadeArmaNpc.setText("");    
        }
        else{ //Senão remove armaduras e limpa campos
                    
            jCBNovosItensArmaNpc.removeAllItems();
            jTFNovosItensCodArma.setText("");
            jTFNovosItensQuantidadeArmaNpc.setText("");
        }
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_jCBNovosItensAdicionarArmaActionPerformed

    // CheckBox Consumiveis selecionado
    private void jCBNovosItensAdicionarConsumivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBNovosItensAdicionarConsumivelActionPerformed
    
        try {
            
            GenericDAO gDao = new GenericDAO();
            
        // Se CheckBox estiver selecionado...
        if (jCBNovosItensAdicionarConsumivel.isSelected()){ 
            
            jCBNovosItensConsumivelNpc.removeAllItems();
        
            // Carrega ComboBox Consumiveis
            List<Object> listarConsumiveis = null;
            try {
                listarConsumiveis = gDao.listar(Consumiveis.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Object obj2 : listarConsumiveis) {
                Consumiveis consumivelnpc = (Consumiveis) obj2;
                jCBNovosItensConsumivelNpc.addItem(consumivelnpc.getNome_consumivel());
            }// Fim listar Consumiveis    
            
            jCBNovosItensConsumivelNpc.setSelectedIndex(-1);
            jTFNovosItensCodConsumivel.setText("");
            jTFNovosItensQuantidadeConsumivelNpc.setText(""); 
        }
        else {  //Senão remove armaduras e limpa campos
        
            jCBNovosItensConsumivelNpc.removeAllItems();
            jTFNovosItensCodConsumivel.setText("");
            jTFNovosItensQuantidadeConsumivelNpc.setText("");
        }
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_jCBNovosItensAdicionarConsumivelActionPerformed

    // CheckBox Escudo selecionado
    private void jCBNovosItensAdicionarEscudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBNovosItensAdicionarEscudoActionPerformed
        
        try {
            
            GenericDAO gDao = new GenericDAO();
            
        // Se CheckBox estiver selecionado...
        if (jCBNovosItensAdicionarEscudo.isSelected()){  
            
            jCBNovosItensEscudoNpc.removeAllItems();
            
            // Carrega ComboBox Escudos
            List<Object> listarEscudos = null;
            try {
                listarEscudos = gDao.listar(Escudos.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Object obj2 : listarEscudos) {
                Escudos escudonpc = (Escudos) obj2;
                jCBNovosItensEscudoNpc.addItem(escudonpc.getNome_escudo());
            }// Fim listar Escudos        
            
            jCBNovosItensEscudoNpc.setSelectedIndex(-1);
            jTFNovosItensCodEscudo.setText("");
            jTFNovosItensQuantidadeEscudoNpc.setText("");  
        }
        else{ //Senão remove armaduras e limpa campos
            
            jCBNovosItensEscudoNpc.removeAllItems();
            jTFNovosItensCodEscudo.setText("");
            jTFNovosItensQuantidadeEscudoNpc.setText("");
        }
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_jCBNovosItensAdicionarEscudoActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFNpc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFNpc().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField JTFAlterarNomeNpc;
    private javax.swing.JTextField JTFNomeNpc;
    private javax.swing.JLabel LabeAlterarlFala;
    private javax.swing.JLabel LabelAdicionarNovaFala;
    private javax.swing.JLabel LabelAdicionarNovosItens;
    private javax.swing.JLabel LabelAlteracaoNpc;
    private javax.swing.JLabel LabelAlterarDescricaoNpc;
    private javax.swing.JLabel LabelAlterarNomeNpc;
    private javax.swing.JLabel LabelAlterarRespostaNegativa;
    private javax.swing.JLabel LabelAlterarRespostaPositiva;
    private javax.swing.JLabel LabelAlterarTipoNpc;
    private javax.swing.JLabel LabelCadastroNpc;
    private javax.swing.JLabel LabelDescricaoNpc;
    private javax.swing.JLabel LabelExcluirNomeNpc;
    private javax.swing.JLabel LabelExcluirNpc;
    private javax.swing.JLabel LabelFala;
    private javax.swing.JLabel LabelNomeNpc;
    private javax.swing.JLabel LabelNovaFalaNomeNpc;
    private javax.swing.JLabel LabelNovaFalaNpc;
    private javax.swing.JLabel LabelNovaFalaRespostaNegativa;
    private javax.swing.JLabel LabelNovaFalaRespostaPositiva;
    private javax.swing.JLabel LabelNovaFalaTipoNpc;
    private javax.swing.JLabel LabelNovosItensNomeNpc;
    private javax.swing.JLabel LabelNovosItensTipoNpc;
    private javax.swing.JLabel LabelRespostaNegativa;
    private javax.swing.JLabel LabelRespostaPositiva;
    private javax.swing.JLabel LabelTipoNpc;
    private javax.swing.JButton jBAlterarAdicionarFala;
    private javax.swing.JButton jBAlterarAdicionarItenNpc;
    private javax.swing.JButton jBAlterarCadastrar;
    private javax.swing.JButton jBAtualizarAtributos;
    private javax.swing.JButton jBAtualizarItens;
    private javax.swing.JButton jBCadastrar;
    private javax.swing.JButton jBExcluirNpc;
    private javax.swing.JButton jBNovaFalaAdicionar;
    private javax.swing.JButton jBNovaFalaAtualizar;
    private javax.swing.JButton jBNovosItensAdicionar;
    private javax.swing.JButton jBNovosItensAtualizar;
    private javax.swing.JComboBox jCBAlterarArmaNpc;
    private javax.swing.JComboBox jCBAlterarArmaduraNpc;
    private javax.swing.JComboBox jCBAlterarClasse;
    private javax.swing.JComboBox jCBAlterarConsumivelNpc;
    private javax.swing.JComboBox jCBAlterarEscudoNpc;
    private javax.swing.JComboBox jCBAlterarRaca;
    private javax.swing.JComboBox jCBAlterarTipoNpc;
    private javax.swing.JComboBox jCBArmaNpc;
    private javax.swing.JComboBox jCBArmaduraNpc;
    private javax.swing.JComboBox jCBClasse;
    private javax.swing.JComboBox jCBConsumivelNpc;
    private javax.swing.JComboBox jCBEscudoNpc;
    private javax.swing.JComboBox jCBExcluirNomeNpc;
    private javax.swing.JComboBox jCBNovaFalaNomeNpc;
    private javax.swing.JCheckBox jCBNovosItensAdicionarArma;
    private javax.swing.JCheckBox jCBNovosItensAdicionarArmadura;
    private javax.swing.JCheckBox jCBNovosItensAdicionarConsumivel;
    private javax.swing.JCheckBox jCBNovosItensAdicionarEscudo;
    private javax.swing.JComboBox jCBNovosItensArmaNpc;
    private javax.swing.JComboBox jCBNovosItensArmaduraNpc;
    private javax.swing.JComboBox jCBNovosItensConsumivelNpc;
    private javax.swing.JComboBox jCBNovosItensEscudoNpc;
    private javax.swing.JComboBox jCBNovosItensNomeNpc;
    private javax.swing.JComboBox jCBRaca;
    private javax.swing.JComboBox jCBTipoNpc;
    private javax.swing.JLabel jLAlterarArmaNpc;
    private javax.swing.JLabel jLAlterarArmaduraNpc;
    private javax.swing.JLabel jLAlterarAtributosNpc;
    private javax.swing.JLabel jLAlterarBasedeAtaque;
    private javax.swing.JLabel jLAlterarCarisma;
    private javax.swing.JLabel jLAlterarClasse;
    private javax.swing.JLabel jLAlterarClassedeArmadura;
    private javax.swing.JLabel jLAlterarConstituicao;
    private javax.swing.JLabel jLAlterarConsumivelNpc;
    private javax.swing.JLabel jLAlterarDestreza;
    private javax.swing.JLabel jLAlterarEscudoNpc;
    private javax.swing.JLabel jLAlterarForca;
    private javax.swing.JLabel jLAlterarFortitude;
    private javax.swing.JLabel jLAlterarIniciativa;
    private javax.swing.JLabel jLAlterarInteligencia;
    private javax.swing.JLabel jLAlterarItens;
    private javax.swing.JLabel jLAlterarPontosdeVida;
    private javax.swing.JLabel jLAlterarQuantidadeItensNpc;
    private javax.swing.JLabel jLAlterarRaca;
    private javax.swing.JLabel jLAlterarReflexos;
    private javax.swing.JLabel jLAlterarSabedoria;
    private javax.swing.JLabel jLAlterarVontade;
    private javax.swing.JLabel jLArmaNpc;
    private javax.swing.JLabel jLArmaduraNpc;
    private javax.swing.JLabel jLAtributosNpc;
    private javax.swing.JLabel jLBasedeAtaque;
    private javax.swing.JLabel jLCarisma;
    private javax.swing.JLabel jLClasse;
    private javax.swing.JLabel jLClassedeArmadura;
    private javax.swing.JLabel jLConstituicao;
    private javax.swing.JLabel jLConsumivelNpc;
    private javax.swing.JLabel jLDestreza;
    private javax.swing.JLabel jLEscudoNpc;
    private javax.swing.JLabel jLForca;
    private javax.swing.JLabel jLFortitude;
    private javax.swing.JLabel jLIniciativa;
    private javax.swing.JLabel jLInteligencia;
    private javax.swing.JLabel jLItens;
    private javax.swing.JLabel jLNovosItens;
    private javax.swing.JLabel jLNovosItensArmaNpc;
    private javax.swing.JLabel jLNovosItensArmaduraNpc;
    private javax.swing.JLabel jLNovosItensConsumivelNpc;
    private javax.swing.JLabel jLNovosItensEscudoNpc;
    private javax.swing.JLabel jLNovosItensQuantidadeItensNpc;
    private javax.swing.JLabel jLPontosdeVida;
    private javax.swing.JLabel jLQuantidadeItensNpc;
    private javax.swing.JLabel jLRaca;
    private javax.swing.JLabel jLReflexos;
    private javax.swing.JLabel jLSabedoria;
    private javax.swing.JLabel jLVontade;
    private javax.swing.JPanel jPCadastrar;
    private javax.swing.JPanel jPExcluir;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextArea jTAAlterarDescricaoNpc;
    private javax.swing.JTextArea jTAAlterarFalaNpc;
    private javax.swing.JTextArea jTAAlterarRespostaNegativa;
    private javax.swing.JTextArea jTAAlterarRespostaPositiva;
    private javax.swing.JTextArea jTADescricaoNpc;
    private javax.swing.JTextArea jTAFalaNpc;
    private javax.swing.JTextArea jTANovaFalaNpc;
    private javax.swing.JTextArea jTANovaFalaRespostaNegativa;
    private javax.swing.JTextArea jTANovaFalaRespostaPositiva;
    private javax.swing.JTextArea jTARespostaNegativa;
    private javax.swing.JTextArea jTARespostaPositiva;
    private javax.swing.JTextField jTFAlterarBasedeAtaque;
    private javax.swing.JTextField jTFAlterarCarisma;
    private javax.swing.JTextField jTFAlterarClassedeArmadura;
    private javax.swing.JTextField jTFAlterarCodArma;
    private javax.swing.JTextField jTFAlterarCodArmadura;
    private javax.swing.JTextField jTFAlterarCodClasse;
    private javax.swing.JTextField jTFAlterarCodConsumivel;
    private javax.swing.JTextField jTFAlterarCodEscudo;
    private javax.swing.JTextField jTFAlterarCodRaca;
    private javax.swing.JTextField jTFAlterarCodigoNpc;
    private javax.swing.JTextField jTFAlterarConstituicao;
    private javax.swing.JTextField jTFAlterarDestreza;
    private javax.swing.JTextField jTFAlterarForca;
    private javax.swing.JTextField jTFAlterarFortitude;
    private javax.swing.JTextField jTFAlterarIniciativa;
    private javax.swing.JTextField jTFAlterarInteligencia;
    private javax.swing.JTextField jTFAlterarPontosdeVida;
    private javax.swing.JTextField jTFAlterarQuantidadeArmaNpc;
    private javax.swing.JTextField jTFAlterarQuantidadeArmaduraNpc;
    private javax.swing.JTextField jTFAlterarQuantidadeConsumivelNpc;
    private javax.swing.JTextField jTFAlterarQuantidadeEscudoNpc;
    private javax.swing.JTextField jTFAlterarReflexos;
    private javax.swing.JTextField jTFAlterarSabedoria;
    private javax.swing.JTextField jTFAlterarVontade;
    private javax.swing.JTextField jTFBasedeAtaque;
    private javax.swing.JTextField jTFCarisma;
    private javax.swing.JTextField jTFClassedeArmadura;
    private javax.swing.JTextField jTFCodArma;
    private javax.swing.JTextField jTFCodArmadura;
    private javax.swing.JTextField jTFCodClasse;
    private javax.swing.JTextField jTFCodConsumivel;
    private javax.swing.JTextField jTFCodEscudo;
    private javax.swing.JTextField jTFCodRaca;
    private javax.swing.JTextField jTFCodigoNpc;
    private javax.swing.JTextField jTFConstituicao;
    private javax.swing.JTextField jTFDestreza;
    private javax.swing.JTextField jTFForca;
    private javax.swing.JTextField jTFFortitude;
    private javax.swing.JTextField jTFIndexTipoNpc;
    private javax.swing.JTextField jTFIniciativa;
    private javax.swing.JTextField jTFInteligencia;
    private javax.swing.JTextField jTFNovaFalaCodigoNpc;
    private javax.swing.JTextField jTFNovaFalaTipoNpc;
    private javax.swing.JTextField jTFNovosItensCodArma;
    private javax.swing.JTextField jTFNovosItensCodArmadura;
    private javax.swing.JTextField jTFNovosItensCodConsumivel;
    private javax.swing.JTextField jTFNovosItensCodEscudo;
    private javax.swing.JTextField jTFNovosItensCodigoNpc;
    private javax.swing.JTextField jTFNovosItensQuantidadeArmaNpc;
    private javax.swing.JTextField jTFNovosItensQuantidadeArmaduraNpc;
    private javax.swing.JTextField jTFNovosItensQuantidadeConsumivelNpc;
    private javax.swing.JTextField jTFNovosItensQuantidadeEscudoNpc;
    private javax.swing.JTextField jTFNovosItensTipoNpc;
    private javax.swing.JTextField jTFPontosdeVida;
    private javax.swing.JTextField jTFQuantidadeArmaNpc;
    private javax.swing.JTextField jTFQuantidadeArmaduraNpc;
    private javax.swing.JTextField jTFQuantidadeConsumivelNpc;
    private javax.swing.JTextField jTFQuantidadeEscudoNpc;
    private javax.swing.JTextField jTFReflexos;
    private javax.swing.JTextField jTFSabedoria;
    private javax.swing.JTextField jTFVontade;
    private javax.swing.JTabbedPane jTPNPC;
    // End of variables declaration//GEN-END:variables
}
