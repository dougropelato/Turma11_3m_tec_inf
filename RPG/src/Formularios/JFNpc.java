/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import Formularios.JFNpcAlterarExcluir;
import Tabelas.NpcsCombatentes;
import Tabelas.Raca;
import dao.GenericDAO;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import tabelas.Armaduras;
import tabelas.ArmadurasNpcs;
import tabelas.Armas;
import tabelas.ArmasNpcs;
import tabelas.Classes;
import tabelas.Consumiveis;
import tabelas.ConsumiveisNpcs;
import tabelas.Escudos;
import tabelas.EscudosNpcs;
import tabelas.Falas;
import tabelas.Npcs;
import tabelas.NpcsFalas;
import tabelas.Personagens;

/**
 *
 * @author Leonardo
 */
public class JFNpc extends javax.swing.JFrame {

    /**
     * Creates new form JFNpc
     */
    public void centralizarComponente() {

        Dimension ds = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension dw = getSize();
        setLocation((ds.width - dw.width) / 2, (ds.height - dw.height) / 2);
    }

    public JFNpc() {
        initComponents();
        centralizarComponente();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTPNPC = new javax.swing.JTabbedPane();
        jPCadastrar = new javax.swing.JPanel();
        LabelNomeNpc = new javax.swing.JLabel();
        LabelTipoNpc = new javax.swing.JLabel();
        JTFNomeNpc = new javax.swing.JTextField();
        LabelCadastroNpc = new javax.swing.JLabel();
        LabelDescricaoNpc = new javax.swing.JLabel();
        LabelFala = new javax.swing.JLabel();
        LabelRespostaPositiva = new javax.swing.JLabel();
        LabelRespostaNegativa = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTADescricaoNpc = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTAFalaNpc = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTARespostaNegativa = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTARespostaPositiva = new javax.swing.JTextArea();
        jBCadastrar = new javax.swing.JButton();
        jCBTipoNpc = new javax.swing.JComboBox();
        jLAtributosNpc = new javax.swing.JLabel();
        jTFForca = new javax.swing.JTextField();
        jLForca = new javax.swing.JLabel();
        jLDestreza = new javax.swing.JLabel();
        jLConstituicao = new javax.swing.JLabel();
        jLInteligencia = new javax.swing.JLabel();
        jLSabedoria = new javax.swing.JLabel();
        jLFortitude = new javax.swing.JLabel();
        jLClassedeArmadura = new javax.swing.JLabel();
        jLBasedeAtaque = new javax.swing.JLabel();
        jLPontosdeVida = new javax.swing.JLabel();
        jLIniciativa = new javax.swing.JLabel();
        jLVontade = new javax.swing.JLabel();
        jLReflexos = new javax.swing.JLabel();
        jLCarisma = new javax.swing.JLabel();
        jTFDestreza = new javax.swing.JTextField();
        jTFConstituicao = new javax.swing.JTextField();
        jTFInteligencia = new javax.swing.JTextField();
        jTFSabedoria = new javax.swing.JTextField();
        jTFFortitude = new javax.swing.JTextField();
        jTFClassedeArmadura = new javax.swing.JTextField();
        jTFBasedeAtaque = new javax.swing.JTextField();
        jTFPontosdeVida = new javax.swing.JTextField();
        jTFIniciativa = new javax.swing.JTextField();
        jTFVontade = new javax.swing.JTextField();
        jTFReflexos = new javax.swing.JTextField();
        jTFCarisma = new javax.swing.JTextField();
        jLClasse = new javax.swing.JLabel();
        jLRaca = new javax.swing.JLabel();
        jCBRaca = new javax.swing.JComboBox();
        jCBClasse = new javax.swing.JComboBox();
        jLItens = new javax.swing.JLabel();
        jLArmaduraNpc = new javax.swing.JLabel();
        jLArmaNpc = new javax.swing.JLabel();
        jLConsumivelNpc = new javax.swing.JLabel();
        jLEscudoNpc = new javax.swing.JLabel();
        jCBArmaduraNpc = new javax.swing.JComboBox();
        jCBArmaNpc = new javax.swing.JComboBox();
        jCBConsumivelNpc = new javax.swing.JComboBox();
        jCBEscudoNpc = new javax.swing.JComboBox();
        jTFQuantidadeArmaduraNpc = new javax.swing.JTextField();
        jTFQuantidadeArmaNpc = new javax.swing.JTextField();
        jTFQuantidadeConsumivelNpc = new javax.swing.JTextField();
        jTFQuantidadeEscudoNpc = new javax.swing.JTextField();
        jTFCodigoNpc = new javax.swing.JTextField();
        jTFCodArmadura = new javax.swing.JTextField();
        jLQuantidadeItensNpc = new javax.swing.JLabel();
        jTFCodArma = new javax.swing.JTextField();
        jTFCodConsumivel = new javax.swing.JTextField();
        jTFCodEscudo = new javax.swing.JTextField();
        jTFCodRaca = new javax.swing.JTextField();
        jTFCodClasse = new javax.swing.JTextField();
        jTFIndexTipoNpc = new javax.swing.JTextField();
        jBAtualizarAtributos = new javax.swing.JButton();
        jBAtualizarItens = new javax.swing.JButton();
        jBAlterar = new javax.swing.JButton();
        jBSair = new javax.swing.JButton();
        jCBAdicionarItemEscudo = new javax.swing.JCheckBox();
        jCBAdicionarItemArmadura = new javax.swing.JCheckBox();
        jCBAdicionarItemArma = new javax.swing.JCheckBox();
        jCBAdicionarItemConsumivel = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        LabelNovaFalaNomeNpc = new javax.swing.JLabel();
        LabelAdicionarNovaFala = new javax.swing.JLabel();
        jTFNovaFalaCodigoNpc = new javax.swing.JTextField();
        jCBNovaFalaNomeNpc = new javax.swing.JComboBox();
        LabelNovaFalaTipoNpc = new javax.swing.JLabel();
        LabelNovaFalaNpc = new javax.swing.JLabel();
        LabelNovaFalaRespostaPositiva = new javax.swing.JLabel();
        LabelNovaFalaRespostaNegativa = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTANovaFalaNpc = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTANovaFalaRespostaPositiva = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTANovaFalaRespostaNegativa = new javax.swing.JTextArea();
        jBNovaFalaAdicionar = new javax.swing.JButton();
        jTFNovaFalaTipoNpc = new javax.swing.JTextField();
        jBNovaFalaAtualizar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        LabelAdicionarNovosItens = new javax.swing.JLabel();
        LabelNovosItensNomeNpc = new javax.swing.JLabel();
        jCBNovosItensNomeNpc = new javax.swing.JComboBox();
        jTFNovosItensCodigoNpc = new javax.swing.JTextField();
        LabelNovosItensTipoNpc = new javax.swing.JLabel();
        jTFNovosItensTipoNpc = new javax.swing.JTextField();
        jLNovosItens = new javax.swing.JLabel();
        jLNovosItensArmaduraNpc = new javax.swing.JLabel();
        jLNovosItensArmaNpc = new javax.swing.JLabel();
        jLNovosItensConsumivelNpc = new javax.swing.JLabel();
        jLNovosItensEscudoNpc = new javax.swing.JLabel();
        jCBNovosItensArmaduraNpc = new javax.swing.JComboBox();
        jCBNovosItensArmaNpc = new javax.swing.JComboBox();
        jCBNovosItensConsumivelNpc = new javax.swing.JComboBox();
        jCBNovosItensEscudoNpc = new javax.swing.JComboBox();
        jTFNovosItensQuantidadeArmaduraNpc = new javax.swing.JTextField();
        jTFNovosItensQuantidadeArmaNpc = new javax.swing.JTextField();
        jTFNovosItensQuantidadeConsumivelNpc = new javax.swing.JTextField();
        jTFNovosItensQuantidadeEscudoNpc = new javax.swing.JTextField();
        jTFNovosItensCodArmadura = new javax.swing.JTextField();
        jLNovosItensQuantidadeItensNpc = new javax.swing.JLabel();
        jTFNovosItensCodArma = new javax.swing.JTextField();
        jTFNovosItensCodConsumivel = new javax.swing.JTextField();
        jTFNovosItensCodEscudo = new javax.swing.JTextField();
        jBNovosItensAdicionar = new javax.swing.JButton();
        jBNovosItensAtualizar = new javax.swing.JButton();
        jCBNovosItensAdicionarArmadura = new javax.swing.JCheckBox();
        jCBNovosItensAdicionarArma = new javax.swing.JCheckBox();
        jCBNovosItensAdicionarConsumivel = new javax.swing.JCheckBox();
        jCBNovosItensAdicionarEscudo = new javax.swing.JCheckBox();
        jCBNovosItensCodArmaduraNpc = new javax.swing.JComboBox();
        jLNovosItensCodArmaduraNpcBanco = new javax.swing.JLabel();
        jTFNovosItensVerificaCodArmadura = new javax.swing.JTextField();
        jLNovosItensCodArmaNpcBanco = new javax.swing.JLabel();
        jCBNovosItensCodArmaNpc = new javax.swing.JComboBox();
        jTFNovosItensVerificaCodArma = new javax.swing.JTextField();
        jLNovosItensCodConsumivelNpcBanco = new javax.swing.JLabel();
        jLNovosItensCodEscudoNpcBanco = new javax.swing.JLabel();
        jCBNovosItensCodConsumivelNpc = new javax.swing.JComboBox();
        jCBNovosItensCodEscudoNpc = new javax.swing.JComboBox();
        jTFNovosItensVerificaCodConsumivel = new javax.swing.JTextField();
        jTFNovosItensVerificaCodEscudo = new javax.swing.JTextField();
        jTFNovosItensQuantidadeEscudoBanco = new javax.swing.JTextField();
        jLNovosItensQuantidadeItensBanco = new javax.swing.JLabel();
        jTFNovosItensQuantidadeArmaduraBanco = new javax.swing.JTextField();
        jTFNovosItensQuantidadeArmaBanco = new javax.swing.JTextField();
        jTFNovosItensQuantidadeConsumivelBanco = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Npc's");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTPNPC.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTPNPC.setToolTipText("");

        jPCadastrar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPCadastrar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelNomeNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNomeNpc.setText("Nome:");
        jPCadastrar.add(LabelNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 50, 45, -1));

        LabelTipoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelTipoNpc.setText("Tipo:");
        jPCadastrar.add(LabelTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 80, 45, -1));

        JTFNomeNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        JTFNomeNpc.setNextFocusableComponent(jCBTipoNpc);
        jPCadastrar.add(JTFNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 47, 155, -1));

        LabelCadastroNpc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelCadastroNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelCadastroNpc.setText("Cadastro de Npc's");
        LabelCadastroNpc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPCadastrar.add(LabelCadastroNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, 170, 28));

        LabelDescricaoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelDescricaoNpc.setText("Descrição Npc:");
        jPCadastrar.add(LabelDescricaoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 112, 375, -1));

        LabelFala.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelFala.setText("Fala:");
        LabelFala.setPreferredSize(new java.awt.Dimension(84, 14));
        jPCadastrar.add(LabelFala, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 233, 375, -1));

        LabelRespostaPositiva.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelRespostaPositiva.setText("Resposta Positiva:");
        jPCadastrar.add(LabelRespostaPositiva, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 355, 375, -1));

        LabelRespostaNegativa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelRespostaNegativa.setText("Resposta Negativa:");
        jPCadastrar.add(LabelRespostaNegativa, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 477, 375, -1));

        jScrollPane1.setName(""); // NOI18N

        jTADescricaoNpc.setColumns(20);
        jTADescricaoNpc.setLineWrap(true);
        jTADescricaoNpc.setRows(5);
        jTADescricaoNpc.setToolTipText("");
        jTADescricaoNpc.setWrapStyleWord(true);
        jTADescricaoNpc.setNextFocusableComponent(jTAFalaNpc);
        jTADescricaoNpc.setPreferredSize(null);
        jScrollPane1.setViewportView(jTADescricaoNpc);

        jPCadastrar.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 131, 375, -1));

        jTAFalaNpc.setColumns(20);
        jTAFalaNpc.setLineWrap(true);
        jTAFalaNpc.setRows(5);
        jTAFalaNpc.setToolTipText("");
        jTAFalaNpc.setWrapStyleWord(true);
        jTAFalaNpc.setNextFocusableComponent(jTARespostaPositiva);
        jTAFalaNpc.setPreferredSize(null);
        jScrollPane2.setViewportView(jTAFalaNpc);

        jPCadastrar.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 253, 375, -1));

        jTARespostaNegativa.setColumns(20);
        jTARespostaNegativa.setLineWrap(true);
        jTARespostaNegativa.setRows(5);
        jTARespostaNegativa.setWrapStyleWord(true);
        jTARespostaNegativa.setNextFocusableComponent(jBAtualizarAtributos);
        jTARespostaNegativa.setPreferredSize(null);
        jScrollPane3.setViewportView(jTARespostaNegativa);

        jPCadastrar.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 497, 375, -1));

        jTARespostaPositiva.setColumns(20);
        jTARespostaPositiva.setLineWrap(true);
        jTARespostaPositiva.setRows(5);
        jTARespostaPositiva.setWrapStyleWord(true);
        jTARespostaPositiva.setNextFocusableComponent(jTARespostaNegativa);
        jTARespostaPositiva.setPreferredSize(null);
        jScrollPane4.setViewportView(jTARespostaPositiva);

        jPCadastrar.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 375, 375, -1));

        jBCadastrar.setText("Cadastrar");
        jBCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCadastrarActionPerformed(evt);
            }
        });
        jPCadastrar.add(jBCadastrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 500, 120, 30));

        jCBTipoNpc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Combatente", "Comerciante", "Coletável", "Guia", "Missão" }));
        jCBTipoNpc.setSelectedIndex(-1);
        jCBTipoNpc.setNextFocusableComponent(jTADescricaoNpc);
        jCBTipoNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBTipoNpcItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 77, 155, -1));

        jLAtributosNpc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLAtributosNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAtributosNpc.setText("Atributos NPC");
        jPCadastrar.add(jLAtributosNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, 214, -1));

        jTFForca.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFForca.setName(""); // NOI18N
        jTFForca.setNextFocusableComponent(jTFDestreza);
        jPCadastrar.add(jTFForca, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 243, 90, -1));

        jLForca.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLForca.setText("Força:");
        jPCadastrar.add(jLForca, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 246, 120, -1));

        jLDestreza.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLDestreza.setText("Destreza:");
        jPCadastrar.add(jLDestreza, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 272, 120, -1));

        jLConstituicao.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLConstituicao.setText("Constituição:");
        jPCadastrar.add(jLConstituicao, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 298, 120, -1));

        jLInteligencia.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLInteligencia.setText("Inteligência:");
        jPCadastrar.add(jLInteligencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 324, 120, -1));

        jLSabedoria.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLSabedoria.setText("Sabedoria:");
        jPCadastrar.add(jLSabedoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 350, 120, -1));

        jLFortitude.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLFortitude.setText("Fortitude:");
        jPCadastrar.add(jLFortitude, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 376, 120, -1));

        jLClassedeArmadura.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLClassedeArmadura.setText("Classe de Armadura:");
        jPCadastrar.add(jLClassedeArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 402, 120, -1));

        jLBasedeAtaque.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLBasedeAtaque.setText("Base de Ataque:");
        jPCadastrar.add(jLBasedeAtaque, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 428, 120, -1));

        jLPontosdeVida.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLPontosdeVida.setText("Pontos de Vida:");
        jPCadastrar.add(jLPontosdeVida, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 454, 120, -1));

        jLIniciativa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLIniciativa.setText("Iniciativa:");
        jPCadastrar.add(jLIniciativa, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 480, 120, -1));

        jLVontade.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLVontade.setText("Vontade:");
        jPCadastrar.add(jLVontade, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 506, 120, -1));

        jLReflexos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLReflexos.setText("Reflexos:");
        jPCadastrar.add(jLReflexos, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 532, 120, -1));

        jLCarisma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLCarisma.setText("Carisma:");
        jPCadastrar.add(jLCarisma, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 558, 120, -1));

        jTFDestreza.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFDestreza.setName(""); // NOI18N
        jTFDestreza.setNextFocusableComponent(jTFConstituicao);
        jPCadastrar.add(jTFDestreza, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 269, 90, -1));

        jTFConstituicao.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFConstituicao.setNextFocusableComponent(jTFInteligencia);
        jPCadastrar.add(jTFConstituicao, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 295, 90, -1));

        jTFInteligencia.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFInteligencia.setNextFocusableComponent(jTFSabedoria);
        jPCadastrar.add(jTFInteligencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 321, 90, -1));

        jTFSabedoria.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFSabedoria.setNextFocusableComponent(jTFFortitude);
        jPCadastrar.add(jTFSabedoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 347, 90, -1));

        jTFFortitude.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFFortitude.setNextFocusableComponent(jTFClassedeArmadura);
        jPCadastrar.add(jTFFortitude, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 373, 90, -1));

        jTFClassedeArmadura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFClassedeArmadura.setNextFocusableComponent(jTFBasedeAtaque);
        jPCadastrar.add(jTFClassedeArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 399, 90, -1));

        jTFBasedeAtaque.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFBasedeAtaque.setNextFocusableComponent(jTFPontosdeVida);
        jPCadastrar.add(jTFBasedeAtaque, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 425, 90, -1));

        jTFPontosdeVida.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFPontosdeVida.setNextFocusableComponent(jTFIniciativa);
        jPCadastrar.add(jTFPontosdeVida, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 451, 90, -1));

        jTFIniciativa.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFIniciativa.setNextFocusableComponent(jTFVontade);
        jPCadastrar.add(jTFIniciativa, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 477, 90, -1));

        jTFVontade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFVontade.setNextFocusableComponent(jTFReflexos);
        jPCadastrar.add(jTFVontade, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 503, 90, -1));

        jTFReflexos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFReflexos.setNextFocusableComponent(jTFCarisma);
        jPCadastrar.add(jTFReflexos, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 529, 90, -1));

        jTFCarisma.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCarisma.setNextFocusableComponent(jBAtualizarItens);
        jPCadastrar.add(jTFCarisma, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 555, 90, -1));

        jLClasse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLClasse.setText("Classe:");
        jPCadastrar.add(jLClasse, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 190, 214, -1));

        jLRaca.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLRaca.setText("Raça:");
        jPCadastrar.add(jLRaca, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 140, 214, -1));

        jCBRaca.setNextFocusableComponent(jCBClasse);
        jCBRaca.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBRacaItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBRaca, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 160, 214, -1));

        jCBClasse.setNextFocusableComponent(jTFForca);
        jCBClasse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBClasseItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBClasse, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 210, 214, -1));

        jLItens.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLItens.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLItens.setText("Itens NPC");
        jPCadastrar.add(jLItens, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 110, 155, -1));

        jLArmaduraNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLArmaduraNpc.setText("Armadura:");
        jPCadastrar.add(jLArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 140, 155, -1));

        jLArmaNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLArmaNpc.setText("Arma:");
        jPCadastrar.add(jLArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 190, 155, -1));

        jLConsumivelNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLConsumivelNpc.setText("Consumivel:");
        jPCadastrar.add(jLConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 236, 155, -1));

        jLEscudoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLEscudoNpc.setText("Escudo:");
        jPCadastrar.add(jLEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 282, 155, -1));

        jCBArmaduraNpc.setNextFocusableComponent(jTFQuantidadeArmaduraNpc);
        jCBArmaduraNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBArmaduraNpcItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 160, 155, -1));

        jCBArmaNpc.setNextFocusableComponent(jTFQuantidadeArmaNpc);
        jCBArmaNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBArmaNpcItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 210, 155, -1));

        jCBConsumivelNpc.setNextFocusableComponent(jTFQuantidadeConsumivelNpc);
        jCBConsumivelNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBConsumivelNpcItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 256, 155, -1));

        jCBEscudoNpc.setNextFocusableComponent(jTFQuantidadeEscudoNpc);
        jCBEscudoNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBEscudoNpcItemStateChanged(evt);
            }
        });
        jPCadastrar.add(jCBEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 302, 155, -1));

        jTFQuantidadeArmaduraNpc.setEditable(false);
        jTFQuantidadeArmaduraNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFQuantidadeArmaduraNpc.setNextFocusableComponent(jCBArmaNpc);
        jPCadastrar.add(jTFQuantidadeArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 160, 45, -1));

        jTFQuantidadeArmaNpc.setEditable(false);
        jTFQuantidadeArmaNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFQuantidadeArmaNpc.setNextFocusableComponent(jCBConsumivelNpc);
        jPCadastrar.add(jTFQuantidadeArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 210, 45, -1));

        jTFQuantidadeConsumivelNpc.setEditable(false);
        jTFQuantidadeConsumivelNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFQuantidadeConsumivelNpc.setNextFocusableComponent(jCBEscudoNpc);
        jPCadastrar.add(jTFQuantidadeConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 256, 45, -1));

        jTFQuantidadeEscudoNpc.setEditable(false);
        jTFQuantidadeEscudoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFQuantidadeEscudoNpc.setNextFocusableComponent(jBCadastrar);
        jPCadastrar.add(jTFQuantidadeEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 302, 45, -1));

        jTFCodigoNpc.setEditable(false);
        jTFCodigoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodigoNpc.setFocusable(false);
        jPCadastrar.add(jTFCodigoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 47, 40, -1));

        jTFCodArmadura.setEditable(false);
        jTFCodArmadura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodArmadura.setFocusable(false);
        jPCadastrar.add(jTFCodArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 180, 30, -1));

        jLQuantidadeItensNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLQuantidadeItensNpc.setText("Qtd:");
        jPCadastrar.add(jLQuantidadeItensNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(867, 140, 45, -1));

        jTFCodArma.setEditable(false);
        jTFCodArma.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodArma.setFocusable(false);
        jPCadastrar.add(jTFCodArma, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 230, 30, -1));

        jTFCodConsumivel.setEditable(false);
        jTFCodConsumivel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodConsumivel.setFocusable(false);
        jPCadastrar.add(jTFCodConsumivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 276, 30, -1));

        jTFCodEscudo.setEditable(false);
        jTFCodEscudo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodEscudo.setFocusable(false);
        jPCadastrar.add(jTFCodEscudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(702, 322, 31, -1));

        jTFCodRaca.setEditable(false);
        jTFCodRaca.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodRaca.setFocusable(false);
        jPCadastrar.add(jTFCodRaca, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 160, 30, -1));

        jTFCodClasse.setEditable(false);
        jTFCodClasse.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCodClasse.setFocusable(false);
        jPCadastrar.add(jTFCodClasse, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 210, 30, -1));

        jTFIndexTipoNpc.setEditable(false);
        jTFIndexTipoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFIndexTipoNpc.setFocusable(false);
        jPCadastrar.add(jTFIndexTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 77, 40, -1));

        jBAtualizarAtributos.setText("Atualizar Atributos");
        jBAtualizarAtributos.setNextFocusableComponent(jCBRaca);
        jBAtualizarAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAtualizarAtributosActionPerformed(evt);
            }
        });
        jPCadastrar.add(jBAtualizarAtributos, new org.netbeans.lib.awtextra.AbsoluteConstraints(447, 70, 125, 30));

        jBAtualizarItens.setText("Atualizar Itens");
        jBAtualizarItens.setNextFocusableComponent(jCBArmaduraNpc);
        jBAtualizarItens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAtualizarItensActionPerformed(evt);
            }
        });
        jPCadastrar.add(jBAtualizarItens, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 70, 125, 30));

        jBAlterar.setText("Alterar");
        jBAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAlterarActionPerformed(evt);
            }
        });
        jPCadastrar.add(jBAlterar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 540, 120, 30));

        jBSair.setText("Sair");
        jBSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSairActionPerformed(evt);
            }
        });
        jPCadastrar.add(jBSair, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 580, 120, 30));

        jCBAdicionarItemEscudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBAdicionarItemEscudoActionPerformed(evt);
            }
        });
        jPCadastrar.add(jCBAdicionarItemEscudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 302, -1, -1));

        jCBAdicionarItemArmadura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBAdicionarItemArmaduraActionPerformed(evt);
            }
        });
        jPCadastrar.add(jCBAdicionarItemArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 160, -1, -1));

        jCBAdicionarItemArma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBAdicionarItemArmaActionPerformed(evt);
            }
        });
        jPCadastrar.add(jCBAdicionarItemArma, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 210, -1, -1));

        jCBAdicionarItemConsumivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBAdicionarItemConsumivelActionPerformed(evt);
            }
        });
        jPCadastrar.add(jCBAdicionarItemConsumivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 256, -1, -1));

        jTPNPC.addTab("Cadastrar", jPCadastrar);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelNovaFalaNomeNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovaFalaNomeNpc.setText("Nome:");
        jPanel3.add(LabelNovaFalaNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 50, 45, -1));

        LabelAdicionarNovaFala.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelAdicionarNovaFala.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelAdicionarNovaFala.setText("Adicionar Nova Fala");
        LabelAdicionarNovaFala.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel3.add(LabelAdicionarNovaFala, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, 190, 28));

        jTFNovaFalaCodigoNpc.setEditable(false);
        jTFNovaFalaCodigoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovaFalaCodigoNpc.setFocusable(false);
        jPanel3.add(jTFNovaFalaCodigoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 47, 40, -1));

        jCBNovaFalaNomeNpc.setNextFocusableComponent(jTFNovaFalaTipoNpc);
        jCBNovaFalaNomeNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovaFalaNomeNpcItemStateChanged(evt);
            }
        });
        jPanel3.add(jCBNovaFalaNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 47, 155, -1));

        LabelNovaFalaTipoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovaFalaTipoNpc.setText("Tipo:");
        jPanel3.add(LabelNovaFalaTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 80, 45, -1));

        LabelNovaFalaNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovaFalaNpc.setText("Fala:");
        jPanel3.add(LabelNovaFalaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 112, 375, -1));

        LabelNovaFalaRespostaPositiva.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovaFalaRespostaPositiva.setText("Resposta Positiva:");
        LabelNovaFalaRespostaPositiva.setPreferredSize(new java.awt.Dimension(84, 14));
        jPanel3.add(LabelNovaFalaRespostaPositiva, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 233, 375, -1));

        LabelNovaFalaRespostaNegativa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovaFalaRespostaNegativa.setText("Resposta Negativa");
        jPanel3.add(LabelNovaFalaRespostaNegativa, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 355, 375, -1));

        jTANovaFalaNpc.setColumns(20);
        jTANovaFalaNpc.setLineWrap(true);
        jTANovaFalaNpc.setRows(5);
        jTANovaFalaNpc.setWrapStyleWord(true);
        jTANovaFalaNpc.setNextFocusableComponent(jTANovaFalaRespostaPositiva);
        jTANovaFalaNpc.setPreferredSize(null);
        jScrollPane5.setViewportView(jTANovaFalaNpc);

        jPanel3.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 131, 375, -1));

        jTANovaFalaRespostaPositiva.setColumns(20);
        jTANovaFalaRespostaPositiva.setLineWrap(true);
        jTANovaFalaRespostaPositiva.setRows(5);
        jTANovaFalaRespostaPositiva.setWrapStyleWord(true);
        jTANovaFalaRespostaPositiva.setNextFocusableComponent(jTANovaFalaRespostaNegativa);
        jTANovaFalaRespostaPositiva.setPreferredSize(null);
        jScrollPane6.setViewportView(jTANovaFalaRespostaPositiva);

        jPanel3.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 253, 375, -1));

        jTANovaFalaRespostaNegativa.setColumns(20);
        jTANovaFalaRespostaNegativa.setLineWrap(true);
        jTANovaFalaRespostaNegativa.setRows(5);
        jTANovaFalaRespostaNegativa.setWrapStyleWord(true);
        jTANovaFalaRespostaNegativa.setNextFocusableComponent(jBNovaFalaAdicionar);
        jTANovaFalaRespostaNegativa.setPreferredSize(null);
        jScrollPane8.setViewportView(jTANovaFalaRespostaNegativa);

        jPanel3.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 375, 375, -1));

        jBNovaFalaAdicionar.setText("Adicionar Fala");
        jBNovaFalaAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNovaFalaAdicionarActionPerformed(evt);
            }
        });
        jPanel3.add(jBNovaFalaAdicionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 480, 120, 30));

        jTFNovaFalaTipoNpc.setEditable(false);
        jTFNovaFalaTipoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovaFalaTipoNpc.setFocusable(false);
        jPanel3.add(jTFNovaFalaTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 77, 155, -1));

        jBNovaFalaAtualizar.setText("Atualizar");
        jBNovaFalaAtualizar.setNextFocusableComponent(jCBNovaFalaNomeNpc);
        jBNovaFalaAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNovaFalaAtualizarActionPerformed(evt);
            }
        });
        jPanel3.add(jBNovaFalaAtualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 42, 120, 30));

        jTPNPC.addTab("Adicionar Nova Fala", jPanel3);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelAdicionarNovosItens.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelAdicionarNovosItens.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelAdicionarNovosItens.setText("Adicionar Novos Itens");
        LabelAdicionarNovosItens.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel2.add(LabelAdicionarNovosItens, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, 210, 28));

        LabelNovosItensNomeNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovosItensNomeNpc.setText("Nome:");
        jPanel2.add(LabelNovosItensNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 50, 45, -1));

        jCBNovosItensNomeNpc.setNextFocusableComponent(jCBNovosItensArmaduraNpc);
        jCBNovosItensNomeNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensNomeNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensNomeNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 47, 155, -1));

        jTFNovosItensCodigoNpc.setEditable(false);
        jTFNovosItensCodigoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensCodigoNpc.setFocusable(false);
        jPanel2.add(jTFNovosItensCodigoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 47, 40, -1));

        LabelNovosItensTipoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNovosItensTipoNpc.setText("Tipo:");
        jPanel2.add(LabelNovosItensTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 80, 45, -1));

        jTFNovosItensTipoNpc.setEditable(false);
        jTFNovosItensTipoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensTipoNpc.setFocusable(false);
        jPanel2.add(jTFNovosItensTipoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 77, 155, -1));

        jLNovosItens.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLNovosItens.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItens.setText("Itens NPC");
        jPanel2.add(jLNovosItens, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 120, 155, -1));

        jLNovosItensArmaduraNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensArmaduraNpc.setText("Armadura:");
        jPanel2.add(jLNovosItensArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 150, 155, -1));

        jLNovosItensArmaNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensArmaNpc.setText("Arma:");
        jPanel2.add(jLNovosItensArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 200, 155, -1));

        jLNovosItensConsumivelNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensConsumivelNpc.setText("Consumivel:");
        jPanel2.add(jLNovosItensConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 250, 155, -1));

        jLNovosItensEscudoNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensEscudoNpc.setText("Escudo:");
        jPanel2.add(jLNovosItensEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 300, 155, -1));

        jCBNovosItensArmaduraNpc.setEnabled(false);
        jCBNovosItensArmaduraNpc.setNextFocusableComponent(jTFNovosItensQuantidadeArmaduraNpc);
        jCBNovosItensArmaduraNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensArmaduraNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 170, 155, -1));

        jCBNovosItensArmaNpc.setEnabled(false);
        jCBNovosItensArmaNpc.setNextFocusableComponent(jTFNovosItensQuantidadeArmaNpc);
        jCBNovosItensArmaNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensArmaNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 220, 155, -1));

        jCBNovosItensConsumivelNpc.setEnabled(false);
        jCBNovosItensConsumivelNpc.setNextFocusableComponent(jTFNovosItensQuantidadeConsumivelNpc);
        jCBNovosItensConsumivelNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensConsumivelNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 270, 155, -1));

        jCBNovosItensEscudoNpc.setEnabled(false);
        jCBNovosItensEscudoNpc.setNextFocusableComponent(jTFNovosItensQuantidadeEscudoNpc);
        jCBNovosItensEscudoNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensEscudoNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 320, 155, -1));

        jTFNovosItensQuantidadeArmaduraNpc.setEditable(false);
        jTFNovosItensQuantidadeArmaduraNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensQuantidadeArmaduraNpc.setNextFocusableComponent(jCBNovosItensArmaNpc);
        jPanel2.add(jTFNovosItensQuantidadeArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 170, 45, -1));

        jTFNovosItensQuantidadeArmaNpc.setEditable(false);
        jTFNovosItensQuantidadeArmaNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensQuantidadeArmaNpc.setNextFocusableComponent(jCBNovosItensConsumivelNpc);
        jPanel2.add(jTFNovosItensQuantidadeArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 220, 45, -1));

        jTFNovosItensQuantidadeConsumivelNpc.setEditable(false);
        jTFNovosItensQuantidadeConsumivelNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensQuantidadeConsumivelNpc.setNextFocusableComponent(jCBNovosItensEscudoNpc);
        jPanel2.add(jTFNovosItensQuantidadeConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 270, 45, -1));

        jTFNovosItensQuantidadeEscudoNpc.setEditable(false);
        jTFNovosItensQuantidadeEscudoNpc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensQuantidadeEscudoNpc.setNextFocusableComponent(jBNovosItensAdicionar);
        jPanel2.add(jTFNovosItensQuantidadeEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 320, 45, -1));

        jTFNovosItensCodArmadura.setEditable(false);
        jTFNovosItensCodArmadura.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensCodArmadura.setFocusable(false);
        jPanel2.add(jTFNovosItensCodArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 30, -1));

        jLNovosItensQuantidadeItensNpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensQuantidadeItensNpc.setText("Qtd:");
        jPanel2.add(jLNovosItensQuantidadeItensNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 150, 45, -1));

        jTFNovosItensCodArma.setEditable(false);
        jTFNovosItensCodArma.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensCodArma.setFocusable(false);
        jPanel2.add(jTFNovosItensCodArma, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 30, -1));

        jTFNovosItensCodConsumivel.setEditable(false);
        jTFNovosItensCodConsumivel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensCodConsumivel.setFocusable(false);
        jPanel2.add(jTFNovosItensCodConsumivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 30, -1));

        jTFNovosItensCodEscudo.setEditable(false);
        jTFNovosItensCodEscudo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFNovosItensCodEscudo.setFocusable(false);
        jPanel2.add(jTFNovosItensCodEscudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 31, -1));

        jBNovosItensAdicionar.setText("Adicionar Itens");
        jBNovosItensAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNovosItensAdicionarActionPerformed(evt);
            }
        });
        jPanel2.add(jBNovosItensAdicionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 360, 155, 30));

        jBNovosItensAtualizar.setText("Atualizar");
        jBNovosItensAtualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBNovosItensAtualizar.setNextFocusableComponent(jCBNovosItensNomeNpc);
        jBNovosItensAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNovosItensAtualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jBNovosItensAtualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, 120, 30));

        jCBNovosItensAdicionarArmadura.setText("Armaduras");
        jCBNovosItensAdicionarArmadura.setEnabled(false);
        jCBNovosItensAdicionarArmadura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBNovosItensAdicionarArmaduraActionPerformed(evt);
            }
        });
        jPanel2.add(jCBNovosItensAdicionarArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 170, -1, -1));

        jCBNovosItensAdicionarArma.setText("Armas");
        jCBNovosItensAdicionarArma.setEnabled(false);
        jCBNovosItensAdicionarArma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBNovosItensAdicionarArmaActionPerformed(evt);
            }
        });
        jPanel2.add(jCBNovosItensAdicionarArma, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 220, -1, -1));

        jCBNovosItensAdicionarConsumivel.setText("Consumiveis");
        jCBNovosItensAdicionarConsumivel.setEnabled(false);
        jCBNovosItensAdicionarConsumivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBNovosItensAdicionarConsumivelActionPerformed(evt);
            }
        });
        jPanel2.add(jCBNovosItensAdicionarConsumivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 270, -1, -1));

        jCBNovosItensAdicionarEscudo.setText("Escudos");
        jCBNovosItensAdicionarEscudo.setEnabled(false);
        jCBNovosItensAdicionarEscudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBNovosItensAdicionarEscudoActionPerformed(evt);
            }
        });
        jPanel2.add(jCBNovosItensAdicionarEscudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 320, -1, -1));

        jCBNovosItensCodArmaduraNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensCodArmaduraNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensCodArmaduraNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 170, 90, -1));

        jLNovosItensCodArmaduraNpcBanco.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensCodArmaduraNpcBanco.setText("Cod Armadura");
        jPanel2.add(jLNovosItensCodArmaduraNpcBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, 160, -1));

        jTFNovosItensVerificaCodArmadura.setEditable(false);
        jPanel2.add(jTFNovosItensVerificaCodArmadura, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 170, 60, -1));

        jLNovosItensCodArmaNpcBanco.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensCodArmaNpcBanco.setText("Cod Arma");
        jPanel2.add(jLNovosItensCodArmaNpcBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 200, 160, -1));

        jCBNovosItensCodArmaNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensCodArmaNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensCodArmaNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 220, 90, -1));

        jTFNovosItensVerificaCodArma.setEditable(false);
        jPanel2.add(jTFNovosItensVerificaCodArma, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 220, 60, -1));

        jLNovosItensCodConsumivelNpcBanco.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensCodConsumivelNpcBanco.setText("Cod Consumivel");
        jPanel2.add(jLNovosItensCodConsumivelNpcBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 250, 160, -1));

        jLNovosItensCodEscudoNpcBanco.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensCodEscudoNpcBanco.setText("Cod Escudo");
        jPanel2.add(jLNovosItensCodEscudoNpcBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, 160, -1));

        jCBNovosItensCodConsumivelNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensCodConsumivelNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensCodConsumivelNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 270, 90, -1));

        jCBNovosItensCodEscudoNpc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBNovosItensCodEscudoNpcItemStateChanged(evt);
            }
        });
        jPanel2.add(jCBNovosItensCodEscudoNpc, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 320, 90, -1));

        jTFNovosItensVerificaCodConsumivel.setEditable(false);
        jPanel2.add(jTFNovosItensVerificaCodConsumivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 270, 60, -1));

        jTFNovosItensVerificaCodEscudo.setEditable(false);
        jPanel2.add(jTFNovosItensVerificaCodEscudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 320, 60, -1));

        jTFNovosItensQuantidadeEscudoBanco.setEditable(false);
        jPanel2.add(jTFNovosItensQuantidadeEscudoBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 320, 60, -1));

        jLNovosItensQuantidadeItensBanco.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLNovosItensQuantidadeItensBanco.setText("Qtd:");
        jPanel2.add(jLNovosItensQuantidadeItensBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 150, 60, -1));

        jTFNovosItensQuantidadeArmaduraBanco.setEditable(false);
        jPanel2.add(jTFNovosItensQuantidadeArmaduraBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 170, 60, -1));

        jTFNovosItensQuantidadeArmaBanco.setEditable(false);
        jPanel2.add(jTFNovosItensQuantidadeArmaBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 220, 60, -1));

        jTFNovosItensQuantidadeConsumivelBanco.setEditable(false);
        jPanel2.add(jTFNovosItensQuantidadeConsumivelBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 270, 60, -1));

        jTPNPC.addTab("Adicionar Novos Itens", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTPNPC, javax.swing.GroupLayout.DEFAULT_SIZE, 935, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTPNPC, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // ----- Aba Cadastrar ----- //
    
    // Oculta Atributos formulário Npcs em aba Cadastrar
    public void OcultarComponentesAtributos(java.awt.event.ActionEvent evt) {
        
        // Atributos
        jBAtualizarAtributos.setVisible(false);
        
        jLAtributosNpc.setVisible(false);
        
        jLRaca.setVisible(false);
        jCBRaca.setVisible(false);
        jTFCodRaca.setVisible(false);
        
        jLClasse.setVisible(false);
        jCBClasse.setVisible(false);
        jTFCodClasse.setVisible(false);

        jLForca.setVisible(false);
        jTFForca.setVisible(false);

        jLDestreza.setVisible(false);
        jTFDestreza.setVisible(false);

        jLConstituicao.setVisible(false);
        jTFConstituicao.setVisible(false);

        jLInteligencia.setVisible(false);
        jTFInteligencia.setVisible(false);

        jLSabedoria.setVisible(false);
        jTFSabedoria.setVisible(false);

        jLFortitude.setVisible(false);
        jTFFortitude.setVisible(false);

        jLClassedeArmadura.setVisible(false);
        jTFClassedeArmadura.setVisible(false);

        jLBasedeAtaque.setVisible(false);
        jTFBasedeAtaque.setVisible(false);

        jLPontosdeVida.setVisible(false);
        jTFPontosdeVida.setVisible(false);

        jLIniciativa.setVisible(false);
        jTFIniciativa.setVisible(false);

        jLVontade.setVisible(false);
        jTFVontade.setVisible(false);

        jLReflexos.setVisible(false);
        jTFReflexos.setVisible(false);

        jLCarisma.setVisible(false);
        jTFCarisma.setVisible(false);
        
    }
    
    // Oculta Itens formulário Npcs em aba Cadastrar
    public void OcultarComponentesItens(java.awt.event.ActionEvent evt){
    
        // Itens
        jBAtualizarItens.setVisible(false);
        jLItens.setVisible(false);
        jLArmaNpc.setVisible(false);
        jLArmaduraNpc.setVisible(false);
        jLConsumivelNpc.setVisible(false);
        jLEscudoNpc.setVisible(false);
        jLQuantidadeItensNpc.setVisible(false);
        
        // Armaduras
        jCBAdicionarItemArmadura.setVisible(false);
        jTFCodArmadura.setVisible(false);
        jCBArmaduraNpc.setVisible(false);
        jTFQuantidadeArmaduraNpc.setVisible(false);
    
        // Armas
        jCBAdicionarItemArma.setVisible(false);
        jTFCodArma.setVisible(false);
        jCBArmaNpc.setVisible(false);
        jTFQuantidadeArmaNpc.setVisible(false);
    
        // Consumiveis
        jCBAdicionarItemConsumivel.setVisible(false);
        jTFCodConsumivel.setVisible(false);
        jCBConsumivelNpc.setVisible(false);
        jTFQuantidadeConsumivelNpc.setVisible(false);
    
        // Escudos
        jCBAdicionarItemEscudo.setVisible(false);
        jTFCodEscudo.setVisible(false);
        jCBEscudoNpc.setVisible(false);
        jTFQuantidadeEscudoNpc.setVisible(false);
        
    }
  
    // Oculta componentes utilizados apenas para verificações
    public void OcultarComponentesCodigoTodasAbas(java.awt.event.ActionEvent evt){
    
        // Cadastrar
        jTFCodigoNpc.setVisible(false);
        jTFIndexTipoNpc.setVisible(false);
        jTFCodRaca.setVisible(false);
        jTFCodClasse.setVisible(false);        
        jTFCodArmadura.setVisible(false);        
        jTFCodArma.setVisible(false);
        jTFCodConsumivel.setVisible(false);
        jTFCodEscudo.setVisible(false);
                
        // Adicionar Nova Fala]
        jTFNovaFalaCodigoNpc.setVisible(false);

        // Adicionar Novos Itens
        // Label
        jLNovosItensCodArmaduraNpcBanco.setVisible(false);
        jLNovosItensCodArmaNpcBanco.setVisible(false);
        jLNovosItensCodConsumivelNpcBanco.setVisible(false);        
        jLNovosItensCodEscudoNpcBanco.setVisible(false);
        jLNovosItensQuantidadeItensBanco.setVisible(false);
        
        // ComboBox
        jCBNovosItensCodArmaduraNpc.setVisible(false);
        jCBNovosItensCodArmaNpc.setVisible(false);
        jCBNovosItensCodConsumivelNpc.setVisible(false);
        jCBNovosItensCodEscudoNpc.setVisible(false);
                
        // jTextField
        jTFNovosItensVerificaCodArmadura.setVisible(false);
        jTFNovosItensVerificaCodArma.setVisible(false);
        jTFNovosItensVerificaCodConsumivel.setVisible(false);
        jTFNovosItensVerificaCodEscudo.setVisible(false);
        
        jTFNovosItensCodigoNpc.setVisible(false);
        jTFNovosItensCodArmadura.setVisible(false);
        jTFNovosItensCodArma.setVisible(false);
        jTFNovosItensCodConsumivel.setVisible(false);
        jTFNovosItensCodEscudo.setVisible(false);
        
        jTFNovosItensQuantidadeArmaduraBanco.setVisible(false);
        jTFNovosItensQuantidadeArmaBanco.setVisible(false);
        jTFNovosItensQuantidadeConsumivelBanco.setVisible(false);
        jTFNovosItensQuantidadeEscudoBanco.setVisible(false);
        
    }
    
    // Mostra componentes utilizados apenas para verificações
    public void MostrarComponentesCodigoTodasAbas(java.awt.event.ActionEvent evt){
    
        // Cadastrar
        jTFCodigoNpc.setVisible(true);
        jTFIndexTipoNpc.setVisible(true);
        jTFCodRaca.setVisible(true);
        jTFCodClasse.setVisible(true);        
        jTFCodArmadura.setVisible(true);        
        jTFCodArma.setVisible(true);
        jTFCodConsumivel.setVisible(true);
        jTFCodEscudo.setVisible(true);
                
        // Adicionar Nova Fala]
        jTFNovaFalaCodigoNpc.setVisible(true);

        // Adicionar Novos Itens
        // Label
        jLNovosItensCodArmaduraNpcBanco.setVisible(true);
        jLNovosItensCodArmaNpcBanco.setVisible(true);
        jLNovosItensCodConsumivelNpcBanco.setVisible(true);        
        jLNovosItensCodEscudoNpcBanco.setVisible(true);
        
        // ComboBox
        jCBNovosItensCodArmaduraNpc.setVisible(true);
        jCBNovosItensCodArmaNpc.setVisible(true);
        jCBNovosItensCodConsumivelNpc.setVisible(true);
        jCBNovosItensCodEscudoNpc.setVisible(true);
                
        // jTextField
        jTFNovosItensVerificaCodArmadura.setVisible(true);
        jTFNovosItensVerificaCodArma.setVisible(true);
        jTFNovosItensVerificaCodConsumivel.setVisible(true);
        jTFNovosItensVerificaCodEscudo.setVisible(true);
        
        jTFNovosItensCodigoNpc.setVisible(true);
        jTFNovosItensCodArmadura.setVisible(true);
        jTFNovosItensCodArma.setVisible(true);
        jTFNovosItensCodConsumivel.setVisible(true);
        jTFNovosItensCodEscudo.setVisible(true);
        
    }
    
    // Mostra Atributos formulário Npcs em aba Cadastrar
    public void MostrarComponentesAtributos(java.awt.event.ActionEvent evt) {

        // Atributos
        jBAtualizarAtributos.setVisible(true);
        jLAtributosNpc.setVisible(true);

        jLRaca.setVisible(true);
        jCBRaca.setVisible(true);
        jCBRaca.setEnabled(false);

        jLClasse.setVisible(true);
        jCBClasse.setVisible(true);
        jCBClasse.setEnabled(false);

        jLForca.setVisible(true);
        jTFForca.setVisible(true);

        jLDestreza.setVisible(true);
        jTFDestreza.setVisible(true);

        jLConstituicao.setVisible(true);
        jTFConstituicao.setVisible(true);

        jLInteligencia.setVisible(true);
        jTFInteligencia.setVisible(true);

        jLSabedoria.setVisible(true);
        jTFSabedoria.setVisible(true);

        jLFortitude.setVisible(true);
        jTFFortitude.setVisible(true);

        jLClassedeArmadura.setVisible(true);
        jTFClassedeArmadura.setVisible(true);

        jLBasedeAtaque.setVisible(true);
        jTFBasedeAtaque.setVisible(true);

        jLPontosdeVida.setVisible(true);
        jTFPontosdeVida.setVisible(true);

        jLIniciativa.setVisible(true);
        jTFIniciativa.setVisible(true);

        jLVontade.setVisible(true);
        jTFVontade.setVisible(true);

        jLReflexos.setVisible(true);
        jTFReflexos.setVisible(true);

        jLCarisma.setVisible(true);
        jTFCarisma.setVisible(true);
        
    }
    
    // Mostra Itens formulário Npcs em aba Cadastrar
    public void MostrarComponentesItens(java.awt.event.ActionEvent evt){
    
        // Itens
        jBAtualizarItens.setVisible(true);
        jLItens.setVisible(true);
        jLArmaNpc.setVisible(true);
        jLArmaduraNpc.setVisible(true);
        jLConsumivelNpc.setVisible(true);
        jLEscudoNpc.setVisible(true);
        jLQuantidadeItensNpc.setVisible(true);        
        
        // Armaduras
        jCBAdicionarItemArmadura.setSelected(false);
        jCBArmaduraNpc.setEnabled(false);
        jTFQuantidadeArmaduraNpc.setEditable(false);
        
        jCBAdicionarItemArmadura.setVisible(true);
        jCBArmaduraNpc.setVisible(true);
        jTFQuantidadeArmaduraNpc.setVisible(true);
    
        // Armas
        jCBAdicionarItemArma.setSelected(false);
        jCBArmaNpc.setEnabled(false);
        jTFQuantidadeArmaNpc.setEditable(false);
        
        jCBAdicionarItemArma.setVisible(true);
        jCBArmaNpc.setVisible(true);
        jTFQuantidadeArmaNpc.setVisible(true);
    
        // Consumiveis
        jCBAdicionarItemConsumivel.setSelected(false);
        jCBConsumivelNpc.setEnabled(false);
        jTFQuantidadeConsumivelNpc.setEditable(false);
        
        jCBAdicionarItemConsumivel.setVisible(true);
        jCBConsumivelNpc.setVisible(true);
        jTFQuantidadeConsumivelNpc.setVisible(true);
    
        // Escudos
        jCBAdicionarItemEscudo.setSelected(false);
        jCBEscudoNpc.setEnabled(false);
        jTFQuantidadeEscudoNpc.setEditable(false);
        
        jCBAdicionarItemEscudo.setVisible(true);
        jCBEscudoNpc.setVisible(true);
        jTFQuantidadeEscudoNpc.setVisible(true);
        
    } 
    
    // Carrega ComboBox dos Itens em aba Cadastrar
    public void AddItensComboItensNpcsAbaCadastrar(java.awt.event.ActionEvent evt) throws SQLException{
        
        GenericDAO gDao = new GenericDAO();

            // Carrega ComboBox Armaduras    
            List<Object> listarArmaduras = null;
                try {
                    listarArmaduras = gDao.listar(Armaduras.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                        Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarArmaduras) {
                    Armaduras armaduranpc = (Armaduras) obj2;
                    jCBArmaduraNpc.addItem(armaduranpc.getNome_armadura());
                }
            // Fim listar Armaduras 

            // Carrega ComboBox Armas    
            List<Object> listarArmas = null;
                try {
                    listarArmas = gDao.listar(Armas.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarArmas) {
                    Armas armanpc = (Armas) obj2;
                    jCBArmaNpc.addItem(armanpc.getNome_arma());
                }   
            // Fim listar Armas         

            // Carrega ComboBox Consumiveis
            List<Object> listarConsumiveis = null;
                try {
                    listarConsumiveis = gDao.listar(Consumiveis.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                        Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarConsumiveis) {
                    Consumiveis consumivelnpc = (Consumiveis) obj2;
                    jCBConsumivelNpc.addItem(consumivelnpc.getNome_consumivel());
                }    
            // Fim listar Consumiveis        

            // Carrega ComboBox Escudos
            List<Object> listarEscudos = null;
                try {
                    listarEscudos = gDao.listar(Escudos.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                        Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarEscudos) {
                    Escudos escudonpc = (Escudos) obj2;
                    jCBEscudoNpc.addItem(escudonpc.getNome_escudo());
                }
            // Fim listar Escudos

    } 
    
    // Carrega ComboBox dos Atributos em aba Cadastrar
    public void AddItensComboAtributosNpcsAbaCadastrar(java.awt.event.ActionEvent evt) throws SQLException{
        
        GenericDAO gDao = new GenericDAO();
        
            // Carrega ComboBox Raças    
            List<Object> listarRacas = null;
                try {
                    listarRacas = gDao.listar(Raca.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                        Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarRacas) {
                    Raca racanpc = (Raca) obj2;
                    jCBRaca.addItem(racanpc.getNome_raca());
                }
            // Fim listar Raças

            // Carrega ComboBox Classes    
            List<Object> listarClasses = null;
                try {
                    listarClasses = gDao.listar(Classes.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarClasses) {
                    Classes classenpc = (Classes) obj2;
                    jCBClasse.addItem(classenpc.getNome_classe());
                }
            // Fim listar Classes  
                
    }
    
    // Limpa todos os campos em aba Cadastrar
    public void LimparCamposAbaCadastrar(java.awt.event.ActionEvent evt){
    
        // Npcs    
        JTFNomeNpc.setText("");
        jTFCodigoNpc.setText("");
        jCBTipoNpc.setSelectedIndex(-1);
        jTFIndexTipoNpc.setText("");
        jTADescricaoNpc.setText("");
    
        // Falas
        jTAFalaNpc.setText("");
        jTARespostaPositiva.setText("");
        jTARespostaNegativa.setText("");    
    
        // Armaduras
        jCBArmaduraNpc.setEnabled(false);
        jCBAdicionarItemArmadura.setSelected(false);
        jCBArmaduraNpc.setSelectedIndex(-1);
        jTFCodArmadura.setText("");
        jTFQuantidadeArmaduraNpc.setText("");
        jTFQuantidadeArmaduraNpc.setEditable(false);
    
        // Armas
        jCBArmaNpc.setEnabled(false);
        jCBAdicionarItemArma.setSelected(false);
        jCBArmaNpc.setSelectedIndex(-1);
        jTFCodArma.setText("");
        jTFQuantidadeArmaNpc.setText("");
        jTFQuantidadeArmaNpc.setEditable(false);
    
        // Consumiveis
        jCBConsumivelNpc.setEnabled(false);
        jCBAdicionarItemConsumivel.setSelected(false);
        jCBConsumivelNpc.setSelectedIndex(-1);
        jTFCodConsumivel.setText(""); 
        jTFQuantidadeConsumivelNpc.setText("");
        jTFQuantidadeConsumivelNpc.setEditable(false);
    
        // Escudos
        jCBEscudoNpc.setEnabled(false);
        jCBAdicionarItemEscudo.setSelected(false);
        jCBEscudoNpc.setSelectedIndex(-1);
        jTFCodEscudo.setText("");
        jTFQuantidadeEscudoNpc.setText(""); 
        jTFQuantidadeEscudoNpc.setEditable(false);

        // Atributos
        jCBRaca.setEnabled(false);
        jCBRaca.setSelectedIndex(-1);
        jTFCodRaca.setText("");
        jCBClasse.setEnabled(false);
        jCBClasse.setSelectedIndex(-1);
        jTFCodClasse.setText("");

        jTFForca.setText("");
        jTFDestreza.setText("");
        jTFConstituicao.setText("");
        jTFInteligencia.setText("");
        jTFSabedoria.setText("");
        jTFFortitude.setText("");
        jTFClassedeArmadura.setText("");      
        jTFBasedeAtaque.setText("");        
        jTFPontosdeVida.setText("");        
        jTFIniciativa.setText("");        
        jTFVontade.setText("");        
        jTFReflexos.setText("");       
        jTFCarisma.setText("");        
    
    }
    
    // Limpa campos de código em aba Cadastrar
    public void LimparCamposCodigoAbaCadastrar(java.awt.event.ActionEvent evt){
    
        // Itens
        
        // Armaduras 
        jTFCodArmadura.setText("");
    
        // Armas
        jTFCodArma.setText("");
    
        // Consumiveis
        jTFCodConsumivel.setText(""); 
    
        // Escudos
        jTFCodEscudo.setText("");
    
        // Atributos    
        jTFCodRaca.setText("");
        jTFCodClasse.setText("");
        
    }
         
    // Remove itens de ComboBox Atributos e Itens em aba Cadastrar
    public void RemoveItensComboAbaCadastrar(java.awt.event.ActionEvent evt){
        
        // Atributos
        jCBRaca.removeAllItems();
        jCBClasse.removeAllItems();
        
        // Itens
        jCBArmaduraNpc.removeAllItems();
        jCBArmaNpc.removeAllItems();
        jCBConsumivelNpc.removeAllItems();
        jCBEscudoNpc.removeAllItems();
        
    }
    
    // ----- Aba Adicionar Novos Itens ----- //
    
    // Carrega ComboBox em aba Adicionar Novos Itens 
    public void AddItensComboAbaAdicionarNovosItens(java.awt.event.ActionEvent evt) throws SQLException{
    
        GenericDAO gDao = new GenericDAO();

            // Carrega ComboBox Armaduras    
            List<Object> listarArmaduras = null;
                try {
                    listarArmaduras = gDao.listar(Armaduras.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                        Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarArmaduras) {
                    Armaduras armaduranpc = (Armaduras) obj2;
                    jCBNovosItensArmaduraNpc.addItem(armaduranpc.getNome_armadura());
                }
            // Fim listar Armaduras 

            // Carrega ComboBox Armas    
            List<Object> listarArmas = null;
                try {
                    listarArmas = gDao.listar(Armas.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarArmas) {
                    Armas armanpc = (Armas) obj2;
                    jCBNovosItensArmaNpc.addItem(armanpc.getNome_arma());
                }   
            // Fim listar Armas         

            // Carrega ComboBox Consumiveis
            List<Object> listarConsumiveis = null;
                try {
                    listarConsumiveis = gDao.listar(Consumiveis.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                        Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarConsumiveis) {
                    Consumiveis consumivelnpc = (Consumiveis) obj2;
                    jCBNovosItensConsumivelNpc.addItem(consumivelnpc.getNome_consumivel());
                }    
            // Fim listar Consumiveis        

            // Carrega ComboBox Escudos
            List<Object> listarEscudos = null;
                try {
                    listarEscudos = gDao.listar(Escudos.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                        Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarEscudos) {
                    Escudos escudonpc = (Escudos) obj2;
                    jCBNovosItensEscudoNpc.addItem(escudonpc.getNome_escudo());
                }
            // Fim listar Escudos   
    }
        
    // Limpa os campos jTF e seleciona index -1 em ComboBox na aba Adicinar Novos Itens
    public void LimparCamposAbaAdicionarNovosItens(java.awt.event.ActionEvent evt){
        
        jCBNovosItensNomeNpc.setSelectedIndex(-1);
        jCBNovosItensArmaduraNpc.setSelectedIndex(-1);
        jCBNovosItensArmaNpc.setSelectedIndex(-1);
        jCBNovosItensConsumivelNpc.setSelectedIndex(-1);
        jCBNovosItensEscudoNpc.setSelectedIndex(-1);
        
        jCBNovosItensCodArmaduraNpc.removeAllItems();
        jCBNovosItensCodArmaNpc.removeAllItems();
        jCBNovosItensCodConsumivelNpc.removeAllItems();
        jCBNovosItensCodEscudoNpc.removeAllItems();
        
        jTFNovosItensCodigoNpc.setText("");
        jTFNovosItensTipoNpc.setText("");
        
        jTFNovosItensCodArmadura.setText("");
        jTFNovosItensQuantidadeArmaduraNpc.setText("");

        jTFNovosItensCodArma.setText("");
        jTFNovosItensQuantidadeArmaNpc.setText("");
                
        jTFNovosItensCodConsumivel.setText("");
        jTFNovosItensQuantidadeConsumivelNpc.setText("");
                 
        jTFNovosItensCodEscudo.setText("");
        jTFNovosItensQuantidadeEscudoNpc.setText("");
        
        // CheckBox
        jCBNovosItensAdicionarArmadura.setSelected(false);
        jCBNovosItensAdicionarArma.setSelected(false);
        jCBNovosItensAdicionarConsumivel.setSelected(false);
        jCBNovosItensAdicionarEscudo.setSelected(false);
        
        jTFNovosItensVerificaCodArmadura.setText("");
        jTFNovosItensVerificaCodArma.setText("");
        jTFNovosItensVerificaCodConsumivel.setText("");
        jTFNovosItensVerificaCodEscudo.setText("");
        
        jTFNovosItensQuantidadeArmaduraBanco.setText("");
        jTFNovosItensQuantidadeArmaBanco.setText("");
        jTFNovosItensQuantidadeConsumivelBanco.setText("");
        jTFNovosItensQuantidadeEscudoBanco.setText("");
        
    }
        
    // Remove itens do ComboBox na aba Adicionar Novos Itens
    public void RemoverItensComboAbaAdicionarNovosItens(java.awt.event.ActionEvent evt){
          
        // Itens    
        jCBNovosItensArmaduraNpc.removeAllItems();
        jCBNovosItensArmaNpc.removeAllItems();
        jCBNovosItensConsumivelNpc.removeAllItems();
        jCBNovosItensEscudoNpc.removeAllItems();

    }
    
    public void BloquearComponentesAbaAdicionarNovosItens(java.awt.event.ActionEvent evt){
    
        jCBNovosItensAdicionarArmadura.setEnabled(false);
        jCBNovosItensAdicionarArma.setEnabled(false);
        jCBNovosItensAdicionarConsumivel.setEnabled(false);
        jCBNovosItensAdicionarEscudo.setEnabled(false);
        
        jCBNovosItensArmaduraNpc.setEnabled(false);
        jCBNovosItensArmaNpc.setEnabled(false);        
        jCBNovosItensConsumivelNpc.setEnabled(false);    
        jCBNovosItensEscudoNpc.setEnabled(false);
                
        //jTFNovosItensQuantidadeArmaduraNpc.setEnabled(false);
        //jTFNovosItensQuantidadeArmaNpc.setEnabled(false);     
        //jTFNovosItensQuantidadeConsumivelNpc.setEnabled(false);        
        //jTFNovosItensQuantidadeEscudoNpc.setEnabled(false);       
                
    }
    
    // ----- Aba Adicionar Nova Fala ----- //
    
    // Limpa os campos jTF e seleciona index -1 em ComboBox na aba Adicinar Nova Fala
    public void LimparCamposAbaAdicionarNovaFala(java.awt.event.ActionEvent evt){
        
        jCBNovaFalaNomeNpc.setSelectedIndex(-1);
        jTFNovaFalaCodigoNpc.setText("");
        
        jTFNovaFalaTipoNpc.setText("");
        
        jTANovaFalaNpc.setText("");
        jTANovaFalaRespostaNegativa.setText("");
        jTANovaFalaRespostaPositiva.setText("");

    }

    // Remove nomes dos Npcs do ComboBox na aba Adicionar Nova Fala
    public void RemoverItensComboAbaAdicionarNovaFala(java.awt.event.ActionEvent evt){
        
        // Npcs
        jCBNovaFalaNomeNpc.removeAllItems();
        
    }
    
    // ----- ----- ----- ----- ----- //

    // Cadastra Npcs Combatentes 
    public void CadastrarNpcCombatente (java.awt.event.ActionEvent evt) throws ClassNotFoundException, 
        IllegalArgumentException, IllegalAccessException, NoSuchMethodException, 
            InvocationTargetException, InstantiationException{
        
        try {    
        
            Npcs npc = new Npcs();     
            Falas fala = new Falas();
            NpcsFalas npcfala = new NpcsFalas();
            
            Personagens npcpersonagem = new Personagens();
            NpcsCombatentes npccombate = new NpcsCombatentes();

            ArmadurasNpcs armaduranpc = new ArmadurasNpcs();
            ArmasNpcs armanpc = new ArmasNpcs();
            ConsumiveisNpcs consumivelnpc = new ConsumiveisNpcs();
            EscudosNpcs escudonpc = new EscudosNpcs();
            
            GenericDAO gDao = new GenericDAO();
            
            // Cadastra base NPCS    
            npc.setNome_npc(JTFNomeNpc.getText());
            npc.setTipo_npc(String.valueOf(jCBTipoNpc.getSelectedItem()));
            npc.setDescricao_npc(jTADescricaoNpc.getText());
            gDao.adicionar(npc);

            // Informa o ultimo codigo_npc
            int codMaxNPC = gDao.codigoMax(Npcs.class);
            System.out.println(codMaxNPC);

            // Cadastra fala NPC 
            fala.setDescricao_fala(jTAFalaNpc.getText());
            fala.setResposta_positivo_fala(jTARespostaPositiva.getText());
            fala.setResposta_negativo_fala(jTARespostaNegativa.getText());
            gDao.adicionar(fala);

            // Informa o ultimo codigo_fala
            int codMaxFala = gDao.codigoMax(Falas.class);
            System.out.println(codMaxFala);

            // Cadastra N/N NpcsFalas
            npcfala.setCodigo_fala(codMaxFala);
            npcfala.setCodigo_npc(codMaxNPC);
            gDao.adicionar(npcfala);
            
            // Cadastra Npc em tabela Personagem
            // Todos NpcsCombatentes se tornam Personagens
            npcpersonagem.setNome_personagem(JTFNomeNpc.getText());            
            npcpersonagem.setCodigo_raca(Integer.parseInt(jTFCodRaca.getText()));            
            npcpersonagem.setCodigo_classe(Integer.parseInt(jTFCodClasse.getText()));            
            npcpersonagem.setForca_personagem(Integer.parseInt(jTFForca.getText()));            
            npcpersonagem.setDestreza_personagem(Integer.parseInt(jTFDestreza.getText()));            
            npcpersonagem.setContituicao_personagem(Integer.parseInt(jTFConstituicao.getText()));            
            npcpersonagem.setInteligencia_personagem(Integer.parseInt(jTFInteligencia.getText()));            
            npcpersonagem.setSabedoria_personagem(Integer.parseInt(jTFSabedoria.getText()));           
            npcpersonagem.setFortitude_personagem(Integer.parseInt(jTFFortitude.getText()));            
            npcpersonagem.setClasse_armadura_personagem(Integer.parseInt(jTFClassedeArmadura.getText()));            
            npcpersonagem.setBase_ataque_personagem(Integer.parseInt(jTFBasedeAtaque.getText()));            
            npcpersonagem.setPontos_vida_personagem(Integer.parseInt(jTFPontosdeVida.getText()));            
            npcpersonagem.setIniciativa_personagem(Integer.parseInt(jTFIniciativa.getText()));            
            npcpersonagem.setVontade_personagem(Integer.parseInt(jTFVontade.getText()));            
            npcpersonagem.setReflexos_personagem(Integer.parseInt(jTFReflexos.getText()));            
            npcpersonagem.setCarisma_personagem(Integer.parseInt(jTFCarisma.getText()));            
            gDao.adicionar(npcpersonagem);
            
            // Informa o ultimo codigo_personagem
            int codMaxPersonagem = gDao.codigoMax(Personagens.class);
            System.out.println(codMaxPersonagem);

            // Cadastra NpcsCombatentes
            npccombate.setCodigo_npc(codMaxNPC);
            npccombate.setCodigo_personagem(codMaxPersonagem);
            gDao.adicionar(npccombate);
            
            // Cadastra ArmadurasNpcs
            if (jCBAdicionarItemArmadura.isSelected()){
                armaduranpc.setCodigo_npc(codMaxNPC);
                armaduranpc.setCodigo_armadura(Integer.parseInt(jTFCodArmadura.getText()));
                armaduranpc.setQuantidade_armadura(Integer.parseInt(jTFQuantidadeArmaduraNpc.getText()));
                gDao.adicionar(armaduranpc);
            }
            // Cadastra ArmaNpcs
            if (jCBAdicionarItemArma.isSelected()){
                armanpc.setCodigo_npc(codMaxNPC);                
                armanpc.setCodigo_arma(Integer.parseInt(jTFCodArma.getText()));
                armanpc.setQuantidade_arma(Integer.parseInt(jTFQuantidadeArmaNpc.getText()));
                gDao.adicionar(armanpc);
            }
            // Cadastra ConsumiveisNpcs
            if (jCBAdicionarItemConsumivel.isSelected()){                
                consumivelnpc.setCodigo_npc(codMaxNPC);    
                consumivelnpc.setCodigo_consumivel(Integer.parseInt(jTFCodConsumivel.getText()));
                consumivelnpc.setQuantidade_consumivel(Integer.parseInt(jTFQuantidadeConsumivelNpc.getText()));
                gDao.adicionar(consumivelnpc);     
            }
            // Cadastra EscudosNpcs
            if (jCBAdicionarItemEscudo.isSelected()){                
                escudonpc.setCodigo_npc(codMaxNPC); 
                escudonpc.setCodigo_escudo(Integer.parseInt(jTFCodEscudo.getText()));
                escudonpc.setQuantidade_escudos(Integer.parseInt(jTFQuantidadeEscudoNpc.getText()));
                gDao.adicionar(escudonpc);      
            }
            
            JOptionPane.showMessageDialog(null, "NPC Combatente Cadastrado!");
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    // Cadastra Npcs Comerciantes e Coletáveis
    public void CadastrarNpcComercianteColetavel(java.awt.event.ActionEvent evt) throws ClassNotFoundException, 
            IllegalArgumentException, IllegalAccessException, NoSuchMethodException, 
                InvocationTargetException, InstantiationException{
    
        try {
            
            Npcs npc = new Npcs();
            Falas fala = new Falas(); 
            NpcsFalas npcfala = new NpcsFalas();           
            
            ArmadurasNpcs armaduranpc = new ArmadurasNpcs();
            ArmasNpcs armanpc = new ArmasNpcs();
            ConsumiveisNpcs consumivelnpc = new ConsumiveisNpcs();
            EscudosNpcs escudonpc = new EscudosNpcs();
            
            GenericDAO gDao = new GenericDAO();
            
            // Cadastra base NPCS    
            npc.setNome_npc(JTFNomeNpc.getText());
            npc.setTipo_npc(String.valueOf(jCBTipoNpc.getSelectedItem()));
            npc.setDescricao_npc(jTADescricaoNpc.getText());
            gDao.adicionar(npc);

            // Informa o ultimo codigo_npc
            int codMaxNPC = gDao.codigoMax(Npcs.class);
            System.out.println(codMaxNPC);

            // Cadastra fala NPC 
            fala.setDescricao_fala(jTAFalaNpc.getText());
            fala.setResposta_positivo_fala(jTARespostaPositiva.getText());
            fala.setResposta_negativo_fala(jTARespostaNegativa.getText());
            gDao.adicionar(fala);

            // Informa o ultimo codigo_fala
            int codMaxFala = gDao.codigoMax(Falas.class);
            System.out.println(codMaxFala);

            // Cadastra N/N NpcsFalas
            npcfala.setCodigo_fala(codMaxFala);
            npcfala.setCodigo_npc(codMaxNPC);
            gDao.adicionar(npcfala);
                
            // Cadastra ArmadurasNpcs
            if (jCBAdicionarItemArmadura.isSelected()){
                armaduranpc.setCodigo_npc(codMaxNPC);
                armaduranpc.setCodigo_armadura(Integer.parseInt(jTFCodArmadura.getText()));
                armaduranpc.setQuantidade_armadura(Integer.parseInt(jTFQuantidadeArmaduraNpc.getText()));
                gDao.adicionar(armaduranpc);
            }
            // Cadastra ArmaNpcs
            if (jCBAdicionarItemArma.isSelected()){
                armanpc.setCodigo_npc(codMaxNPC);                
                armanpc.setCodigo_arma(Integer.parseInt(jTFCodArma.getText()));
                armanpc.setQuantidade_arma(Integer.parseInt(jTFQuantidadeArmaNpc.getText()));
                gDao.adicionar(armanpc);
            }
            // Cadastra ConsumiveisNpcs
            if (jCBAdicionarItemConsumivel.isSelected()){                
                consumivelnpc.setCodigo_npc(codMaxNPC);    
                consumivelnpc.setCodigo_consumivel(Integer.parseInt(jTFCodConsumivel.getText()));
                consumivelnpc.setQuantidade_consumivel(Integer.parseInt(jTFQuantidadeConsumivelNpc.getText()));
                gDao.adicionar(consumivelnpc);     
            }
            // Cadastra EscudosNpcs
            if (jCBAdicionarItemEscudo.isSelected()){                
                escudonpc.setCodigo_npc(codMaxNPC); 
                escudonpc.setCodigo_escudo(Integer.parseInt(jTFCodEscudo.getText()));
                escudonpc.setQuantidade_escudos(Integer.parseInt(jTFQuantidadeEscudoNpc.getText()));
                gDao.adicionar(escudonpc);      
            }
      
            if (jTFIndexTipoNpc.getText().equals("1")){
                JOptionPane.showMessageDialog(null, "Npc Comerciante cadastrado!");
            }
            else {
                JOptionPane.showMessageDialog(null, "Npc Coletável cadastrado!");
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    // Cadastra Npcs Guias ou Missão
    public void CadastrarNpcGuiaMissao(java.awt.event.ActionEvent evt) throws ClassNotFoundException, 
            IllegalArgumentException, IllegalAccessException, NoSuchMethodException, 
                InvocationTargetException, InstantiationException {
        
        try {
            
            Npcs npc = new Npcs();
            Falas fala = new Falas();
            NpcsFalas npcfala = new NpcsFalas();
            NpcsCombatentes npccombate = new NpcsCombatentes();        

            GenericDAO gDao = new GenericDAO();
            
            // Cadastra base NPCS    
            npc.setNome_npc(JTFNomeNpc.getText());
            npc.setTipo_npc(String.valueOf(jCBTipoNpc.getSelectedItem()));
            npc.setDescricao_npc(jTADescricaoNpc.getText());
            gDao.adicionar(npc);

            // Informa o ultimo codigo_npc
            int codMaxNPC = gDao.codigoMax(Npcs.class);
            System.out.println(codMaxNPC);

            // Cadastra fala NPC 
            fala.setDescricao_fala(jTAFalaNpc.getText());
            fala.setResposta_positivo_fala(jTARespostaPositiva.getText());
            fala.setResposta_negativo_fala(jTARespostaNegativa.getText());
            gDao.adicionar(fala);

            // Informa o ultimo codigo_fala
            int codMaxFala = gDao.codigoMax(Falas.class);
            System.out.println(codMaxFala);

            // Cadastra N/N NpcsFalas
            npcfala.setCodigo_fala(codMaxFala);
            npcfala.setCodigo_npc(codMaxNPC);
            gDao.adicionar(npcfala);
            
            if (jTFIndexTipoNpc.getText().equals("3")){
                JOptionPane.showMessageDialog(null, "Npc Guia cadastrado!");
            }
            else {
                JOptionPane.showMessageDialog(null, "Npc Missão cadastrado!");
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    // Cadastra uma Nova Fala para um Npc
    public void CadastrarNovaFala(java.awt.event.ActionEvent evt){

        try {

            Falas fala = new Falas();
            NpcsFalas npcfala = new NpcsFalas();

            GenericDAO gDao = new GenericDAO();

            // Cadastra a fala
            fala.setDescricao_fala(jTANovaFalaNpc.getText());
            fala.setResposta_positivo_fala(jTANovaFalaRespostaPositiva.getText());
            fala.setResposta_negativo_fala(jTANovaFalaRespostaNegativa.getText());
            gDao.adicionar(fala);

            // Retorna o código da fala cadastrada acima
            int codMaxFala = gDao.codigoMax(Falas.class);
            System.out.println(codMaxFala);

            // Cadastra NpcsFalas
            npcfala.setCodigo_fala(codMaxFala);
            npcfala.setCodigo_npc(Integer.parseInt(jTFNovaFalaCodigoNpc.getText()));
            gDao.adicionar(npcfala);

            // Limpa os campos
            LimparCamposAbaAdicionarNovaFala(evt); // Chama evt LimparCamposAbaAdicionarNovaFala

            JOptionPane.showMessageDialog(null, "Fala adicionada!");

        } catch (SQLException | ClassNotFoundException | IllegalArgumentException | IllegalAccessException | NoSuchMethodException | InvocationTargetException | InstantiationException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    } 
    
    // Botão Cadastrar em aba Cadastrar
    private void jBCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCadastrarActionPerformed

        try {
            
            // Verifica se Npc é do tipo Combatente 
            while (jTFIndexTipoNpc.getText().equals("0")) {
                
                // Verifica se CheckBox Armadura esta selecionado
                if (jCBAdicionarItemArmadura.isSelected()){
                    if (jTFCodArmadura.getText().equals("") | jTFQuantidadeArmaduraNpc.getText().equals("")){  
                        JOptionPane.showMessageDialog(null, "Selecione uma Armadura e sua quantidade!");
                        break;
                    }
                }
                
                // Verifica se CheckBox Arma esta selecionado
                if (jCBAdicionarItemArma.isSelected()){
                    if (jTFCodArma.getText().equals("") | jTFQuantidadeArmaNpc.getText().equals("")){
                        JOptionPane.showMessageDialog(null, "Selecione uma Arma e sua quantidade!");
                        break;
                    }
                }
                
                // Verifica se CheckBox Consumivel esta selecionado
                if (jCBAdicionarItemConsumivel.isSelected()){
                    if (jTFCodConsumivel.getText().equals("") | jTFQuantidadeConsumivelNpc.getText().equals("")){
                        JOptionPane.showMessageDialog(null, "Selecione uma Consumivel e sua quantidade!");
                        break;
                    } 
                }
                
                // Verifica se CheckBox Escudo esta selecionado
                if (jCBAdicionarItemEscudo.isSelected()){
                    if (jTFCodEscudo.getText().equals("") | jTFQuantidadeEscudoNpc.getText().equals("")){
                        JOptionPane.showMessageDialog(null, "Selecione uma Escudo e sua quantidade!");
                        break;
                    }
                }
                
            // Verifica se campos estão em branco
            if (JTFNomeNpc.getText().equals("") | jTADescricaoNpc.getText().equals("") | jTFIndexTipoNpc.getText().equals("") 
                | jTAFalaNpc.getText().equals("") | jTARespostaPositiva.getText().equals("") 
                 | jTARespostaNegativa.getText().equals("")
                  |jTFCodRaca.getText().equals("") | jTFCodClasse.getText().equals("") | jTFForca.getText().equals("")
                   | jTFDestreza.getText().equals("") | jTFConstituicao.getText().equals("") |  jTFInteligencia.getText().equals("") 
                    | jTFSabedoria.getText().equals("") | jTFFortitude.getText().equals("") | jTFClassedeArmadura.getText().equals("")
                     | jTFBasedeAtaque.getText().equals("") | jTFPontosdeVida.getText().equals("") | jTFIniciativa.getText().equals("")
                      | jTFVontade.getText().equals("") | jTFReflexos.getText().equals("") | jTFCarisma.getText().equals("")){ 
                        
                            JOptionPane.showMessageDialog(null, "Preencha todos os campos!");
                            break;
            
                } // Fim if - Verifica se campos estão em branco
            
                else { // Se todos os campos estiverem preenchidos, o cadastro é efetuado
                
                // Chama evt CadastrarNpcCombatente
                CadastrarNpcCombatente(evt);
                
                formWindowOpened(null); // Chama evt formWindowOpened
                
                }   // Fim else - Cadastro Npc Combatente     

            } // Fim if - Verifica se Npc é do tipo Combatente


            // Verifica se Npc é do tipo Comerciante ou Coletável
            while (jTFIndexTipoNpc.getText().equals("1") | jTFIndexTipoNpc.getText().equals("2")) {
                    
                // Verifica se CheckBox Armadura esta selecionado
                if (jCBAdicionarItemArmadura.isSelected()){  
                  if (jTFCodArmadura.getText().equals("") | jTFQuantidadeArmaduraNpc.getText().equals("")){ 
                        JOptionPane.showMessageDialog(null, "Selecione uma Armadura e sua quantidade!");
                        break;
                  }       
                }
                // Verifica se CheckBox Arma esta selecionado
                if (jCBAdicionarItemArma.isSelected()){
                    if (jTFCodArma.getText().equals("") | jTFQuantidadeArmaNpc.getText().equals("")){
                        JOptionPane.showMessageDialog(null, "Selecione uma Arma e sua quantidade!");
                        break;
                    }
                }
                // Verifica se CheckBox Consumivel esta selecionado
                if (jCBAdicionarItemConsumivel.isSelected()){
                    if (jTFCodConsumivel.getText().equals("") | jTFQuantidadeConsumivelNpc.getText().equals("")){
                        JOptionPane.showMessageDialog(null, "Selecione uma Consumivel e sua quantidade!");
                        break;
                    }
                }
                // Verifica se CheckBox Escudo esta selecionado
                if (jCBAdicionarItemEscudo.isSelected()){
                    if (jTFCodEscudo.getText().equals("") | jTFQuantidadeEscudoNpc.getText().equals("")){
                        JOptionPane.showMessageDialog(null, "Selecione uma Escudo e sua quantidade!");
                        break;
                    }
                }
                // Verifica se campos estão em branco
                if (JTFNomeNpc.getText().equals("") | jTADescricaoNpc.getText().equals("") | jTFIndexTipoNpc.getText().equals("") 
                 | jTAFalaNpc.getText().equals("") | jTARespostaPositiva.getText().equals("") 
                  | jTARespostaNegativa.getText().equals("")){
                    
                    JOptionPane.showMessageDialog(null, "Preencha todos os campos!");
                    break;
                    
                }   // Fim if - Verifica se campos estão em branco
                
                else { // Se todos os campos estiverem preenchidos, o cadastro é efetuado 
                    
                    // Chama evt CadastrarNpcComercianteColetavel
                    CadastrarNpcComercianteColetavel(evt);
                    
                    formWindowOpened(null); // Chama evt formWindowOpened
                    
                } // Fim else - Cadastro Npc Comerciante ou Coletável
                
            }   // Fim if - Verifica se Npc é do tipo Comerciante ou Coletável
            
    
            // Verifica se tipo Npc é Guia ou Missão
            while (jTFIndexTipoNpc.getText().equals("3") | jTFIndexTipoNpc.getText().equals("4")){

                // Verifica se campos estão em branco
                if (JTFNomeNpc.getText().equals("") | jTADescricaoNpc.getText().equals("") | jTFIndexTipoNpc.getText().equals("") 
                    | jTAFalaNpc.getText().equals("") | jTARespostaPositiva.getText().equals("") | jTARespostaNegativa.getText().equals("")) {
                 
                        JOptionPane.showMessageDialog(null, "Preencha todos os campos!");
                        break;
            
                } // Fim if - Verifica se campos estão em branco
                
                else { // Se todos os campos estiverem preenchidos, o cadastro é efetuado
                        
                    CadastrarNpcGuiaMissao(evt);    // Chama evt CadastrarNpcGuiaMissao
                    
                    formWindowOpened(null); // Chama evt formWindowOpened
                    
                }   // Fim else - Cadastro Npc Guia ou Missão 
                
            }   // Fim if - Verifica se tipo Npc é Guia ou Missão
            
        } catch (IllegalArgumentException | ClassNotFoundException | IllegalAccessException | NoSuchMethodException | InvocationTargetException | InstantiationException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jBCadastrarActionPerformed
    
    // Quando o formulário for aberto/chamado
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        try {

            //OcultarComponentesCodigoTodasAbas(null);
            
            GenericDAO gDao = new GenericDAO();

            // ----- ----- ----- ----- //
            
            LimparCamposAbaCadastrar(null);  // Chama evt LimparCampos
            RemoveItensComboAbaCadastrar(null);  // Chama evt RemoveItensComboAbaCadastrar
            
            // Oculta campos atributos e itens ao iniciar formulário
            if (jTFIndexTipoNpc.getText().equals("")) {
                OcultarComponentesAtributos(null);
                OcultarComponentesItens(null);
            }     
            
            int codMaxNPC = gDao.codigoMax(Npcs.class);

            // Calculo para saber o codigo_npc atual
            int codnpc = (1);
            codnpc = (codMaxNPC + codnpc);

            // Mostra o codigo_npc que vai ser cadastrado em componente jTFCodigoNpc
            jTFCodigoNpc.setText(String.valueOf(codnpc));
            
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formWindowOpened
      
    // Quando o item do ComboBox jCBTipoNpc é alterado em aba Cadastrar
    private void jCBTipoNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBTipoNpcItemStateChanged

        try {

            GenericDAO gDao = new GenericDAO();

            // Passa o index do combobox tipo Npc para um edit
            jTFIndexTipoNpc.setText(String.valueOf(jCBTipoNpc.getSelectedIndex()));

            // Mostra atributos e itens
            if (jTFIndexTipoNpc.getText().equals("0")) {
                
                MostrarComponentesAtributos(null);
                MostrarComponentesItens(null);

            } else  { // Senão oculta os atributos e itens
                OcultarComponentesAtributos(null);
                OcultarComponentesItens(null);
            }
            
            if (jTFIndexTipoNpc.getText().equals("1") | jTFIndexTipoNpc.getText().equals("2"))  {

                MostrarComponentesItens(null); // Chama evt MostrarComponentesItens
                
                // Seleciona index -1 em ComboBox
                // Itens
                jCBArmaduraNpc.setSelectedIndex(-1);
                jCBArmaNpc.setSelectedIndex(-1);
                jCBConsumivelNpc.setSelectedIndex(-1);
                jCBEscudoNpc.setSelectedIndex(-1);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBTipoNpcItemStateChanged
    
    // Busca atraves do nome_armadura o codigo_armadura e mostra em edit em aba Cadastrar
    private void jCBArmaduraNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBArmaduraNpcItemStateChanged
   
        try {    
        
            GenericDAO gDao = new GenericDAO();
            Armaduras armadura = new Armaduras();
        
            List<Object> ListarCodArmaduras = new ArrayList<>();

            armadura.setNome_armadura((String) jCBArmaduraNpc.getSelectedItem());

            ListarCodArmaduras = gDao.listar2(Armaduras.class, armadura);

            for (Object cod : ListarCodArmaduras) {
                Armaduras codarmadura = (Armaduras) cod;
                jTFCodArmadura.setText(String.valueOf(codarmadura.getCodigo_armadura()));
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBArmaduraNpcItemStateChanged
    
    // Busca atraves do nome_arma o codigo_arma e mostra em edit em aba Cadastrar
    private void jCBArmaNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBArmaNpcItemStateChanged

        try {    
        
            GenericDAO gDao = new GenericDAO();
            Armas arma = new Armas();
        
            List<Object> ListarCodArmas = new ArrayList<>();

            arma.setNome_arma((String) jCBArmaNpc.getSelectedItem());

            ListarCodArmas = gDao.listar2(Armas.class, arma);

            for (Object cod : ListarCodArmas) {
                Armas codarma = (Armas) cod;
                jTFCodArma.setText(String.valueOf(codarma.getCodigo_arma()));
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBArmaNpcItemStateChanged
    
    // Busca atraves do nome_consumivel o codigo_consumivel e mostra em edit em aba Cadastrar
    private void jCBConsumivelNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBConsumivelNpcItemStateChanged
    
        try {    
        
            GenericDAO gDao = new GenericDAO();
            Consumiveis consumivel = new Consumiveis();
        
            List<Object> ListarCodConsumiveis = new ArrayList<>();

            consumivel.setNome_consumivel((String) jCBConsumivelNpc.getSelectedItem());

            ListarCodConsumiveis = gDao.listar2(Consumiveis.class, consumivel);

            for (Object cod : ListarCodConsumiveis) {
                Consumiveis codconsumivel = (Consumiveis) cod;
                jTFCodConsumivel.setText(String.valueOf(codconsumivel.getCodigo_consumivel()));
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBConsumivelNpcItemStateChanged
    
    // Busca atraves do nome_escudo o codigo_escudo e mostra em edit em aba Cadastrar
    private void jCBEscudoNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBEscudoNpcItemStateChanged

        try {    
        
            GenericDAO gDao = new GenericDAO();
            Escudos escudo = new Escudos();
        
            List<Object> ListarCodEscudo = new ArrayList<>();

            escudo.setNome_escudo((String) jCBEscudoNpc.getSelectedItem());

            ListarCodEscudo = gDao.listar2(Escudos.class, escudo);

            for (Object cod : ListarCodEscudo) {
                Escudos codescudo = (Escudos) cod;
                jTFCodEscudo.setText(String.valueOf(codescudo.getCodigo_escudo()));
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBEscudoNpcItemStateChanged

    // Busca atraves de nome_raca o codigo_raca e mostra em edit em aba Cadastrar
    private void jCBRacaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBRacaItemStateChanged
 
        try {    
        
            GenericDAO gDao = new GenericDAO();
            Raca raca = new Raca();
        
            List<Object> ListarCodRaca = new ArrayList<>();

            raca.setNome_raca((String) jCBRaca.getSelectedItem());

            ListarCodRaca = gDao.listar2(Raca.class, raca);

            for (Object cod : ListarCodRaca) {
                Raca codraca = (Raca) cod;
                jTFCodRaca.setText(String.valueOf(codraca.getCodigo_raca()));
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBRacaItemStateChanged

    // Busca atraves de nome_classe o codigo_classe e mostra em edit em aba Cadastrar
    private void jCBClasseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBClasseItemStateChanged
        
        try {    
        
            GenericDAO gDao = new GenericDAO();
            Classes classe = new Classes();
        
            List<Object> ListarCodClasse = new ArrayList<>();

            classe.setNome_classe((String) jCBClasse.getSelectedItem());

            ListarCodClasse = gDao.listar2(Classes.class, classe);

            for (Object cod : ListarCodClasse) {
                Classes codclasse = (Classes) cod;
                jTFCodClasse.setText(String.valueOf(codclasse.getCodigo_classe()));
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBClasseItemStateChanged
 
    // ----- Aba Adicionar Nova Fala ----- //
    
    // Busca atraves de nome_npc o codigo_npc e tipo_npc, mostrando em edits em aba Adicionar Nova Fala
    private void jCBNovaFalaNomeNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovaFalaNomeNpcItemStateChanged
        
        try {    
        
            GenericDAO gDao = new GenericDAO();
            Npcs npc = new Npcs();
        
            List<Object> ListarDadosNpcs = new ArrayList<>();

            npc.setNome_npc((String) jCBNovaFalaNomeNpc.getSelectedItem());

            ListarDadosNpcs = gDao.listar2(Npcs.class, npc);

            for (Object cod : ListarDadosNpcs) {
                Npcs codnpc = (Npcs) cod;
                jTFNovaFalaCodigoNpc.setText(String.valueOf(codnpc.getCodigo_npc()));
                jTFNovaFalaTipoNpc.setText(String.valueOf(codnpc.getTipo_npc()));
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBNovaFalaNomeNpcItemStateChanged

    // Botão Adicionar Nova Fala para um NPC
    private void jBNovaFalaAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNovaFalaAdicionarActionPerformed

        if (jTFNovaFalaCodigoNpc.getText().equals("") | jTFNovaFalaTipoNpc.getText().equals("")
             | jTANovaFalaNpc.getText().equals("") | jTANovaFalaRespostaNegativa.getText().equals("")
                | jTANovaFalaRespostaPositiva.getText().equals("")) {
            
            JOptionPane.showMessageDialog(null, "Preencha todos os campos!");
        }
        else {
            CadastrarNovaFala(evt); // Chama evt CadastrarNovaFala
            LimparCamposAbaAdicionarNovaFala(evt);  // Chama evt LimparCamposAbaAdicionarNovaFala
        }
        
    }//GEN-LAST:event_jBNovaFalaAdicionarActionPerformed

    // ----- Aba Adicionar Novos Itens ----- //
    
    // Busca atraves de nome_npc o codigo_npc e tipo_npc, mostrando em edits em aba Adicionar Novos Itens   
    private void jCBNovosItensNomeNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensNomeNpcItemStateChanged
        
        try {    
        
            GenericDAO gDao = new GenericDAO();
            Npcs npc = new Npcs();
        
            List<Object> ListarDadosNpcs = new ArrayList<>();

            npc.setNome_npc((String) jCBNovosItensNomeNpc.getSelectedItem());

            ListarDadosNpcs = gDao.listar2(Npcs.class, npc);

            for (Object cod : ListarDadosNpcs) {
                Npcs codnpc = (Npcs) cod;
                jTFNovosItensCodigoNpc.setText(String.valueOf(codnpc.getCodigo_npc()));
                jTFNovosItensTipoNpc.setText(String.valueOf(codnpc.getTipo_npc()));
            }
            
            BuscarCodArmaduraNpcsBanco(null);
            BuscarCodArmaNpcsBanco(null);
            BuscarCodConsumivelNpcsBanco(null);
            BuscarCodEscudoNpcsBanco(null);
            
            if (jCBNovosItensNomeNpc.getSelectedIndex() != -1){
                
                jCBNovosItensAdicionarArmadura.setEnabled(true);
                jCBNovosItensAdicionarArma.setEnabled(true);
                jCBNovosItensAdicionarConsumivel.setEnabled(true);
                jCBNovosItensAdicionarEscudo.setEnabled(true);

            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBNovosItensNomeNpcItemStateChanged

    // Busca atraves do nome_armadura o codigo_armadura e mostra em edit em aba Adicionar Novos Itens 
    private void jCBNovosItensArmaduraNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensArmaduraNpcItemStateChanged
        
        try {    
        
            GenericDAO gDao = new GenericDAO();
            Armaduras armadura = new Armaduras();
        
            List<Object> ListarCodArmaduras = new ArrayList<>();

            armadura.setNome_armadura((String) jCBNovosItensArmaduraNpc.getSelectedItem());

            ListarCodArmaduras = gDao.listar2(Armaduras.class, armadura);

            for (Object cod : ListarCodArmaduras) {
                Armaduras codarmadura = (Armaduras) cod;
                jTFNovosItensCodArmadura.setText(String.valueOf(codarmadura.getCodigo_armadura()));         
            }
            
            jCBNovosItensCodArmaduraNpc.setSelectedItem(jTFNovosItensCodArmadura.getText());
            
            // Busca a quantidade de Armadura selecionada
            if (jTFNovosItensCodArmadura.getText().equalsIgnoreCase(jTFNovosItensVerificaCodArmadura.getText())){
                BuscarQuantidadeArmadurasNpcsBanco(null);
            }
            else {
                jTFNovosItensQuantidadeArmaduraNpc.setText("");
            }

        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBNovosItensArmaduraNpcItemStateChanged

    // Busca atraves do nome_arma o codigo_arma e mostra em edit em aba Adicionar Novos Itens  
    private void jCBNovosItensArmaNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensArmaNpcItemStateChanged
        
        try {    
        
            GenericDAO gDao = new GenericDAO();
            Armas arma = new Armas();
        
            List<Object> ListarCodArmas = new ArrayList<>();

            arma.setNome_arma((String) jCBNovosItensArmaNpc.getSelectedItem());

            ListarCodArmas = gDao.listar2(Armas.class, arma);

            for (Object cod : ListarCodArmas) {
                Armas codarma = (Armas) cod;
                jTFNovosItensCodArma.setText(String.valueOf(codarma.getCodigo_arma()));
            }
            
            jCBNovosItensCodArmaNpc.setSelectedItem(jTFNovosItensCodArma.getText());
            
            if (jTFNovosItensCodArma.getText().equalsIgnoreCase(jTFNovosItensVerificaCodArma.getText())){
                BuscarQuantidadeArmasNpcsBanco(null);
            }
            else {
                jTFNovosItensQuantidadeArmaNpc.setText("");
            }
            
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBNovosItensArmaNpcItemStateChanged
    
    // Busca atraves do nome_consumivel o codigo_consumivel e mostra em edit em aba Adicionar Novos Itens  
    private void jCBNovosItensConsumivelNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensConsumivelNpcItemStateChanged
        
        try {    
        
            GenericDAO gDao = new GenericDAO();
            Consumiveis consumivel = new Consumiveis();

            List<Object> ListarCodConsumiveis = new ArrayList<>();

            consumivel.setNome_consumivel((String) jCBNovosItensConsumivelNpc.getSelectedItem());

            ListarCodConsumiveis = gDao.listar2(Consumiveis.class, consumivel);

            for (Object cod : ListarCodConsumiveis) {
                Consumiveis codconsumivel = (Consumiveis) cod;
                jTFNovosItensCodConsumivel.setText(String.valueOf(codconsumivel.getCodigo_consumivel()));
            }
            
            jCBNovosItensCodConsumivelNpc.setSelectedItem(jTFNovosItensCodConsumivel.getText());
            
            if (jTFNovosItensCodConsumivel.getText().equalsIgnoreCase(jTFNovosItensVerificaCodConsumivel.getText())){
                BuscarQuantidadeConsumiveisNpcsBanco(null);
            }
            else {
                jTFNovosItensQuantidadeConsumivelNpc.setText("");
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBNovosItensConsumivelNpcItemStateChanged

    // Busca atraves do nome_escudo o codigo_escudo e mostra em edit em aba Adicionar Novos Itens
    private void jCBNovosItensEscudoNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensEscudoNpcItemStateChanged
        
        try {    
        
            GenericDAO gDao = new GenericDAO();
            Escudos escudo = new Escudos();

            List<Object> ListarCodEscudo = new ArrayList<>();

            escudo.setNome_escudo((String) jCBNovosItensEscudoNpc.getSelectedItem());

            ListarCodEscudo = gDao.listar2(Escudos.class, escudo);

            for (Object cod : ListarCodEscudo) {
                Escudos codescudo = (Escudos) cod;
                jTFNovosItensCodEscudo.setText(String.valueOf(codescudo.getCodigo_escudo()));
            }
        
            jCBNovosItensCodEscudoNpc.setSelectedItem(jTFNovosItensCodEscudo.getText());
            
            if (jTFNovosItensCodEscudo.getText().equalsIgnoreCase(jTFNovosItensVerificaCodEscudo.getText())){
                BuscarQuantidadeEscudosNpcsBanco(null);
            }
            else {
                jTFNovosItensQuantidadeEscudoNpc.setText("");
            }
            
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBNovosItensEscudoNpcItemStateChanged
    
    // Botão Adicionar Novos Itens em um NPC em aba Adicionar Novos Itens
    private void jBNovosItensAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNovosItensAdicionarActionPerformed

        try {
            
            GenericDAO gDao = new GenericDAO();
            
        // Verifica se algum Npc esta selecionado em ComboBox    
        if (jTFNovosItensCodigoNpc.getText().equals("") && jTFNovosItensTipoNpc.getText().equals("")){
 
            JOptionPane.showMessageDialog(null, "Selecione um Npc para poder adicionar novos itens!"); 
        }
        
        else {
            
            // Verifica Armadura
            if (jCBNovosItensAdicionarArmadura.isSelected()) {
                
                if (jCBNovosItensArmaduraNpc.getSelectedIndex() != (-1) 
                     && jTFNovosItensCodArmadura.getText() != ""
                      && jTFNovosItensQuantidadeArmaduraNpc.getText() != ""){
                
                ArmadurasNpcs NovaArmaduraNpc = new ArmadurasNpcs();

                // Verifica se campos codigo são iguais ao que esta cadastrado
                // Se já existir o valor ele faz um update na tabela
                if ( jTFNovosItensCodArmadura.getText().equalsIgnoreCase(jTFNovosItensVerificaCodArmadura.getText())) {
                    
                    NovaArmaduraNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                    NovaArmaduraNpc.setCodigo_armadura(Integer.parseInt(jTFNovosItensCodArmadura.getText()));
                    
                    // Soma quantidade_armadura cadastrada em banco com a que deseja ser adicionada
                    int SomaQuantidadeArmadura = (Integer.parseInt(jTFNovosItensQuantidadeArmaduraNpc.getText()) 
                                                    + (Integer.parseInt(jTFNovosItensQuantidadeArmaduraBanco.getText())));
                    
                    NovaArmaduraNpc.setQuantidade_armadura(SomaQuantidadeArmadura);
                    gDao.alterar2(NovaArmaduraNpc);
                    
                }
                
                else{ // Senão, ele faz um insert
                    
                    NovaArmaduraNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                    NovaArmaduraNpc.setCodigo_armadura(Integer.parseInt(jTFNovosItensCodArmadura.getText()));
                    NovaArmaduraNpc.setQuantidade_armadura(Integer.parseInt(jTFNovosItensQuantidadeArmaduraNpc.getText()));
                    gDao.adicionar(NovaArmaduraNpc);
                    
                }
                
                    JOptionPane.showMessageDialog(null, "Foram adicionadas " 
                        +jTFNovosItensQuantidadeArmaduraNpc.getText()+ " quantidades de Armadura: " 
                         +jCBNovosItensArmaduraNpc.getSelectedItem()+ 
                          " para o NPC: "+jCBNovosItensNomeNpc.getSelectedItem()+ 
                            " do Tipo: "+jTFNovosItensTipoNpc.getText()+" !");
                    
            } 
            
            else { // Informa campos em branco  
                JOptionPane.showMessageDialog(null, "Selecione uma Armadura e insira a quantidade desejada!");
            }
            
            }// Fim if Verifica Armadura
            
            // Verifica Arma
            if (jCBNovosItensAdicionarArma.isSelected()) {
                
                if (jCBNovosItensArmaNpc.getSelectedIndex() != (-1)
                     && jTFNovosItensCodArma.getText() != "" 
                      && jTFNovosItensQuantidadeArmaNpc.getText() != "") {
                
                ArmasNpcs NovaArmaNpc = new ArmasNpcs();
                
                // Verifica se campos codigo são iguais ao que esta cadastrado
                // Se já existir o valor ele faz um update na tabela    
               
                if ( jTFNovosItensCodArma.getText().equalsIgnoreCase(jTFNovosItensVerificaCodArma.getText())) {
                    
                    NovaArmaNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                    NovaArmaNpc.setCodigo_arma(Integer.parseInt(jTFNovosItensCodArma.getText()));

                    // Soma quantidade_arma cadastrada em banco com a que deseja ser adicionada
                    int SomaQuantidadeArma = (Integer.parseInt(jTFNovosItensQuantidadeArmaNpc.getText()) 
                                                    + (Integer.parseInt(jTFNovosItensQuantidadeArmaBanco.getText())));
                    
                    NovaArmaNpc.setQuantidade_arma(SomaQuantidadeArma);
                    gDao.alterar2(NovaArmaNpc);
                            
                }
                
                else{ // Senão, ele faz um insert
                
                    NovaArmaNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                    NovaArmaNpc.setCodigo_arma(Integer.parseInt(jTFNovosItensCodArma.getText()));
                    NovaArmaNpc.setQuantidade_arma(Integer.parseInt(jTFNovosItensQuantidadeArmaNpc.getText()));
                    gDao.adicionar(NovaArmaNpc);    
                    
                }
                
                    JOptionPane.showMessageDialog(null, "Foram adicionadas " 
                        +jTFNovosItensQuantidadeArmaNpc.getText()+ " quantidades de Arma: " 
                         +jCBNovosItensArmaNpc.getSelectedItem()+ 
                          " para o NPC: "+jCBNovosItensNomeNpc.getSelectedItem()+ 
                            " do Tipo: "+jTFNovosItensTipoNpc.getText()+" !");
                                    
            }
            
            else { // Informa campos em branco
                JOptionPane.showMessageDialog(null, "Selecione uma Arma e insira a quantidade desejada!");
            }
                
            }// Fim if Verifica Arma
            
            // Verifica Consumivel
            if (jCBNovosItensAdicionarConsumivel.isSelected()) {
                    
                if (jCBNovosItensConsumivelNpc.getSelectedIndex() != (-1)
                     && jTFNovosItensCodConsumivel.getText() != "" 
                      && jTFNovosItensQuantidadeConsumivelNpc.getText() != "" ){
                
                ConsumiveisNpcs NovoConsumivelNpc = new ConsumiveisNpcs();
                
                // Verifica se campos codigo são iguais ao que esta cadastrado
                // Se já existir o valor ele faz um update na tabela    
               
                if ( jTFNovosItensCodConsumivel.getText().equalsIgnoreCase(jTFNovosItensVerificaCodConsumivel.getText())) { 
                    
                    NovoConsumivelNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                    NovoConsumivelNpc.setCodigo_consumivel(Integer.parseInt(jTFNovosItensCodConsumivel.getText()));
                    
                    // Soma quantidade_consumivel cadastrada em banco com a que deseja ser adicionada
                    int SomaQuantidadeConsumivel = (Integer.parseInt(jTFNovosItensQuantidadeConsumivelNpc.getText()) 
                                                    + (Integer.parseInt(jTFNovosItensQuantidadeConsumivelBanco.getText())));
                    
                    NovoConsumivelNpc.setQuantidade_consumivel(SomaQuantidadeConsumivel);               
                    gDao.alterar2(NovoConsumivelNpc); 
                    
                }               
                
                else{ // Senão, ele faz um insert

                    NovoConsumivelNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                    NovoConsumivelNpc.setCodigo_consumivel(Integer.parseInt(jTFNovosItensCodConsumivel.getText()));
                    NovoConsumivelNpc.setQuantidade_consumivel(Integer.parseInt(jTFNovosItensQuantidadeConsumivelNpc.getText()));               
                    gDao.adicionar(NovoConsumivelNpc);
                    
                }
                
                    JOptionPane.showMessageDialog(null, "Foram adicionadas " 
                        +jTFNovosItensQuantidadeConsumivelNpc.getText()+ " quantidades de Consumivel: " 
                         +jCBNovosItensConsumivelNpc.getSelectedItem()+ 
                          " para o NPC: "+jCBNovosItensNomeNpc.getSelectedItem()+ 
                            " do Tipo: "+jTFNovosItensTipoNpc.getText()+" !");
                
            }
            
            else { // Informa campos em branco
                JOptionPane.showMessageDialog(null, "Selecione um Consumivel e insira a quantidade desejada!");
            }
            
            }// Fim if Verifica Consumivel
            
            // Verifica Escudo
            if (jCBNovosItensAdicionarEscudo.isSelected()) {
                
                if (jCBNovosItensEscudoNpc.getSelectedIndex() != (-1)
                     && jTFNovosItensCodEscudo.getText() != "" 
                      && jTFNovosItensQuantidadeEscudoNpc.getText() != "" ){
                
                EscudosNpcs NovoEscudoNpc = new EscudosNpcs();
                
                // Verifica se campos codigo são iguais ao que esta cadastrado
                // Se já existir o valor ele faz um update na tabela    
               
                if ( jTFNovosItensCodConsumivel.getText().equalsIgnoreCase(jTFNovosItensVerificaCodConsumivel.getText())) { 
                
                    NovoEscudoNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                    NovoEscudoNpc.setCodigo_escudo(Integer.parseInt(jTFNovosItensCodEscudo.getText()));
                    
                    // Soma quantidade_escudo cadastrada em banco com a que deseja ser adicionada
                    int SomaQuantidadeEscudo = (Integer.parseInt(jTFNovosItensQuantidadeEscudoNpc.getText()) 
                                                    + (Integer.parseInt(jTFNovosItensQuantidadeEscudoBanco.getText())));
                                        
                    NovoEscudoNpc.setQuantidade_escudos(SomaQuantidadeEscudo);
                    gDao.alterar2(NovoEscudoNpc);  
                    
                }  
                
                else{ // Senão, ele faz um insert
                    
                    NovoEscudoNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
                    NovoEscudoNpc.setCodigo_escudo(Integer.parseInt(jTFNovosItensCodEscudo.getText()));
                    NovoEscudoNpc.setQuantidade_escudos(Integer.parseInt(jTFNovosItensQuantidadeEscudoNpc.getText()));
                    gDao.adicionar(NovoEscudoNpc);
                    
                }
                
                    JOptionPane.showMessageDialog(null, "Foram adicionadas " 
                        +jTFNovosItensQuantidadeEscudoNpc.getText()+ " quantidades de Escudo: " 
                         +jCBNovosItensEscudoNpc.getSelectedItem()+ 
                          " para o NPC: "+jCBNovosItensNomeNpc.getSelectedItem()+ 
                            " do Tipo: "+jTFNovosItensTipoNpc.getText()+" !");
                
            }
            
            else { // Informa campos em branco
                JOptionPane.showMessageDialog(null, "Selecione um Escudo e insira a quantidade desejada!");
            }
            
            }// Fim if Verifica Escudo
        }
        
        LimparCamposAbaAdicionarNovosItens(evt); // Chama evento LimparCamposAbaAdicionarNovosItens
        BloquearComponentesAbaAdicionarNovosItens(evt);// Chama evento BloquearComponentesAbaAdicionarNovosItens
        
        } catch (SQLException | ClassNotFoundException | IllegalArgumentException | IllegalAccessException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jBNovosItensAdicionarActionPerformed

    // --- Verificações para cadastro em N/N --- //
    
    // Busca codigo_armadura que esta cadastrado em tabela ArmadurasNpcs atraves do Npc selecionado
    public void BuscarCodArmaduraNpcsBanco(java.awt.event.ActionEvent evt) {   

        try {    
        
            GenericDAO gDao = new GenericDAO();
            ArmadurasNpcs armaduranpc = new ArmadurasNpcs();
        
            jCBNovosItensCodArmaduraNpc.removeAllItems();
            
            List<Object> ListarArmadurasNpcs = new ArrayList<>();

            armaduranpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));

            ListarArmadurasNpcs = gDao.listar2(ArmadurasNpcs.class, armaduranpc);

            for (Object cod : ListarArmadurasNpcs) {
                ArmadurasNpcs codarmadura = (ArmadurasNpcs) cod;
                jCBNovosItensCodArmaduraNpc.addItem(String.valueOf(codarmadura.getCodigo_armadura()));
            }

            jCBNovosItensCodArmaduraNpc.setSelectedIndex(-1);
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    // Busca codigo_arma que esta cadastrado em tabela ArmaNpcs atraves do Npc selecionado
    public void BuscarCodArmaNpcsBanco(java.awt.event.ActionEvent evt){
    
        try {    
        
            GenericDAO gDao = new GenericDAO();
            ArmasNpcs armanpc = new ArmasNpcs();
        
            jCBNovosItensCodArmaNpc.removeAllItems();
            
            List<Object> ListarArmasNpcs = new ArrayList<>();

            armanpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));

            ListarArmasNpcs = gDao.listar2(ArmasNpcs.class, armanpc);

            for (Object cod : ListarArmasNpcs) {
                ArmasNpcs codarma = (ArmasNpcs) cod;
                jCBNovosItensCodArmaNpc.addItem(String.valueOf(codarma.getCodigo_arma()));
            }

            jCBNovosItensCodArmaNpc.setSelectedIndex(-1);
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }   
    
    } 
    
    // Busca codigo_consumivel que esta cadastrado em tabela ConsumiveisNpcs atraves do Npc selecionado
    public void BuscarCodConsumivelNpcsBanco(java.awt.event.ActionEvent evt){
    
        try {    
        
            GenericDAO gDao = new GenericDAO();
            ConsumiveisNpcs consumivelnpc = new ConsumiveisNpcs();
        
            jCBNovosItensCodConsumivelNpc.removeAllItems();
            
            List<Object> ListarConsumiveisNpcs = new ArrayList<>();

            consumivelnpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));

            ListarConsumiveisNpcs = gDao.listar2(ConsumiveisNpcs.class, consumivelnpc);

            for (Object cod : ListarConsumiveisNpcs) {
                ConsumiveisNpcs codconsumivel = (ConsumiveisNpcs) cod;
                jCBNovosItensCodConsumivelNpc.addItem(String.valueOf(codconsumivel.getCodigo_consumivel()));
            }

            jCBNovosItensCodConsumivelNpc.setSelectedIndex(-1);
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }    
        
    }
    
    // Busca codigo_escudo que esta cadastrado em tabela EscudosNpcs atraves do Npc selecionado
    public void BuscarCodEscudoNpcsBanco(java.awt.event.ActionEvent evt){
    
        try {    
        
            GenericDAO gDao = new GenericDAO();
            EscudosNpcs escudonpc = new EscudosNpcs();
        
            jCBNovosItensCodEscudoNpc.removeAllItems();
            
            List<Object> ListarEscudoNpcs = new ArrayList<>();

            escudonpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));

            ListarEscudoNpcs = gDao.listar2(EscudosNpcs.class, escudonpc);

            for (Object cod : ListarEscudoNpcs) {
                EscudosNpcs codescudo = (EscudosNpcs) cod;
                jCBNovosItensCodEscudoNpc.addItem(String.valueOf(codescudo.getCodigo_escudo()));
            }

            jCBNovosItensCodEscudoNpc.setSelectedIndex(-1);
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    // Busca quantidade_armadura que esta cadastrado em tabela ArmadurasNpcs
    public void BuscarQuantidadeArmadurasNpcsBanco(java.awt.event.ActionEvent evt){
        
        try {    
        
            GenericDAO gDao = new GenericDAO();
            ArmadurasNpcs QuantidadeArmaduraNpc = new ArmadurasNpcs();
        
            List<Object> ListarQuantidadeArmaduras = new ArrayList<>();

            QuantidadeArmaduraNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
            QuantidadeArmaduraNpc.setCodigo_armadura(Integer.parseInt(jTFNovosItensCodArmadura.getText()));

            ListarQuantidadeArmaduras = gDao.listar2(ArmadurasNpcs.class, QuantidadeArmaduraNpc);

            for (Object cod : ListarQuantidadeArmaduras) {
                ArmadurasNpcs QuantidadeArmadura = (ArmadurasNpcs) cod;
                jTFNovosItensQuantidadeArmaduraNpc.setText(String.valueOf(QuantidadeArmadura.getQuantidade_armadura()));
                jTFNovosItensQuantidadeArmaduraBanco.setText(String.valueOf(QuantidadeArmadura.getQuantidade_armadura()));
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    // Busca quantidade_arma que esta cadastrado em tabela ArmasNpcs
    public void BuscarQuantidadeArmasNpcsBanco(java.awt.event.ActionEvent evt){
        
        try {    
        
            GenericDAO gDao = new GenericDAO();
            ArmasNpcs QuantidadeArmaNpc = new ArmasNpcs();
        
            List<Object> ListarQuantidadeArmas = new ArrayList<>();

            QuantidadeArmaNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
            QuantidadeArmaNpc.setCodigo_arma(Integer.parseInt(jTFNovosItensCodArma.getText()));

            ListarQuantidadeArmas = gDao.listar2(ArmasNpcs.class, QuantidadeArmaNpc);

            for (Object cod : ListarQuantidadeArmas) {
                ArmasNpcs QuantidadeArma = (ArmasNpcs) cod;
                jTFNovosItensQuantidadeArmaNpc.setText(String.valueOf(QuantidadeArma.getQuantidade_arma()));
                jTFNovosItensQuantidadeArmaBanco.setText(String.valueOf(QuantidadeArma.getQuantidade_arma()));
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    // Busca quantidade_consumivel que esta cadastrado em tabela ConsumiveisNpcs
    public void BuscarQuantidadeConsumiveisNpcsBanco(java.awt.event.ActionEvent evt){
        
        try {    
        
            GenericDAO gDao = new GenericDAO();
            ConsumiveisNpcs QuantidadeConsumivelNpc = new ConsumiveisNpcs();
        
            List<Object> ListarQuantidadeConsumiveis = new ArrayList<>();

            QuantidadeConsumivelNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
            QuantidadeConsumivelNpc.setCodigo_consumivel(Integer.parseInt(jTFNovosItensCodConsumivel.getText()));

            ListarQuantidadeConsumiveis = gDao.listar2(ConsumiveisNpcs.class, QuantidadeConsumivelNpc);

            for (Object cod : ListarQuantidadeConsumiveis) {
                ConsumiveisNpcs QuantidadeConsumivel = (ConsumiveisNpcs) cod;
                jTFNovosItensQuantidadeConsumivelNpc.setText(String.valueOf(QuantidadeConsumivel.getQuantidade_consumivel()));
                jTFNovosItensQuantidadeConsumivelBanco.setText(String.valueOf(QuantidadeConsumivel.getQuantidade_consumivel()));
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
       
    // Busca quantidade_escudo que esta cadastrado em tabela EscudosNpcs
    public void BuscarQuantidadeEscudosNpcsBanco(java.awt.event.ActionEvent evt){
        
        try {    
        
            GenericDAO gDao = new GenericDAO();
            EscudosNpcs QuantidadeEscudoNpc = new EscudosNpcs();
        
            List<Object> ListarQuantidadeEscudos = new ArrayList<>();

            QuantidadeEscudoNpc.setCodigo_npc(Integer.parseInt(jTFNovosItensCodigoNpc.getText()));
            QuantidadeEscudoNpc.setCodigo_escudo(Integer.parseInt(jTFNovosItensCodEscudo.getText()));

            ListarQuantidadeEscudos = gDao.listar2(EscudosNpcs.class, QuantidadeEscudoNpc);

            for (Object cod : ListarQuantidadeEscudos) {
                EscudosNpcs QuantidadeEscudo = (EscudosNpcs) cod;
                jTFNovosItensQuantidadeEscudoNpc.setText(String.valueOf(QuantidadeEscudo.getQuantidade_escudos()));
                jTFNovosItensQuantidadeEscudoBanco.setText(String.valueOf(QuantidadeEscudo.getQuantidade_escudos()));
            }
        
        } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    // Lista Npcs cadastrados e mostra em ComboBox em aba Adicionar Nova Fala
    private void jBNovaFalaAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNovaFalaAtualizarActionPerformed
            
        try { 
            
            GenericDAO gDao = new GenericDAO();

            jCBNovaFalaNomeNpc.removeAllItems();

            // Carrega ComboBox Npcs    
            List<Object> listarNpcs = null;
                
            try {
                    listarNpcs = gDao.listar(Npcs.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                        Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarNpcs) {
                    Npcs nomenpc = (Npcs) obj2;
                    jCBNovaFalaNomeNpc.addItem(nomenpc.getNome_npc());
                }
            // Fim listar Npcs

                // Deixa campos em branco
                jCBNovaFalaNomeNpc.setSelectedIndex(-1);
                jTFNovaFalaCodigoNpc.setText("");
                jTFNovaFalaTipoNpc.setText("");

        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jBNovaFalaAtualizarActionPerformed

    // Lista Npcs cadastrados e Itens cadastrados em ComboBox em aba Adicionar Novos Itens    
    private void jBNovosItensAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNovosItensAtualizarActionPerformed
                
        try { 
            
            GenericDAO gDao = new GenericDAO();

            jCBNovosItensNomeNpc.removeAllItems();
            jCBNovosItensArmaduraNpc.removeAllItems();
            jCBNovosItensArmaNpc.removeAllItems();
            jCBNovosItensConsumivelNpc.removeAllItems();
            jCBNovosItensEscudoNpc.removeAllItems();
            LimparCamposAbaAdicionarNovosItens(evt);

            // Carrega ComboBox Npcs somente com Combatentes/Comerciantes/Coletável    
            List<Object> listarNpcs = null;
            
                try {
                    listarNpcs = gDao.listar(Npcs.class);
                } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                        Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (Object obj2 : listarNpcs) {
                    Npcs nomenpc = (Npcs) obj2;
                    if ((nomenpc.getTipo_npc().equals("Combatente")) 
                        |(nomenpc.getTipo_npc().equals("Coletável"))
                         |(nomenpc.getTipo_npc().equals("Comerciante"))) {
                        jCBNovosItensNomeNpc.addItem(nomenpc.getNome_npc());
                    }                    
                }
            // Fim listar Npcs

                // Limpa os campos
                jCBNovosItensNomeNpc.setSelectedIndex(-1);
                jTFNovosItensCodigoNpc.setText("");
                jTFNovosItensTipoNpc.setText("");
                
                BloquearComponentesAbaAdicionarNovosItens(evt); // Chama evento BloquearComponentesAbaAdicionarNovosItens

        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jBNovosItensAtualizarActionPerformed

    // Atualiza ComboBox Raça e ComboBox Classe com dados do banco em aba Cadastrar
    private void jBAtualizarAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAtualizarAtributosActionPerformed
        
        try {
            
            // Remove os itens de Combobox
            jCBRaca.removeAllItems();
            jCBClasse.removeAllItems();
            
            jCBRaca.setEnabled(true);
            jCBClasse.setEnabled(true);       
            
            // Chama evt AddItensComboAtributosNpcsAbaCadastrar
            AddItensComboAtributosNpcsAbaCadastrar(evt);
            
            // Seleciona index -1 e limpa campos código
            // Atributos
            jCBRaca.setSelectedIndex(-1);
            jCBClasse.setSelectedIndex(-1);
            
            jTFCodRaca.setText("");
            jTFCodClasse.setText("");
            
            if (jCBRaca.isEnabled() == true ){
                System.out.println("Foii");
            }
                          
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jBAtualizarAtributosActionPerformed
    
    // Atualiza ComboBox Armas, ComboBox Armaduras, ComboBox Consumiveis e ComboBox Escudos com dados do banco em aba Cadastrar
    private void jBAtualizarItensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAtualizarItensActionPerformed
             
        try {
            
            // Remove os itens de Combobox
            jCBArmaduraNpc.removeAllItems();
            jCBArmaNpc.removeAllItems();
            jCBConsumivelNpc.removeAllItems();
            jCBEscudoNpc.removeAllItems();
            
            // Chama evt AddItensComboItensNpcsAbaCadastrar
            AddItensComboItensNpcsAbaCadastrar(evt);
            
            // Seleciona index -1 e limpa campos codigo
            // Itens
            jCBArmaduraNpc.setSelectedIndex(-1);
            jCBArmaNpc.setSelectedIndex(-1);
            jCBConsumivelNpc.setSelectedIndex(-1);
            jCBEscudoNpc.setSelectedIndex(-1);
            
            jTFCodArmadura.setText("");
            jTFCodArma.setText("");
            jTFCodConsumivel.setText("");
            jTFCodEscudo.setText("");
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jBAtualizarItensActionPerformed

    // CheckBox Armaduras selecionado
    private void jCBNovosItensAdicionarArmaduraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBNovosItensAdicionarArmaduraActionPerformed
        
        try {
        
            if (jCBNovosItensAdicionarArmadura.isSelected()) {
                jCBNovosItensArmaduraNpc.setEnabled(true);
            }
            else{
                jCBNovosItensArmaduraNpc.setEnabled(false);
            }
            
            GenericDAO gDao = new GenericDAO();
        
        // Se CheckBox estiver selecionado...
        if (jCBNovosItensAdicionarArmadura.isSelected()){    
            
            jCBNovosItensArmaduraNpc.removeAllItems();
            
            // Carrega ComboBox Armaduras    
            List<Object> listarArmaduras = null;
            try {
                listarArmaduras = gDao.listar(Armaduras.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Object obj2 : listarArmaduras) {
                Armaduras armaduranpc = (Armaduras) obj2;
                jCBNovosItensArmaduraNpc.addItem(armaduranpc.getNome_armadura());
            }
            // Fim listar Armaduras
           
            jCBNovosItensArmaduraNpc.setSelectedIndex(-1);
            jTFNovosItensCodArmadura.setText("");
            jTFNovosItensQuantidadeArmaduraNpc.setText("");  
        }
        
        else { // Senão remove armaduras e limpa campos
            
            jCBNovosItensArmaduraNpc.removeAllItems();
            jTFNovosItensCodArmadura.setText("");
            jTFNovosItensQuantidadeArmaduraNpc.setText("");
        }
        
        jTFNovosItensQuantidadeArmaduraNpc.setEditable(true);
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCBNovosItensAdicionarArmaduraActionPerformed

    // CheckBox Armas selecionado
    private void jCBNovosItensAdicionarArmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBNovosItensAdicionarArmaActionPerformed
        
        try {
            
            if (jCBNovosItensAdicionarArma.isSelected()) {
                jCBNovosItensArmaNpc.setEnabled(true);
            }
            else{
                jCBNovosItensArmaNpc.setEnabled(false);
            }
            
            
            GenericDAO gDao = new GenericDAO();
        
        // Se CheckBox estiver selecionado...
        if (jCBNovosItensAdicionarArma.isSelected()){              
            
            jCBNovosItensArmaNpc.removeAllItems();
            
            // Carrega ComboBox Armas    
            List<Object> listarArmas = null;
            try {
                listarArmas = gDao.listar(Armas.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Object obj2 : listarArmas) {
                Armas armanpc = (Armas) obj2;
                jCBNovosItensArmaNpc.addItem(armanpc.getNome_arma());
            }
            // Fim listar Armas   
           
            jCBNovosItensArmaNpc.setSelectedIndex(-1);
            jTFNovosItensCodArma.setText("");
            jTFNovosItensQuantidadeArmaNpc.setText("");    
        }
        
        else{ // Senão remove armaduras e limpa campos
                    
            jCBNovosItensArmaNpc.removeAllItems();
            jTFNovosItensCodArma.setText("");
            jTFNovosItensQuantidadeArmaNpc.setText("");
        }
        
        jTFNovosItensQuantidadeArmaNpc.setEditable(true);
        
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        }  
        
    }//GEN-LAST:event_jCBNovosItensAdicionarArmaActionPerformed

    // CheckBox Consumiveis selecionado
    private void jCBNovosItensAdicionarConsumivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBNovosItensAdicionarConsumivelActionPerformed
    
        try {
            
            if (jCBNovosItensAdicionarConsumivel.isSelected()) {
            jCBNovosItensConsumivelNpc.setEnabled(true);
            }
            else{
            jCBNovosItensConsumivelNpc.setEnabled(false);
            }                        

            GenericDAO gDao = new GenericDAO();
            
        // Se CheckBox estiver selecionado...
        if (jCBNovosItensAdicionarConsumivel.isSelected()){ 
            
            jCBNovosItensConsumivelNpc.removeAllItems();
        
            // Carrega ComboBox Consumiveis
            List<Object> listarConsumiveis = null;
            try {
                listarConsumiveis = gDao.listar(Consumiveis.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Object obj2 : listarConsumiveis) {
                Consumiveis consumivelnpc = (Consumiveis) obj2;
                jCBNovosItensConsumivelNpc.addItem(consumivelnpc.getNome_consumivel());
            }
            // Fim listar Consumiveis    
            
            jCBNovosItensConsumivelNpc.setSelectedIndex(-1);
            jTFNovosItensCodConsumivel.setText("");
            jTFNovosItensQuantidadeConsumivelNpc.setText(""); 
        }
        
        else { // Senão remove armaduras e limpa campos
        
            jCBNovosItensConsumivelNpc.removeAllItems();
            jTFNovosItensCodConsumivel.setText("");
            jTFNovosItensQuantidadeConsumivelNpc.setText("");
        }
        
        jTFNovosItensQuantidadeConsumivelNpc.setEditable(true);
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
    }//GEN-LAST:event_jCBNovosItensAdicionarConsumivelActionPerformed

    // CheckBox Escudo selecionado
    private void jCBNovosItensAdicionarEscudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBNovosItensAdicionarEscudoActionPerformed
        
        try {
            
            if (jCBNovosItensAdicionarEscudo.isSelected()) {
            jCBNovosItensEscudoNpc.setEnabled(true);
            }
            else{
            jCBNovosItensEscudoNpc.setEnabled(false);
            } 

            GenericDAO gDao = new GenericDAO();
            
        // Se CheckBox estiver selecionado...
        if (jCBNovosItensAdicionarEscudo.isSelected()){  
            
            jCBNovosItensEscudoNpc.removeAllItems();
            
            // Carrega ComboBox Escudos
            List<Object> listarEscudos = null;
            try {
                listarEscudos = gDao.listar(Escudos.class);
            } catch (SQLException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException | InstantiationException | ClassNotFoundException ex) {
                    Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Object obj2 : listarEscudos) {
                Escudos escudonpc = (Escudos) obj2;
                jCBNovosItensEscudoNpc.addItem(escudonpc.getNome_escudo());
            }
            // Fim listar Escudos        
            
            jCBNovosItensEscudoNpc.setSelectedIndex(-1);
            jTFNovosItensCodEscudo.setText("");
            jTFNovosItensQuantidadeEscudoNpc.setText("");  
        }
        
        else{ // Senão remove armaduras e limpa campos
            
            jCBNovosItensEscudoNpc.removeAllItems();
            jTFNovosItensCodEscudo.setText("");
            jTFNovosItensQuantidadeEscudoNpc.setText("");
        }
        
        jTFNovosItensQuantidadeEscudoNpc.setEditable(true);
            
        } catch (SQLException ex) {
            Logger.getLogger(JFNpc.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
    }//GEN-LAST:event_jCBNovosItensAdicionarEscudoActionPerformed

    // Chama formulário para alterar ou excluir um Npc
    private void jBAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAlterarActionPerformed
        JFNpcAlterarExcluir NpcAlterarExcluir = new JFNpcAlterarExcluir();
        NpcAlterarExcluir.setVisible(true);
        
        JFNpc Npc = new JFNpc();
        Npc.setVisible(false);
    }//GEN-LAST:event_jBAlterarActionPerformed

    // --- Valores de ComboBox passam para jTextField sendo utilizados para fazer verificação --- // 
    
    private void jCBNovosItensCodArmaduraNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensCodArmaduraNpcItemStateChanged
        jTFNovosItensVerificaCodArmadura.setText((String) jCBNovosItensCodArmaduraNpc.getSelectedItem());
    }//GEN-LAST:event_jCBNovosItensCodArmaduraNpcItemStateChanged

    private void jCBNovosItensCodArmaNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensCodArmaNpcItemStateChanged
        jTFNovosItensVerificaCodArma.setText((String) jCBNovosItensCodArmaNpc.getSelectedItem());
    }//GEN-LAST:event_jCBNovosItensCodArmaNpcItemStateChanged

    private void jCBNovosItensCodConsumivelNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensCodConsumivelNpcItemStateChanged
        jTFNovosItensVerificaCodConsumivel.setText((String) jCBNovosItensCodConsumivelNpc.getSelectedItem());
    }//GEN-LAST:event_jCBNovosItensCodConsumivelNpcItemStateChanged

    private void jCBNovosItensCodEscudoNpcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBNovosItensCodEscudoNpcItemStateChanged
        jTFNovosItensVerificaCodEscudo.setText((String) jCBNovosItensCodEscudoNpc.getSelectedItem());
    }//GEN-LAST:event_jCBNovosItensCodEscudoNpcItemStateChanged

    // --- Habilita campos se checkbox esta selecionado --- //
    
    private void jCBAdicionarItemArmaduraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBAdicionarItemArmaduraActionPerformed

        if (jCBAdicionarItemArmadura.isSelected()){
            jCBArmaduraNpc.setEnabled(true);
            jTFQuantidadeArmaduraNpc.setEditable(true);
        }
        else{
            jCBArmaduraNpc.setEnabled(false);
            jTFQuantidadeArmaduraNpc.setEditable(false); 
        }
        
    }//GEN-LAST:event_jCBAdicionarItemArmaduraActionPerformed

    private void jCBAdicionarItemArmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBAdicionarItemArmaActionPerformed
        
        if (jCBAdicionarItemArmadura.isSelected()){
            jCBArmaNpc.setEnabled(true);
            jTFQuantidadeArmaNpc.setEditable(true);
        }
        else{
            jCBArmaNpc.setEnabled(false);
            jTFQuantidadeArmaNpc.setEditable(false); 
        }
        
    }//GEN-LAST:event_jCBAdicionarItemArmaActionPerformed

    private void jCBAdicionarItemConsumivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBAdicionarItemConsumivelActionPerformed
        
        if (jCBAdicionarItemConsumivel.isSelected()){
            jCBConsumivelNpc.setEnabled(true);
            jTFQuantidadeConsumivelNpc.setEditable(true);
        }
        else{
            jCBConsumivelNpc.setEnabled(false);
            jTFQuantidadeConsumivelNpc.setEditable(false); 
        }
        
    }//GEN-LAST:event_jCBAdicionarItemConsumivelActionPerformed

    private void jCBAdicionarItemEscudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBAdicionarItemEscudoActionPerformed
        
        if (jCBAdicionarItemEscudo.isSelected()){
            jCBEscudoNpc.setEnabled(true);
            jTFQuantidadeEscudoNpc.setEditable(true);
        }
        else{
            jCBEscudoNpc.setEnabled(false);
            jTFQuantidadeEscudoNpc.setEditable(false); 
        }
        
    }//GEN-LAST:event_jCBAdicionarItemEscudoActionPerformed

    private void jBSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSairActionPerformed
        
        JFMestre Mestre = new JFMestre();
        Mestre.setVisible(true);
        
        JFNpc Npc = new JFNpc();
        Npc.setVisible(false);
        
    }//GEN-LAST:event_jBSairActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFNpc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFNpc().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField JTFNomeNpc;
    private javax.swing.JLabel LabelAdicionarNovaFala;
    private javax.swing.JLabel LabelAdicionarNovosItens;
    private javax.swing.JLabel LabelCadastroNpc;
    private javax.swing.JLabel LabelDescricaoNpc;
    private javax.swing.JLabel LabelFala;
    private javax.swing.JLabel LabelNomeNpc;
    private javax.swing.JLabel LabelNovaFalaNomeNpc;
    private javax.swing.JLabel LabelNovaFalaNpc;
    private javax.swing.JLabel LabelNovaFalaRespostaNegativa;
    private javax.swing.JLabel LabelNovaFalaRespostaPositiva;
    private javax.swing.JLabel LabelNovaFalaTipoNpc;
    private javax.swing.JLabel LabelNovosItensNomeNpc;
    private javax.swing.JLabel LabelNovosItensTipoNpc;
    private javax.swing.JLabel LabelRespostaNegativa;
    private javax.swing.JLabel LabelRespostaPositiva;
    private javax.swing.JLabel LabelTipoNpc;
    private javax.swing.JButton jBAlterar;
    private javax.swing.JButton jBAtualizarAtributos;
    private javax.swing.JButton jBAtualizarItens;
    private javax.swing.JButton jBCadastrar;
    private javax.swing.JButton jBNovaFalaAdicionar;
    private javax.swing.JButton jBNovaFalaAtualizar;
    private javax.swing.JButton jBNovosItensAdicionar;
    private javax.swing.JButton jBNovosItensAtualizar;
    private javax.swing.JButton jBSair;
    private javax.swing.JCheckBox jCBAdicionarItemArma;
    private javax.swing.JCheckBox jCBAdicionarItemArmadura;
    private javax.swing.JCheckBox jCBAdicionarItemConsumivel;
    private javax.swing.JCheckBox jCBAdicionarItemEscudo;
    private javax.swing.JComboBox jCBArmaNpc;
    private javax.swing.JComboBox jCBArmaduraNpc;
    private javax.swing.JComboBox jCBClasse;
    private javax.swing.JComboBox jCBConsumivelNpc;
    private javax.swing.JComboBox jCBEscudoNpc;
    private javax.swing.JComboBox jCBNovaFalaNomeNpc;
    private javax.swing.JCheckBox jCBNovosItensAdicionarArma;
    private javax.swing.JCheckBox jCBNovosItensAdicionarArmadura;
    private javax.swing.JCheckBox jCBNovosItensAdicionarConsumivel;
    private javax.swing.JCheckBox jCBNovosItensAdicionarEscudo;
    private javax.swing.JComboBox jCBNovosItensArmaNpc;
    private javax.swing.JComboBox jCBNovosItensArmaduraNpc;
    private javax.swing.JComboBox jCBNovosItensCodArmaNpc;
    private javax.swing.JComboBox jCBNovosItensCodArmaduraNpc;
    private javax.swing.JComboBox jCBNovosItensCodConsumivelNpc;
    private javax.swing.JComboBox jCBNovosItensCodEscudoNpc;
    private javax.swing.JComboBox jCBNovosItensConsumivelNpc;
    private javax.swing.JComboBox jCBNovosItensEscudoNpc;
    private javax.swing.JComboBox jCBNovosItensNomeNpc;
    private javax.swing.JComboBox jCBRaca;
    private javax.swing.JComboBox jCBTipoNpc;
    private javax.swing.JLabel jLArmaNpc;
    private javax.swing.JLabel jLArmaduraNpc;
    private javax.swing.JLabel jLAtributosNpc;
    private javax.swing.JLabel jLBasedeAtaque;
    private javax.swing.JLabel jLCarisma;
    private javax.swing.JLabel jLClasse;
    private javax.swing.JLabel jLClassedeArmadura;
    private javax.swing.JLabel jLConstituicao;
    private javax.swing.JLabel jLConsumivelNpc;
    private javax.swing.JLabel jLDestreza;
    private javax.swing.JLabel jLEscudoNpc;
    private javax.swing.JLabel jLForca;
    private javax.swing.JLabel jLFortitude;
    private javax.swing.JLabel jLIniciativa;
    private javax.swing.JLabel jLInteligencia;
    private javax.swing.JLabel jLItens;
    private javax.swing.JLabel jLNovosItens;
    private javax.swing.JLabel jLNovosItensArmaNpc;
    private javax.swing.JLabel jLNovosItensArmaduraNpc;
    private javax.swing.JLabel jLNovosItensCodArmaNpcBanco;
    private javax.swing.JLabel jLNovosItensCodArmaduraNpcBanco;
    private javax.swing.JLabel jLNovosItensCodConsumivelNpcBanco;
    private javax.swing.JLabel jLNovosItensCodEscudoNpcBanco;
    private javax.swing.JLabel jLNovosItensConsumivelNpc;
    private javax.swing.JLabel jLNovosItensEscudoNpc;
    private javax.swing.JLabel jLNovosItensQuantidadeItensBanco;
    private javax.swing.JLabel jLNovosItensQuantidadeItensNpc;
    private javax.swing.JLabel jLPontosdeVida;
    private javax.swing.JLabel jLQuantidadeItensNpc;
    private javax.swing.JLabel jLRaca;
    private javax.swing.JLabel jLReflexos;
    private javax.swing.JLabel jLSabedoria;
    private javax.swing.JLabel jLVontade;
    private javax.swing.JPanel jPCadastrar;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextArea jTADescricaoNpc;
    private javax.swing.JTextArea jTAFalaNpc;
    private javax.swing.JTextArea jTANovaFalaNpc;
    private javax.swing.JTextArea jTANovaFalaRespostaNegativa;
    private javax.swing.JTextArea jTANovaFalaRespostaPositiva;
    private javax.swing.JTextArea jTARespostaNegativa;
    private javax.swing.JTextArea jTARespostaPositiva;
    private javax.swing.JTextField jTFBasedeAtaque;
    private javax.swing.JTextField jTFCarisma;
    private javax.swing.JTextField jTFClassedeArmadura;
    private javax.swing.JTextField jTFCodArma;
    private javax.swing.JTextField jTFCodArmadura;
    private javax.swing.JTextField jTFCodClasse;
    private javax.swing.JTextField jTFCodConsumivel;
    private javax.swing.JTextField jTFCodEscudo;
    private javax.swing.JTextField jTFCodRaca;
    private javax.swing.JTextField jTFCodigoNpc;
    private javax.swing.JTextField jTFConstituicao;
    private javax.swing.JTextField jTFDestreza;
    private javax.swing.JTextField jTFForca;
    private javax.swing.JTextField jTFFortitude;
    private javax.swing.JTextField jTFIndexTipoNpc;
    private javax.swing.JTextField jTFIniciativa;
    private javax.swing.JTextField jTFInteligencia;
    private javax.swing.JTextField jTFNovaFalaCodigoNpc;
    private javax.swing.JTextField jTFNovaFalaTipoNpc;
    private javax.swing.JTextField jTFNovosItensCodArma;
    private javax.swing.JTextField jTFNovosItensCodArmadura;
    private javax.swing.JTextField jTFNovosItensCodConsumivel;
    private javax.swing.JTextField jTFNovosItensCodEscudo;
    private javax.swing.JTextField jTFNovosItensCodigoNpc;
    private javax.swing.JTextField jTFNovosItensQuantidadeArmaBanco;
    private javax.swing.JTextField jTFNovosItensQuantidadeArmaNpc;
    private javax.swing.JTextField jTFNovosItensQuantidadeArmaduraBanco;
    private javax.swing.JTextField jTFNovosItensQuantidadeArmaduraNpc;
    private javax.swing.JTextField jTFNovosItensQuantidadeConsumivelBanco;
    private javax.swing.JTextField jTFNovosItensQuantidadeConsumivelNpc;
    private javax.swing.JTextField jTFNovosItensQuantidadeEscudoBanco;
    private javax.swing.JTextField jTFNovosItensQuantidadeEscudoNpc;
    private javax.swing.JTextField jTFNovosItensTipoNpc;
    private javax.swing.JTextField jTFNovosItensVerificaCodArma;
    private javax.swing.JTextField jTFNovosItensVerificaCodArmadura;
    private javax.swing.JTextField jTFNovosItensVerificaCodConsumivel;
    private javax.swing.JTextField jTFNovosItensVerificaCodEscudo;
    private javax.swing.JTextField jTFPontosdeVida;
    private javax.swing.JTextField jTFQuantidadeArmaNpc;
    private javax.swing.JTextField jTFQuantidadeArmaduraNpc;
    private javax.swing.JTextField jTFQuantidadeConsumivelNpc;
    private javax.swing.JTextField jTFQuantidadeEscudoNpc;
    private javax.swing.JTextField jTFReflexos;
    private javax.swing.JTextField jTFSabedoria;
    private javax.swing.JTextField jTFVontade;
    private javax.swing.JTabbedPane jTPNPC;
    // End of variables declaration//GEN-END:variables
}
